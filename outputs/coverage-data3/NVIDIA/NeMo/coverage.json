{"meta": {"format": 2, "version": "7.4.4", "timestamp": "2024-04-28T19:00:33.729194", "branch_coverage": false, "show_contexts": false}, "files": {"nemo/__init__.py": {"executed_lines": [16], "summary": {"covered_lines": 1, "num_statements": 1, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/__init__.py": {"executed_lines": [1], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/__init__.py": {"executed_lines": [15, 16, 19, 22, 25], "summary": {"covered_lines": 5, "num_statements": 5, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/data/__init__.py": {"executed_lines": [1], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/data/audio_to_audio.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 41, 106, 107, 108, 109, 110, 113, 114, 135, 145, 146, 149, 150, 156, 157, 160, 161, 164, 165, 174, 175, 192, 193, 202, 203, 221, 222, 227, 228, 241, 265, 308, 320, 346, 369, 370, 411, 412, 496, 497, 549, 550, 593, 594, 629, 630, 642, 659, 660, 679, 680, 690, 691, 692, 696, 705, 736, 757, 762, 768, 773, 774, 817, 853, 854, 879, 885, 886, 937, 993, 994, 1023, 1029, 1030, 1068, 1109, 1110], "summary": {"covered_lines": 89, "num_statements": 271, "percent_covered": 32.84132841328413, "percent_covered_display": "33", "missing_lines": 182, "excluded_lines": 0}, "missing_lines": [70, 72, 74, 75, 77, 78, 79, 81, 82, 84, 85, 87, 89, 92, 94, 96, 103, 138, 139, 141, 142, 143, 147, 151, 152, 154, 158, 162, 172, 187, 188, 190, 200, 216, 217, 219, 225, 236, 237, 239, 261, 262, 263, 286, 288, 290, 291, 293, 295, 296, 299, 300, 301, 303, 304, 306, 318, 329, 330, 332, 341, 342, 344, 356, 357, 358, 366, 367, 400, 409, 446, 447, 449, 451, 452, 456, 457, 458, 460, 461, 463, 465, 468, 469, 470, 472, 473, 476, 479, 481, 484, 485, 492, 494, 520, 522, 529, 531, 532, 533, 540, 541, 542, 544, 546, 547, 570, 571, 576, 584, 586, 587, 589, 591, 607, 609, 610, 612, 613, 615, 618, 620, 621, 623, 625, 627, 639, 640, 652, 653, 654, 655, 656, 657, 670, 671, 672, 674, 676, 699, 701, 702, 703, 725, 727, 728, 729, 730, 732, 752, 753, 755, 760, 765, 831, 836, 844, 845, 851, 868, 869, 871, 955, 961, 969, 971, 972, 978, 983, 989, 1010, 1011, 1013, 1083, 1089, 1097, 1098, 1103, 1105, 1126, 1127, 1129], "excluded_lines": []}, "nemo/collections/asr/data/audio_to_audio_dataset.py": {"executed_lines": [15, 18, 43, 72], "summary": {"covered_lines": 4, "num_statements": 10, "percent_covered": 40.0, "percent_covered_display": "40", "missing_lines": 6, "excluded_lines": 0}, "missing_lines": [27, 40, 52, 69, 81, 95], "excluded_lines": []}, "nemo/collections/asr/data/audio_to_audio_lhotse.py": {"executed_lines": [14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 34, 35, 42, 43, 44, 46, 64, 75, 103, 110, 198], "summary": {"covered_lines": 25, "num_statements": 103, "percent_covered": 24.271844660194176, "percent_covered_display": "24", "missing_lines": 78, "excluded_lines": 0}, "missing_lines": [47, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 71, 72, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 90, 99, 100, 104, 105, 106, 107, 131, 132, 135, 136, 137, 139, 141, 142, 143, 147, 149, 150, 151, 155, 157, 158, 159, 163, 165, 166, 167, 171, 173, 174, 175, 179, 181, 182, 183, 187, 189, 190, 192, 193, 195, 199, 200, 201, 202, 203, 206, 207], "excluded_lines": []}, "nemo/collections/asr/data/audio_to_ctm_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 50, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 50, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 38, 39, 40, 42, 48, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 73, 74, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95], "excluded_lines": []}, "nemo/collections/asr/data/audio_to_diar_label.py": {"executed_lines": [15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 29, 65, 102, 142, 143, 177, 178, 192, 230, 233, 271, 313, 349, 371, 409, 424, 425, 461, 462, 474, 507, 510, 539, 575, 609, 683, 728, 729, 761, 786, 790, 791, 827, 852], "summary": {"covered_lines": 40, "num_statements": 284, "percent_covered": 14.084507042253522, "percent_covered_display": "14", "missing_lines": 244, "excluded_lines": 0}, "missing_lines": [54, 55, 56, 57, 58, 59, 60, 61, 62, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 122, 123, 124, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 180, 190, 206, 207, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 339, 340, 341, 342, 345, 346, 347, 365, 366, 367, 368, 369, 385, 386, 387, 388, 389, 390, 391, 394, 398, 399, 402, 403, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 464, 472, 487, 488, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 527, 528, 529, 530, 531, 532, 533, 536, 537, 561, 562, 564, 565, 566, 567, 570, 571, 572, 573, 576, 577, 578, 580, 581, 582, 584, 585, 587, 589, 590, 594, 595, 596, 597, 598, 599, 601, 602, 604, 606, 637, 638, 639, 640, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 721, 722, 723, 724, 725, 774, 787, 840, 853], "excluded_lines": []}, "nemo/collections/asr/data/audio_to_label.py": {"executed_lines": [14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 31, 34, 56, 65, 79, 119, 161, 211, 212, 237, 238, 267, 317, 320, 342, 343, 365, 369, 370, 407, 440, 443, 447, 448, 524, 582, 633, 663, 666, 670, 671, 738, 742, 743, 812, 850, 853, 856, 860, 861, 899, 900, 928, 983, 992, 1003, 1006, 1030, 1034, 1035, 1105, 1176, 1185, 1196, 1247, 1282, 1285, 1288], "summary": {"covered_lines": 63, "num_statements": 416, "percent_covered": 15.14423076923077, "percent_covered_display": "15", "missing_lines": 353, "excluded_lines": 0}, "missing_lines": [43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 61, 62, 72, 73, 74, 75, 76, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 116, 127, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 146, 148, 150, 151, 152, 154, 155, 156, 158, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 204, 206, 207, 208, 242, 252, 253, 261, 265, 279, 280, 281, 282, 283, 291, 292, 293, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 308, 310, 311, 314, 315, 318, 321, 323, 325, 326, 328, 329, 331, 332, 334, 336, 338, 366, 422, 423, 424, 426, 427, 429, 441, 444, 540, 541, 548, 550, 551, 553, 554, 556, 557, 558, 559, 561, 562, 564, 571, 590, 591, 592, 593, 594, 595, 597, 598, 599, 601, 602, 603, 604, 606, 607, 609, 611, 619, 620, 622, 623, 624, 625, 626, 628, 629, 631, 636, 638, 640, 641, 643, 644, 645, 648, 649, 653, 656, 658, 659, 661, 664, 667, 739, 830, 831, 832, 833, 834, 836, 851, 854, 857, 904, 914, 915, 922, 926, 944, 945, 946, 948, 949, 951, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 980, 981, 984, 985, 986, 987, 988, 989, 990, 993, 995, 996, 997, 999, 1000, 1001, 1004, 1007, 1009, 1011, 1012, 1014, 1022, 1024, 1026, 1028, 1031, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1134, 1141, 1143, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1158, 1165, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1186, 1188, 1189, 1190, 1192, 1193, 1194, 1204, 1205, 1206, 1207, 1208, 1209, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1220, 1221, 1223, 1225, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1245, 1250, 1252, 1254, 1255, 1257, 1258, 1259, 1262, 1263, 1271, 1274, 1276, 1278, 1280, 1283, 1286, 1289], "excluded_lines": []}, "nemo/collections/asr/data/audio_to_label_dataset.py": {"executed_lines": [14, 16, 18, 19, 20, 21, 24, 47, 72, 133, 162, 225, 248], "summary": {"covered_lines": 13, "num_statements": 96, "percent_covered": 13.541666666666666, "percent_covered_display": "14", "missing_lines": 83, "excluded_lines": 0}, "missing_lines": [34, 44, 57, 69, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 105, 108, 109, 110, 125, 126, 128, 130, 136, 137, 138, 139, 142, 143, 144, 145, 148, 150, 159, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 195, 198, 199, 200, 217, 218, 220, 222, 226, 227, 229, 231, 245, 252, 253, 255, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 274, 277, 278, 280, 299, 300, 302, 304], "excluded_lines": []}, "nemo/collections/asr/data/audio_to_text.py": {"executed_lines": [14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 45, 46, 48, 55, 58, 112, 113, 131, 158, 162, 167, 180, 234, 355, 367, 396, 397, 422, 423, 434, 472, 475, 481, 507, 510, 514, 515, 547, 548, 559, 604, 605, 641, 642, 653, 719, 720, 811, 887, 912, 943, 946, 992, 995, 998, 1009, 1013, 1014, 1103, 1156, 1157, 1236, 1310, 1311, 1318, 1325, 1328, 1333, 1337, 1338, 1343, 1347, 1360, 1361, 1365], "summary": {"covered_lines": 79, "num_statements": 417, "percent_covered": 18.94484412470024, "percent_covered_display": "19", "missing_lines": 338, "excluded_lines": 0}, "missing_lines": [66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 143, 145, 154, 155, 156, 159, 160, 163, 164, 165, 168, 170, 171, 172, 173, 174, 175, 177, 181, 182, 183, 185, 187, 188, 189, 190, 193, 194, 195, 196, 198, 200, 203, 209, 210, 211, 213, 214, 219, 220, 221, 222, 226, 227, 229, 231, 251, 252, 254, 256, 258, 262, 263, 264, 267, 270, 271, 272, 273, 275, 277, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 295, 296, 297, 298, 300, 301, 302, 306, 308, 309, 312, 313, 315, 316, 317, 319, 320, 321, 323, 324, 325, 331, 332, 334, 336, 341, 348, 374, 375, 376, 377, 379, 380, 384, 386, 393, 426, 451, 452, 455, 457, 467, 468, 469, 470, 473, 476, 477, 479, 482, 483, 485, 486, 488, 496, 498, 500, 501, 503, 505, 508, 511, 551, 580, 582, 586, 645, 668, 669, 671, 673, 674, 676, 678, 679, 681, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 696, 698, 699, 701, 832, 835, 844, 846, 858, 860, 861, 862, 863, 864, 865, 867, 875, 895, 896, 897, 898, 900, 901, 903, 904, 905, 906, 907, 908, 910, 916, 917, 918, 919, 920, 921, 922, 924, 925, 927, 928, 929, 930, 932, 933, 934, 935, 937, 939, 941, 944, 949, 952, 954, 955, 957, 958, 959, 962, 963, 970, 973, 976, 978, 980, 981, 982, 983, 984, 985, 987, 988, 990, 993, 996, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1010, 1128, 1130, 1134, 1255, 1256, 1258, 1260, 1261, 1263, 1265, 1266, 1268, 1270, 1271, 1272, 1273, 1275, 1276, 1278, 1279, 1280, 1281, 1282, 1283, 1285, 1286, 1288, 1321, 1322, 1323, 1326, 1329, 1334, 1339, 1340, 1341, 1344, 1345, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1362, 1363, 1366, 1367, 1368, 1369, 1370, 1371, 1374, 1375], "excluded_lines": []}, "nemo/collections/asr/data/audio_to_text_dali.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 29, 30, 36, 37, 39, 44, 48, 50, 57, 82, 83, 103, 104, 107, 110, 114, 115, 147, 508, 511, 514, 517, 518, 521, 524, 568, 569, 605, 666, 667, 702], "summary": {"covered_lines": 39, "num_statements": 260, "percent_covered": 15.0, "percent_covered_display": "15", "missing_lines": 221, "excluded_lines": 0}, "missing_lines": [31, 32, 33, 35, 68, 73, 74, 75, 77, 79, 84, 85, 86, 87, 88, 89, 96, 105, 108, 111, 172, 173, 174, 177, 179, 180, 185, 186, 190, 192, 194, 195, 197, 198, 199, 201, 202, 204, 205, 206, 208, 216, 217, 218, 219, 220, 221, 223, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 244, 249, 250, 251, 259, 260, 262, 263, 264, 265, 270, 271, 273, 274, 275, 277, 278, 279, 280, 281, 282, 285, 286, 288, 289, 290, 295, 296, 297, 303, 306, 307, 308, 309, 310, 312, 317, 318, 319, 323, 324, 326, 327, 328, 345, 347, 348, 351, 358, 359, 365, 376, 379, 380, 382, 385, 392, 394, 395, 396, 400, 402, 404, 405, 406, 409, 410, 411, 414, 415, 418, 426, 428, 437, 438, 441, 442, 444, 449, 452, 455, 456, 458, 460, 461, 463, 465, 466, 468, 470, 471, 472, 480, 481, 484, 485, 486, 488, 489, 491, 493, 494, 505, 506, 509, 512, 515, 519, 522, 525, 526, 527, 528, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 542, 544, 545, 548, 549, 550, 551, 553, 554, 555, 556, 558, 559, 560, 561, 563, 564, 565, 634, 636, 640, 726, 727, 729, 731, 732, 734, 736, 737, 739, 741, 742, 743, 745, 746, 747, 749], "excluded_lines": []}, "nemo/collections/asr/data/audio_to_text_dataset.py": {"executed_lines": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 32, 33, 34, 37, 80, 129, 163, 212, 243, 301, 405, 487, 537, 585, 708, 845, 846, 852, 874, 879, 897, 928], "summary": {"covered_lines": 34, "num_statements": 319, "percent_covered": 10.658307210031348, "percent_covered_display": "11", "missing_lines": 285, "excluded_lines": 0}, "missing_lines": [48, 49, 52, 54, 55, 58, 60, 62, 71, 72, 76, 77, 96, 97, 99, 100, 104, 105, 106, 108, 109, 110, 112, 113, 115, 126, 140, 141, 143, 160, 183, 184, 188, 189, 190, 192, 193, 194, 195, 196, 198, 209, 226, 240, 268, 269, 270, 271, 274, 275, 276, 277, 285, 287, 298, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 337, 338, 342, 343, 345, 346, 348, 351, 352, 353, 354, 356, 357, 379, 397, 398, 400, 402, 414, 415, 416, 417, 419, 420, 422, 426, 427, 428, 429, 431, 432, 436, 437, 440, 441, 442, 443, 444, 445, 446, 448, 450, 458, 460, 462, 484, 510, 511, 534, 561, 562, 582, 600, 601, 603, 605, 606, 610, 611, 612, 613, 616, 617, 618, 619, 620, 622, 623, 624, 626, 627, 628, 629, 630, 638, 641, 642, 643, 644, 645, 646, 649, 650, 655, 656, 658, 659, 668, 669, 672, 676, 678, 679, 680, 688, 696, 697, 698, 699, 700, 704, 705, 729, 730, 732, 734, 735, 739, 740, 741, 742, 745, 747, 748, 749, 750, 752, 753, 754, 756, 757, 758, 759, 760, 769, 772, 773, 774, 775, 776, 777, 780, 781, 786, 787, 789, 790, 799, 800, 803, 807, 809, 810, 811, 820, 829, 830, 831, 832, 833, 841, 842, 847, 848, 849, 850, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 880, 881, 882, 883, 884, 885, 887, 888, 889, 892, 893, 894, 898, 899, 900, 901, 904, 905, 909, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 929, 930, 932, 934, 935, 938, 939, 940, 941, 942, 944, 945, 946, 947, 950, 951, 952, 954, 956, 960, 961, 964], "excluded_lines": []}, "nemo/collections/asr/data/audio_to_text_lhotse.py": {"executed_lines": [15, 17, 18, 19, 21, 22, 23, 26, 27, 36, 37, 46, 51, 59, 60, 64, 73, 76, 80, 83], "summary": {"covered_lines": 18, "num_statements": 38, "percent_covered": 47.36842105263158, "percent_covered_display": "47", "missing_lines": 20, "excluded_lines": 0}, "missing_lines": [38, 47, 48, 49, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 71, 74, 77, 78, 81, 84], "excluded_lines": []}, "nemo/collections/asr/data/audio_to_text_lhotse_prompted.py": {"executed_lines": [14, 16, 17, 18, 19, 20, 21, 23, 24, 27, 28, 44, 57, 78, 81, 95, 96, 99, 107, 108, 165, 247, 248], "summary": {"covered_lines": 22, "num_statements": 99, "percent_covered": 22.22222222222222, "percent_covered_display": "22", "missing_lines": 77, "excluded_lines": 0}, "missing_lines": [50, 51, 52, 53, 54, 55, 58, 60, 62, 63, 64, 66, 67, 68, 69, 71, 72, 74, 100, 101, 104, 132, 135, 137, 138, 139, 140, 141, 144, 145, 146, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 174, 175, 176, 177, 179, 180, 181, 182, 183, 191, 194, 196, 198, 201, 202, 212, 213, 216, 217, 218, 219, 220, 222, 225, 226, 229, 230, 231, 232, 233, 235, 238, 239, 242, 243, 244], "excluded_lines": []}, "nemo/collections/asr/data/data_simulation.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1624, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1624, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 75, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 216, 218, 219, 220, 221, 223, 224, 225, 226, 227, 229, 233, 237, 239, 243, 247, 250, 253, 261, 262, 263, 265, 283, 284, 287, 289, 290, 291, 292, 294, 295, 296, 298, 299, 301, 302, 304, 305, 306, 308, 314, 316, 320, 321, 322, 326, 327, 331, 332, 336, 339, 340, 341, 343, 344, 348, 349, 351, 355, 356, 360, 361, 362, 363, 369, 370, 371, 373, 374, 375, 381, 382, 383, 385, 389, 390, 394, 395, 399, 401, 406, 408, 412, 414, 415, 417, 421, 422, 423, 424, 425, 427, 435, 436, 441, 443, 444, 445, 446, 448, 453, 454, 455, 458, 459, 461, 475, 476, 477, 478, 480, 482, 483, 484, 486, 487, 489, 490, 491, 492, 494, 495, 496, 498, 502, 503, 504, 505, 510, 516, 526, 527, 528, 530, 534, 536, 537, 538, 539, 540, 541, 542, 544, 555, 556, 557, 558, 559, 560, 562, 564, 567, 568, 570, 572, 582, 583, 585, 586, 587, 588, 589, 590, 592, 594, 596, 610, 611, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 627, 629, 636, 637, 638, 639, 640, 646, 672, 673, 675, 677, 678, 679, 680, 683, 685, 686, 687, 688, 689, 690, 691, 696, 699, 701, 703, 705, 706, 708, 709, 715, 716, 717, 718, 719, 720, 722, 724, 725, 726, 727, 730, 731, 732, 733, 734, 741, 746, 751, 754, 757, 765, 766, 767, 768, 769, 770, 772, 773, 775, 793, 802, 803, 804, 805, 808, 809, 816, 824, 835, 836, 838, 843, 844, 851, 859, 883, 885, 888, 891, 892, 893, 896, 897, 898, 899, 902, 903, 904, 905, 907, 908, 909, 912, 913, 914, 915, 917, 918, 919, 923, 924, 925, 927, 928, 930, 941, 949, 951, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 979, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1028, 1029, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1048, 1050, 1053, 1054, 1056, 1057, 1059, 1062, 1063, 1064, 1065, 1068, 1071, 1072, 1073, 1074, 1078, 1081, 1082, 1085, 1095, 1100, 1108, 1110, 1119, 1121, 1129, 1131, 1132, 1139, 1140, 1141, 1144, 1146, 1149, 1150, 1151, 1152, 1163, 1165, 1167, 1170, 1172, 1173, 1174, 1176, 1181, 1182, 1183, 1185, 1192, 1193, 1194, 1195, 1197, 1199, 1202, 1204, 1205, 1207, 1208, 1212, 1215, 1216, 1217, 1222, 1223, 1225, 1226, 1228, 1229, 1232, 1233, 1234, 1237, 1238, 1239, 1243, 1244, 1245, 1246, 1247, 1249, 1251, 1252, 1254, 1256, 1262, 1263, 1265, 1266, 1268, 1271, 1273, 1274, 1275, 1278, 1311, 1312, 1313, 1315, 1320, 1321, 1322, 1323, 1325, 1326, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1343, 1346, 1347, 1350, 1352, 1356, 1357, 1358, 1361, 1362, 1363, 1364, 1366, 1374, 1375, 1376, 1377, 1378, 1380, 1382, 1383, 1384, 1385, 1386, 1387, 1389, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1401, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1413, 1414, 1415, 1416, 1417, 1420, 1421, 1423, 1432, 1433, 1435, 1436, 1437, 1438, 1439, 1441, 1443, 1444, 1445, 1446, 1447, 1448, 1450, 1453, 1454, 1456, 1457, 1458, 1459, 1462, 1463, 1464, 1465, 1466, 1468, 1469, 1470, 1471, 1472, 1473, 1475, 1477, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1487, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1511, 1535, 1536, 1538, 1539, 1540, 1541, 1543, 1544, 1545, 1546, 1547, 1550, 1551, 1552, 1553, 1555, 1558, 1562, 1564, 1567, 1568, 1570, 1573, 1574, 1575, 1576, 1579, 1582, 1585, 1586, 1587, 1591, 1594, 1595, 1598, 1608, 1609, 1610, 1611, 1612, 1614, 1615, 1616, 1619, 1627, 1629, 1638, 1640, 1643, 1645, 1646, 1647, 1648, 1651, 1653, 1656, 1657, 1658, 1659, 1670, 1671, 1672, 1673, 1674, 1675, 1677, 1680, 1682, 1683, 1684, 1686, 1690, 1691, 1692, 1695, 1718, 1719, 1721, 1722, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1735, 1738, 1747, 1750, 1764, 1770, 1771, 1773, 1774, 1778, 1779, 1781, 1782, 1783, 1786, 1788, 1790, 1792, 1793, 1796, 1798, 1799, 1802, 1804, 1805, 1808, 1810, 1811, 1814, 1816, 1817, 1830, 1831, 1832, 1834, 1836, 1844, 1846, 1863, 1866, 1869, 1871, 1882, 1883, 1884, 1886, 1900, 1901, 1903, 1905, 1908, 1910, 1912, 1914, 1915, 1916, 1917, 1919, 1927, 1928, 1931, 1933, 1943, 1946, 1959, 1960, 1961, 1962, 1964, 1965, 1966, 1968, 1970, 1971, 1972, 1974, 1975, 1976, 1977, 1978, 1979, 1982, 1995, 1996, 1998, 1999, 2001, 2002, 2004, 2005, 2007, 2009, 2011, 2012, 2014, 2015, 2016, 2018, 2019, 2020, 2023, 2024, 2026, 2027, 2029, 2031, 2034, 2040, 2045, 2046, 2047, 2049, 2050, 2057, 2059, 2060, 2061, 2063, 2064, 2071, 2073, 2079, 2080, 2081, 2082, 2083, 2086, 2087, 2088, 2090, 2091, 2093, 2094, 2096, 2097, 2099, 2101, 2102, 2104, 2105, 2107, 2109, 2110, 2112, 2113, 2115, 2116, 2118, 2121, 2122, 2123, 2125, 2127, 2129, 2131, 2132, 2133, 2136, 2137, 2138, 2140, 2141, 2142, 2143, 2145, 2146, 2149, 2150, 2152, 2157, 2158, 2160, 2163, 2164, 2166, 2167, 2168, 2169, 2170, 2173, 2175, 2178, 2180, 2183, 2186, 2188, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2199, 2201, 2203, 2205, 2206, 2207, 2208, 2211, 2212, 2214, 2215, 2218, 2227, 2229, 2238, 2240, 2242, 2243, 2246, 2251, 2252, 2253, 2254, 2255, 2257, 2260, 2263, 2264, 2268, 2269, 2272, 2275, 2276, 2278, 2280, 2281, 2284, 2286, 2287, 2288, 2289, 2291, 2293, 2296, 2298, 2300, 2309, 2310, 2311, 2313, 2315, 2316, 2317, 2318, 2320, 2322, 2328, 2331, 2334, 2335, 2336, 2339, 2342, 2344, 2345, 2347, 2348, 2349, 2350, 2351, 2354, 2357, 2360, 2363, 2366, 2369, 2375, 2378, 2379, 2381, 2382, 2383, 2384, 2387, 2388, 2389, 2390, 2393, 2395, 2396, 2399, 2400, 2402, 2405, 2407, 2408, 2410, 2413, 2414, 2415, 2417, 2420, 2433, 2436, 2453, 2461, 2469, 2471, 2474, 2475, 2478, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2491, 2497, 2519, 2521, 2524, 2532, 2533, 2535, 2537, 2539, 2540, 2541, 2545, 2548, 2549, 2552, 2553, 2554, 2557, 2568, 2570, 2573, 2575, 2578, 2589, 2590, 2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598, 2599, 2600, 2601, 2603, 2606, 2615, 2616, 2618, 2620, 2621, 2622, 2623, 2624, 2625, 2627, 2630, 2637, 2640, 2641, 2642, 2643, 2646, 2647, 2648, 2649, 2652, 2654, 2655, 2656, 2657, 2660, 2661, 2662, 2663, 2666, 2668, 2669, 2670, 2671, 2672, 2674, 2675, 2676, 2677, 2678, 2680, 2681, 2682, 2683, 2684, 2686, 2687, 2688, 2689, 2690, 2692, 2693, 2694, 2695, 2696, 2698, 2699, 2700, 2701, 2702, 2704, 2705, 2706, 2707, 2708, 2710, 2711, 2712, 2713, 2714, 2716, 2717, 2718, 2719, 2721, 2723, 2724, 2725, 2726, 2729, 2759, 2767, 2768, 2769, 2771, 2772, 2775, 2776, 2777, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2789, 2791, 2793, 2795, 2796, 2803, 2805, 2806, 2807, 2809, 2810, 2817, 2819, 2825, 2826, 2827, 2828, 2829, 2832, 2833, 2834, 2839, 2840, 2841, 2845, 2846, 2848, 2850, 2851, 2853, 2856, 2857, 2858, 2863, 2864, 2865, 2867, 2868, 2869, 2870, 2871, 2872, 2875, 2876, 2879, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2892, 2919, 2922, 2924, 2927, 2930, 2932, 2933, 2934, 2936, 2937, 2938, 2940, 2942, 2945, 2947, 2949, 2952, 2953, 2954, 2956, 2957, 2959, 2962, 2963, 2964, 2965, 2967, 2968, 2969, 2970, 2971, 2972, 2975, 2977, 2979, 2980, 2981, 2984, 2987, 2990, 2991, 2992, 2995, 2996, 2997, 2998, 3000, 3017, 3019, 3032, 3034, 3037, 3038, 3040, 3046, 3049, 3052, 3053, 3054, 3056, 3059, 3062, 3063, 3066, 3067, 3070, 3071, 3074, 3075, 3076, 3077, 3079, 3080, 3082, 3083, 3086, 3089, 3099, 3101, 3103, 3124, 3126, 3127, 3129, 3132, 3134, 3135, 3136, 3137, 3138, 3140, 3143, 3145, 3147, 3150, 3152, 3154, 3161, 3164, 3167, 3168, 3169, 3172, 3175, 3177, 3178, 3180, 3181, 3182, 3183, 3184, 3186, 3187, 3190, 3192, 3193, 3194, 3197, 3200, 3208, 3211, 3218, 3219, 3227, 3228, 3230, 3231, 3232, 3233, 3234, 3242, 3243, 3244, 3245, 3248, 3250, 3251, 3254, 3255, 3256, 3257, 3259, 3262, 3264, 3265, 3267, 3270, 3271, 3272, 3274, 3277, 3290, 3291, 3293, 3294, 3295, 3296, 3297, 3298, 3301, 3303, 3306, 3324, 3326, 3327, 3328, 3331, 3332, 3335, 3338, 3341, 3343, 3346, 3357, 3358, 3361, 3383, 3384, 3385, 3386, 3388, 3389, 3391, 3392, 3393, 3396, 3397, 3399, 3401, 3402, 3403, 3405, 3406, 3411, 3412, 3414, 3417, 3439, 3440, 3443, 3446, 3448, 3449, 3452, 3478, 3479, 3481, 3483, 3485, 3487, 3488, 3490, 3491, 3493, 3495, 3497, 3498, 3499, 3502, 3503, 3510, 3511, 3512, 3516, 3518, 3519, 3520, 3521, 3524, 3526, 3530, 3533, 3539, 3540, 3544, 3546, 3548, 3549, 3551, 3552, 3553, 3556, 3557, 3559, 3561, 3563, 3564, 3565, 3568, 3570, 3572, 3573, 3576, 3577, 3582, 3584, 3587, 3588, 3590, 3591, 3592, 3595, 3597, 3601, 3603, 3604, 3606, 3609, 3612, 3613, 3614, 3616, 3617, 3620, 3623, 3624, 3626, 3628, 3630, 3631, 3633, 3634, 3635, 3636, 3638, 3639, 3641, 3643, 3646, 3655, 3656, 3657, 3662, 3697, 3711, 3712, 3713, 3716, 3718, 3723, 3724, 3725, 3726, 3727, 3729, 3741, 3742, 3744, 3746, 3748, 3749, 3751, 3754, 3760, 3767, 3770, 3777, 3780, 3781, 3782, 3785, 3793, 3796, 3797, 3800, 3801, 3802, 3804, 3811, 3813, 3820, 3822, 3825, 3827, 3828, 3836, 3838, 3839, 3847, 3850, 3851, 3852, 3853, 3855, 3856, 3857, 3859, 3866, 3875, 3877, 3879, 3881, 3883, 3894, 3895, 3897, 3900, 3916, 3919, 3928, 3929, 3932, 3939, 3942, 3943, 3944, 3945, 3948, 3949, 3952, 3953, 3956, 3958, 3959, 3960, 3961, 3964, 3965, 3968, 3969, 3971, 3972, 3975, 3977, 3978, 3979, 3980, 3981, 3983, 3984, 3985, 3986, 3987, 3989, 3990, 3991, 3992, 3993, 3995, 3996, 3997, 3998, 3999, 4001, 4002, 4003, 4004, 4005, 4007, 4008, 4009, 4010, 4011, 4013, 4014, 4015, 4016, 4017, 4018, 4020, 4021, 4022, 4023, 4024, 4025, 4027, 4028, 4029, 4030, 4032, 4034, 4035, 4036, 4037], "excluded_lines": []}, "nemo/collections/asr/data/feature_to_label.py": {"executed_lines": [14, 16, 18, 19, 20, 21, 22, 25, 59, 113, 163, 164, 179, 180, 205, 223, 226, 238, 239, 256, 260, 261, 281, 282, 284, 285, 297, 353, 356, 367, 370, 376, 377, 396, 398, 399, 411, 462, 471, 482, 485, 496], "summary": {"covered_lines": 38, "num_statements": 234, "percent_covered": 16.23931623931624, "percent_covered_display": "16", "missing_lines": 196, "excluded_lines": 0}, "missing_lines": [31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 55, 56, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 82, 83, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 106, 107, 109, 110, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 156, 158, 159, 160, 184, 189, 190, 199, 203, 208, 209, 211, 212, 213, 215, 216, 217, 218, 220, 221, 224, 227, 229, 230, 232, 233, 235, 257, 288, 295, 311, 312, 313, 314, 316, 317, 319, 327, 328, 330, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 354, 357, 359, 360, 362, 363, 365, 368, 371, 402, 409, 424, 425, 426, 428, 429, 431, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 459, 460, 463, 464, 465, 466, 467, 468, 469, 472, 474, 475, 476, 478, 479, 480, 483, 486, 488, 489, 491, 492, 494, 497], "excluded_lines": []}, "nemo/collections/asr/data/feature_to_label_dataset.py": {"executed_lines": [14, 16, 19, 36, 54], "summary": {"covered_lines": 5, "num_statements": 11, "percent_covered": 45.45454545454545, "percent_covered_display": "45", "missing_lines": 6, "excluded_lines": 0}, "missing_lines": [30, 33, 39, 51, 57, 68], "excluded_lines": []}, "nemo/collections/asr/data/feature_to_text.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 147, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 147, "excluded_lines": 0}, "missing_lines": [15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 43, 44, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 76, 79, 112, 113, 114, 116, 117, 120, 128, 151, 152, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 168, 170, 171, 173, 175, 185, 186, 187, 188, 190, 191, 193, 194, 195, 197, 198, 200, 202, 204, 207, 208, 209, 210, 212, 213, 215, 217, 219, 220, 222, 223, 225, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 241, 244, 245, 248, 249, 251, 252, 253, 254, 256, 257, 259, 260, 264, 269, 270, 271, 274, 313, 339, 341, 345, 369, 413, 434, 435, 437, 439, 440, 442, 444, 445, 447, 449, 450, 451, 452, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 467], "excluded_lines": []}, "nemo/collections/asr/data/feature_to_text_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 11, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 11, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 21, 32, 33, 35, 57, 60, 74, 94], "excluded_lines": []}, "nemo/collections/asr/data/huggingface/__init__.py": {"executed_lines": [1], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/data/huggingface/hf_audio_to_text.py": {"executed_lines": [15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 48, 64, 91, 107, 108, 130, 182, 185, 214, 218, 219, 223, 224, 235, 288, 289, 293, 294, 305, 379, 380, 406, 472, 477, 480, 493, 524, 525, 529, 530, 541, 602, 603, 607, 608, 619], "summary": {"covered_lines": 46, "num_statements": 227, "percent_covered": 20.26431718061674, "percent_covered_display": "20", "missing_lines": 181, "excluded_lines": 0}, "missing_lines": [57, 58, 59, 60, 61, 62, 66, 67, 69, 71, 72, 73, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 97, 98, 99, 100, 103, 104, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 180, 183, 186, 188, 189, 190, 199, 200, 201, 203, 204, 206, 207, 208, 210, 212, 215, 227, 260, 262, 266, 297, 324, 325, 327, 329, 330, 332, 334, 335, 337, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 357, 431, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 454, 455, 459, 460, 461, 463, 464, 466, 467, 469, 470, 473, 478, 481, 482, 483, 484, 485, 486, 487, 489, 491, 494, 495, 496, 505, 506, 507, 509, 510, 512, 519, 520, 521, 533, 570, 572, 576, 611, 643, 644, 646, 648, 649, 651, 653, 654, 656, 658, 659, 660, 661, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 676], "excluded_lines": []}, "nemo/collections/asr/data/huggingface/hf_audio_to_text_dataset.py": {"executed_lines": [15, 17, 25, 74], "summary": {"covered_lines": 4, "num_statements": 12, "percent_covered": 33.333333333333336, "percent_covered_display": "33", "missing_lines": 8, "excluded_lines": 0}, "missing_lines": [28, 29, 52, 71, 77, 78, 107, 132], "excluded_lines": []}, "nemo/collections/asr/data/text_to_text.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 209, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 209, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 58, 59, 60, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 86, 87, 89, 91, 93, 95, 101, 102, 104, 107, 108, 110, 115, 119, 130, 136, 137, 138, 139, 140, 141, 144, 150, 153, 157, 158, 159, 160, 163, 169, 170, 171, 172, 173, 175, 191, 193, 194, 196, 197, 199, 200, 202, 204, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 257, 258, 260, 262, 264, 265, 266, 267, 270, 271, 272, 274, 276, 278, 279, 281, 282, 286, 289, 292, 295, 296, 297, 299, 305, 308, 310, 311, 313, 314, 318, 324, 326, 328, 333, 335, 337, 341, 344, 346, 347, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 371, 372, 375, 378, 392, 407, 414, 419, 425, 441, 457, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 473, 480], "excluded_lines": []}, "nemo/collections/asr/losses/__init__.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 21, 22], "summary": {"covered_lines": 8, "num_statements": 8, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/losses/angularloss.py": {"executed_lines": [16, 18, 19, 21, 24, 25, 33, 34, 42, 43, 50, 57, 58], "summary": {"covered_lines": 12, "num_statements": 23, "percent_covered": 52.17391304347826, "percent_covered_display": "52", "missing_lines": 11, "excluded_lines": 0}, "missing_lines": [37, 48, 51, 53, 54, 55, 59, 63, 66, 67, 68], "excluded_lines": []}, "nemo/collections/asr/losses/audio_losses.py": {"executed_lines": [15, 16, 18, 19, 21, 22, 23, 24, 25, 27, 30, 71, 118, 215, 291, 292, 304, 347, 348, 359, 360, 367, 368], "summary": {"covered_lines": 22, "num_statements": 127, "percent_covered": 17.322834645669293, "percent_covered_display": "17", "missing_lines": 105, "excluded_lines": 0}, "missing_lines": [50, 51, 52, 56, 58, 60, 63, 64, 65, 66, 68, 97, 98, 99, 104, 106, 107, 108, 109, 112, 113, 115, 151, 152, 153, 157, 158, 165, 168, 169, 170, 173, 174, 175, 177, 179, 180, 183, 185, 188, 189, 192, 193, 196, 199, 202, 203, 206, 209, 210, 212, 250, 251, 253, 257, 258, 259, 264, 266, 267, 268, 270, 271, 272, 273, 277, 279, 280, 282, 283, 285, 286, 288, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 333, 336, 337, 340, 341, 342, 343, 344, 345, 351, 352, 365, 388, 402, 403, 406, 407, 410, 412], "excluded_lines": []}, "nemo/collections/asr/losses/bce_loss.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 23, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 23, "excluded_lines": 0}, "missing_lines": [16, 18, 19, 21, 24, 29, 30, 33, 39, 40, 44, 46, 47, 48, 49, 50, 52, 53, 69, 70, 71, 72, 73], "excluded_lines": []}, "nemo/collections/asr/losses/ctc.py": {"executed_lines": [16, 17, 19, 20, 22, 25, 26, 27, 37, 38, 45, 60, 68, 69], "summary": {"covered_lines": 14, "num_statements": 40, "percent_covered": 35.0, "percent_covered_display": "35", "missing_lines": 26, "excluded_lines": 0}, "missing_lines": [30, 43, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 66, 72, 73, 74, 76, 77, 80, 81, 82], "excluded_lines": []}, "nemo/collections/asr/losses/lattice_losses.py": {"executed_lines": [16, 18, 19, 21, 22, 25, 26, 67, 68, 78, 79, 86, 142, 148, 149], "summary": {"covered_lines": 14, "num_statements": 73, "percent_covered": 19.17808219178082, "percent_covered_display": "19", "missing_lines": 59, "excluded_lines": 0}, "missing_lines": [71, 84, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120, 122, 124, 127, 128, 130, 132, 133, 134, 136, 138, 140, 145, 146, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 174, 175, 176, 178, 181, 183, 184], "excluded_lines": []}, "nemo/collections/asr/losses/rnnt.py": {"executed_lines": [30, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 53, 54, 56, 60, 61, 65, 66, 68, 77, 78, 79, 80, 81, 82, 83, 84, 88, 158, 161, 170, 202, 206, 333, 334, 335, 345, 346, 353, 422, 439, 440], "summary": {"covered_lines": 48, "num_statements": 185, "percent_covered": 25.945945945945947, "percent_covered_display": "26", "missing_lines": 137, "excluded_lines": 0}, "missing_lines": [49, 57, 58, 62, 64, 162, 163, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 203, 207, 209, 210, 214, 216, 219, 220, 226, 229, 230, 234, 235, 241, 244, 246, 247, 250, 251, 253, 256, 257, 258, 260, 262, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 277, 278, 286, 288, 289, 290, 291, 294, 296, 297, 298, 299, 300, 301, 302, 311, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 326, 330, 338, 351, 411, 413, 414, 416, 417, 418, 419, 420, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 437, 442, 443, 444, 446, 447, 450, 452, 453, 455, 456, 457, 463, 466, 467, 468, 475, 476, 480, 481, 483, 484, 487, 488, 491, 494, 497, 498, 501, 508], "excluded_lines": []}, "nemo/collections/asr/losses/rnnt_pytorch.py": {"executed_lines": [16, 18, 20, 21, 24, 25, 26, 36, 37, 44, 49, 69, 122, 123, 127, 128, 138, 139, 146, 154, 176, 180, 252, 253, 257, 258, 268, 269, 276, 283, 299], "summary": {"covered_lines": 29, "num_statements": 173, "percent_covered": 16.76300578034682, "percent_covered_display": "17", "missing_lines": 144, "excluded_lines": 0}, "missing_lines": [29, 42, 45, 46, 47, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 75, 76, 77, 78, 80, 84, 86, 89, 92, 97, 110, 111, 113, 116, 117, 119, 131, 144, 147, 148, 149, 150, 151, 152, 155, 156, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 177, 178, 184, 186, 187, 188, 189, 190, 191, 192, 194, 197, 198, 199, 202, 207, 211, 212, 213, 214, 215, 220, 223, 228, 230, 231, 232, 235, 236, 237, 243, 245, 247, 249, 261, 274, 277, 278, 279, 280, 281, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 300, 302, 303, 304, 305, 306, 308, 312, 313, 314, 315, 316, 321, 324, 327, 334, 348, 349, 350, 351, 355, 356, 359, 363, 364, 365, 369, 371, 372, 374], "excluded_lines": []}, "nemo/collections/asr/losses/ssl_losses/__init__.py": {"executed_lines": [15], "summary": {"covered_lines": 1, "num_statements": 1, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/losses/ssl_losses/contrastive.py": {"executed_lines": [15, 16, 17, 19, 20, 22, 25, 26, 27, 37, 38, 45, 46, 49, 135, 148, 149, 279, 295], "summary": {"covered_lines": 19, "num_statements": 123, "percent_covered": 15.447154471544716, "percent_covered_display": "15", "missing_lines": 104, "excluded_lines": 0}, "missing_lines": [30, 43, 47, 101, 102, 103, 104, 105, 106, 107, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 132, 133, 138, 139, 141, 142, 143, 146, 150, 151, 152, 155, 156, 158, 159, 161, 163, 165, 166, 167, 168, 169, 171, 172, 175, 178, 180, 182, 183, 184, 185, 186, 187, 188, 194, 195, 198, 200, 205, 208, 209, 210, 215, 216, 217, 222, 223, 224, 226, 228, 230, 233, 234, 236, 238, 239, 241, 246, 250, 255, 260, 263, 265, 267, 268, 269, 271, 272, 274, 275, 277, 280, 282, 284, 286, 290, 291, 292, 293, 296, 297], "excluded_lines": []}, "nemo/collections/asr/losses/ssl_losses/ctc.py": {"executed_lines": [15, 16, 17, 19, 22, 23, 24, 35, 36, 43, 44, 47, 51, 52], "summary": {"covered_lines": 14, "num_statements": 21, "percent_covered": 66.66666666666667, "percent_covered_display": "67", "missing_lines": 7, "excluded_lines": 0}, "missing_lines": [27, 41, 45, 48, 49, 53, 57], "excluded_lines": []}, "nemo/collections/asr/losses/ssl_losses/mlm.py": {"executed_lines": [15, 16, 17, 19, 20, 22, 25, 26, 27, 38, 39, 46, 47, 50, 58, 59], "summary": {"covered_lines": 16, "num_statements": 32, "percent_covered": 50.0, "percent_covered_display": "50", "missing_lines": 16, "excluded_lines": 0}, "missing_lines": [30, 44, 48, 53, 54, 55, 56, 62, 65, 66, 68, 69, 70, 72, 73, 75], "excluded_lines": []}, "nemo/collections/asr/losses/ssl_losses/rnnt.py": {"executed_lines": [15, 16, 17, 19, 22, 23, 24, 35, 36, 43, 44, 47, 51, 52], "summary": {"covered_lines": 14, "num_statements": 21, "percent_covered": 66.66666666666667, "percent_covered_display": "67", "missing_lines": 7, "excluded_lines": 0}, "missing_lines": [27, 41, 45, 48, 49, 54, 58], "excluded_lines": []}, "nemo/collections/asr/metrics/__init__.py": {"executed_lines": [15, 16], "summary": {"covered_lines": 2, "num_statements": 2, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/metrics/audio.py": {"executed_lines": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 40, 41, 59, 61, 79, 95, 96, 116, 117, 129, 147, 152, 179, 184, 192], "summary": {"covered_lines": 25, "num_statements": 59, "percent_covered": 42.3728813559322, "percent_covered_display": "42", "missing_lines": 34, "excluded_lines": 0}, "missing_lines": [64, 65, 66, 68, 69, 75, 76, 77, 90, 91, 93, 110, 111, 112, 114, 127, 138, 140, 141, 144, 145, 150, 167, 169, 170, 173, 174, 175, 177, 182, 187, 188, 190, 195], "excluded_lines": []}, "nemo/collections/asr/metrics/bleu.py": {"executed_lines": [15, 17, 18, 19, 21, 22, 23, 24, 26, 29, 35, 36, 80, 82, 130, 179, 207], "summary": {"covered_lines": 16, "num_statements": 58, "percent_covered": 27.586206896551722, "percent_covered_display": "28", "missing_lines": 42, "excluded_lines": 0}, "missing_lines": [30, 31, 94, 102, 103, 104, 105, 106, 109, 110, 115, 116, 117, 124, 126, 127, 128, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 177, 193, 194, 195, 202, 210], "excluded_lines": []}, "nemo/collections/asr/metrics/der.py": {"executed_lines": [15, 16, 17, 19, 20, 21, 22, 24, 25, 27, 29, 37, 74, 114, 132, 191, 239, 290, 390], "summary": {"covered_lines": 19, "num_statements": 125, "percent_covered": 15.2, "percent_covered_display": "15", "missing_lines": 106, "excluded_lines": 0}, "missing_lines": [50, 51, 54, 55, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 99, 105, 106, 107, 108, 109, 110, 111, 121, 122, 123, 124, 125, 126, 127, 129, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 183, 184, 185, 188, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 228, 229, 236, 266, 267, 270, 271, 272, 275, 276, 277, 280, 281, 284, 285, 286, 287, 356, 357, 359, 361, 363, 367, 368, 369, 370, 374, 375, 378, 379, 382, 385, 387, 415, 416, 421, 422, 423, 424, 425, 426, 427], "excluded_lines": []}, "nemo/collections/asr/metrics/multi_binary_acc.py": {"executed_lines": [15, 17, 18, 20, 23, 24, 72, 74, 82, 102], "summary": {"covered_lines": 9, "num_statements": 37, "percent_covered": 24.324324324324323, "percent_covered_display": "24", "missing_lines": 28, "excluded_lines": 0}, "missing_lines": [75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 106, 107, 108, 109, 110, 111, 112], "excluded_lines": []}, "nemo/collections/asr/metrics/wer.py": {"executed_lines": [15, 17, 18, 19, 20, 22, 23, 24, 25, 27, 30, 35, 76, 148, 210, 211, 247, 249, 292, 352], "summary": {"covered_lines": 19, "num_statements": 149, "percent_covered": 12.751677852348994, "percent_covered_display": "13", "missing_lines": 130, "excluded_lines": 0}, "missing_lines": [31, 32, 50, 51, 52, 53, 58, 59, 60, 61, 63, 64, 65, 68, 69, 70, 72, 73, 97, 98, 99, 101, 102, 108, 109, 110, 111, 113, 114, 117, 118, 119, 120, 122, 124, 125, 127, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 143, 145, 164, 165, 166, 168, 169, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 189, 190, 191, 193, 194, 196, 197, 199, 200, 202, 203, 205, 207, 258, 260, 261, 262, 263, 264, 266, 267, 268, 269, 272, 273, 278, 279, 280, 287, 289, 290, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 324, 325, 326, 327, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 345, 347, 349, 350, 353, 354, 355], "excluded_lines": []}, "nemo/collections/asr/models/__init__.py": {"executed_lines": [15, 16, 17, 18, 23, 24, 25, 26, 27, 28, 29, 35, 36, 37, 38, 39, 40, 41], "summary": {"covered_lines": 18, "num_statements": 18, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/models/aed_multitask_models.py": {"executed_lines": [15, 16, 17, 18, 20, 21, 22, 23, 25, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 60, 63, 69, 86, 87, 88, 92, 93, 96, 97, 98, 102, 103, 104, 105, 106, 107, 109, 113, 120, 121, 123, 224, 255, 387, 388, 449, 465, 491, 507, 523, 524, 541, 542, 550, 551, 615, 640, 684, 692, 700, 704, 706, 742, 777, 803, 850, 883, 894, 938, 939, 948], "summary": {"covered_lines": 75, "num_statements": 385, "percent_covered": 19.48051948051948, "percent_covered_display": "19", "missing_lines": 310, "excluded_lines": 0}, "missing_lines": [64, 65, 66, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 114, 115, 116, 117, 126, 127, 128, 130, 131, 132, 134, 137, 139, 142, 143, 144, 145, 147, 149, 152, 153, 154, 156, 159, 160, 162, 165, 168, 169, 170, 172, 175, 176, 178, 181, 182, 185, 186, 187, 190, 193, 194, 195, 196, 198, 206, 207, 209, 211, 212, 214, 216, 219, 220, 232, 234, 235, 238, 239, 240, 242, 250, 251, 253, 276, 277, 278, 279, 281, 283, 287, 289, 290, 292, 293, 297, 298, 300, 302, 303, 306, 309, 312, 314, 317, 318, 319, 321, 322, 325, 326, 327, 328, 330, 336, 339, 340, 342, 343, 346, 347, 350, 351, 354, 356, 359, 360, 361, 363, 364, 371, 372, 375, 376, 378, 379, 382, 383, 385, 426, 427, 440, 441, 445, 447, 450, 454, 468, 469, 475, 480, 481, 485, 486, 500, 501, 504, 505, 516, 517, 520, 521, 525, 526, 528, 529, 543, 580, 581, 582, 583, 588, 589, 593, 594, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 610, 612, 617, 618, 621, 622, 624, 631, 633, 638, 642, 643, 645, 652, 653, 654, 658, 666, 667, 668, 670, 678, 679, 680, 682, 685, 686, 687, 689, 690, 693, 694, 695, 697, 698, 701, 702, 714, 717, 719, 720, 721, 723, 724, 725, 726, 728, 729, 730, 734, 735, 736, 737, 739, 740, 757, 758, 760, 764, 766, 768, 770, 771, 773, 775, 790, 793, 794, 801, 817, 818, 819, 820, 821, 823, 825, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 846, 847, 848, 864, 865, 880, 881, 890, 892, 906, 907, 908, 910, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 946, 949, 951, 952, 953, 954, 955, 956, 957, 959, 968, 975, 976], "excluded_lines": []}, "nemo/collections/asr/models/asr_model.py": {"executed_lines": [14, 15, 16, 18, 20, 21, 22, 23, 24, 25, 26, 28, 31, 32, 60, 88, 89, 99, 137, 149, 175, 176, 182, 183, 186, 187, 190, 191, 200, 240, 241, 244, 245, 248], "summary": {"covered_lines": 33, "num_statements": 138, "percent_covered": 23.91304347826087, "percent_covered_display": "24", "missing_lines": 105, "excluded_lines": 0}, "missing_lines": [33, 34, 36, 37, 38, 40, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 56, 58, 61, 62, 64, 65, 66, 68, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 84, 86, 96, 97, 111, 112, 113, 115, 117, 118, 119, 120, 123, 124, 125, 126, 128, 129, 131, 132, 135, 145, 146, 147, 153, 155, 156, 157, 160, 161, 162, 163, 164, 165, 167, 168, 170, 171, 172, 184, 188, 192, 193, 194, 195, 196, 197, 198, 218, 219, 220, 221, 222, 224, 232, 233, 234, 235, 236, 237, 238, 242, 246, 249, 250, 251, 252, 253, 254], "excluded_lines": []}, "nemo/collections/asr/models/audio_to_audio_model.py": {"executed_lines": [15, 16, 18, 19, 20, 21, 23, 24, 25, 27, 30, 31, 36, 41, 51, 111, 112, 115, 119, 123, 131, 139, 155, 158, 161, 162, 179, 180, 190, 202], "summary": {"covered_lines": 30, "num_statements": 113, "percent_covered": 26.548672566371682, "percent_covered_display": "27", "missing_lines": 83, "excluded_lines": 0}, "missing_lines": [32, 34, 39, 42, 43, 44, 45, 47, 49, 61, 62, 64, 65, 67, 68, 70, 72, 73, 75, 77, 78, 80, 81, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 104, 105, 107, 113, 116, 117, 120, 121, 124, 125, 126, 128, 129, 132, 133, 134, 136, 137, 141, 142, 145, 146, 148, 149, 151, 153, 156, 159, 177, 187, 188, 198, 199, 200, 206, 208, 209, 210, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225], "excluded_lines": []}, "nemo/collections/asr/models/classification_models.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 46, 47, 48, 49, 51, 54, 55, 56, 57, 59, 62, 63, 65, 98, 99, 107, 108, 115, 116, 123, 124, 132, 133, 141, 142, 154, 155, 156, 159, 186, 211, 220, 232, 236, 318, 355, 356, 398, 400, 412, 417, 448, 470, 471, 474, 475, 484, 485, 487, 494, 497, 500, 503, 506, 509, 510, 583, 584, 588, 608, 626, 644, 660, 676, 677, 688, 739, 757, 758, 763, 764, 774, 779, 782, 785, 788, 791, 795, 796, 799, 800, 805, 823, 832, 837, 848, 859, 860, 888, 900, 901, 902, 905, 913, 914, 924, 928, 938, 978, 1007, 1011, 1012, 1041, 1065, 1089, 1118, 1121, 1124, 1188, 1210], "summary": {"covered_lines": 133, "num_statements": 629, "percent_covered": 21.144674085850557, "percent_covered_display": "21", "missing_lines": 496, "excluded_lines": 0}, "missing_lines": [68, 69, 70, 73, 76, 78, 80, 81, 83, 84, 86, 87, 88, 90, 92, 93, 94, 95, 96, 105, 113, 121, 130, 139, 143, 144, 146, 147, 157, 162, 163, 164, 165, 170, 171, 175, 176, 180, 181, 182, 183, 184, 187, 188, 190, 192, 197, 205, 206, 212, 213, 216, 218, 221, 222, 225, 227, 228, 230, 233, 234, 238, 239, 240, 242, 243, 245, 247, 250, 253, 254, 257, 261, 263, 264, 265, 267, 268, 275, 276, 277, 278, 279, 281, 284, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 306, 308, 323, 324, 325, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 341, 342, 343, 345, 379, 380, 382, 383, 384, 386, 388, 391, 394, 396, 403, 404, 405, 406, 407, 409, 410, 413, 414, 415, 420, 421, 423, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 439, 440, 442, 444, 446, 458, 467, 468, 472, 481, 489, 490, 492, 495, 498, 501, 504, 507, 517, 519, 524, 526, 531, 533, 538, 540, 545, 547, 552, 554, 559, 561, 566, 568, 573, 575, 580, 581, 585, 589, 590, 591, 593, 594, 595, 597, 598, 599, 601, 602, 604, 609, 610, 611, 612, 613, 614, 620, 621, 623, 624, 627, 628, 629, 630, 631, 632, 638, 639, 641, 642, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 658, 661, 662, 663, 665, 666, 667, 668, 670, 671, 672, 674, 680, 686, 704, 705, 707, 708, 712, 713, 716, 718, 719, 720, 721, 722, 724, 725, 726, 728, 729, 731, 732, 734, 735, 737, 747, 749, 750, 752, 754, 770, 772, 775, 776, 777, 780, 783, 786, 789, 792, 793, 797, 801, 802, 806, 807, 808, 809, 810, 812, 821, 824, 825, 826, 827, 828, 830, 833, 835, 838, 839, 840, 841, 842, 844, 846, 849, 850, 851, 852, 853, 855, 857, 876, 877, 879, 880, 883, 885, 886, 890, 892, 893, 895, 897, 903, 906, 907, 908, 909, 910, 911, 915, 916, 921, 922, 925, 926, 929, 930, 931, 932, 933, 935, 936, 939, 940, 941, 942, 944, 945, 948, 953, 954, 957, 958, 959, 961, 963, 964, 965, 966, 968, 983, 984, 985, 987, 988, 990, 991, 992, 993, 995, 997, 1008, 1009, 1015, 1016, 1017, 1018, 1023, 1024, 1029, 1030, 1034, 1035, 1036, 1037, 1038, 1042, 1043, 1044, 1045, 1047, 1049, 1055, 1056, 1057, 1058, 1060, 1061, 1063, 1066, 1067, 1068, 1069, 1071, 1073, 1075, 1076, 1078, 1079, 1081, 1090, 1091, 1092, 1094, 1095, 1096, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1107, 1112, 1113, 1115, 1116, 1119, 1122, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1177, 1178, 1179, 1180, 1182, 1183, 1185, 1186, 1199, 1200, 1201, 1202, 1203, 1205, 1206, 1208, 1228, 1229, 1230, 1231, 1232, 1234, 1242, 1243, 1244, 1245, 1246, 1247, 1248], "excluded_lines": []}, "nemo/collections/asr/models/clustering_diarizer.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 43, 49, 50, 52, 53, 62, 64, 65, 66, 69, 75, 76, 83, 109, 110, 113, 135, 168, 182, 193, 284, 298, 338, 391, 398, 476, 477, 481, 482, 508, 509, 517, 518, 557, 558], "summary": {"covered_lines": 51, "num_statements": 288, "percent_covered": 17.708333333333332, "percent_covered_display": "18", "missing_lines": 237, "excluded_lines": 0}, "missing_lines": [54, 55, 57, 58, 59, 71, 72, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 99, 102, 103, 104, 107, 111, 117, 118, 119, 120, 122, 123, 126, 127, 128, 131, 132, 133, 139, 140, 142, 143, 144, 145, 146, 147, 150, 152, 153, 156, 157, 158, 162, 169, 180, 183, 191, 203, 204, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 245, 246, 250, 251, 259, 260, 262, 264, 265, 273, 274, 275, 276, 277, 279, 281, 282, 286, 287, 290, 296, 303, 304, 305, 306, 308, 309, 310, 311, 318, 320, 324, 325, 327, 328, 329, 330, 331, 333, 336, 343, 344, 345, 346, 347, 349, 350, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 406, 408, 410, 411, 412, 413, 415, 416, 418, 419, 421, 422, 424, 425, 426, 427, 429, 431, 433, 434, 437, 440, 441, 444, 447, 449, 451, 456, 464, 467, 478, 479, 497, 498, 499, 501, 502, 503, 504, 505, 506, 510, 511, 512, 513, 514, 515, 527, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 541, 546, 547, 548, 549, 551, 553, 555, 559], "excluded_lines": []}, "nemo/collections/asr/models/confidence_ensemble.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 138, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 138, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 32, 33, 34, 35, 40, 41, 42, 43, 44, 45, 47, 55, 56, 57, 58, 60, 61, 70, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 112, 114, 117, 135, 136, 137, 138, 139, 140, 142, 143, 144, 146, 148, 151, 161, 164, 176, 177, 178, 179, 180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 198, 205, 206, 207, 210, 211, 215, 216, 217, 218, 219, 221, 222, 224, 226, 227, 228, 230, 235, 236, 238, 240, 241, 243, 247, 248, 252, 258, 259, 260, 261, 262, 264, 266, 267, 287, 288, 291, 292, 293, 294, 304, 305, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 320, 322, 323], "excluded_lines": []}, "nemo/collections/asr/models/configs/__init__.py": {"executed_lines": [15, 21, 26, 27, 32, 37, 43], "summary": {"covered_lines": 7, "num_statements": 7, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/models/configs/aligner_config.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 21, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 21, "excluded_lines": 0}, "missing_lines": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44], "excluded_lines": []}, "nemo/collections/asr/models/configs/asr_models_config.py": {"executed_lines": [15, 16, 18, 20, 21, 25, 26, 27, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 67, 68, 70, 71, 72, 73, 74, 77, 78, 81, 84, 89, 92, 95, 96, 97, 100, 101, 102, 105, 106, 107, 108, 110, 111, 113, 115, 116, 118, 119], "summary": {"covered_lines": 67, "num_statements": 67, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/models/configs/classification_models_config.py": {"executed_lines": [15, 16, 18, 20, 21, 26, 27, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 58, 59, 60, 63, 64, 66, 67, 68, 69, 70, 71, 72, 75, 80, 83, 88, 93, 94, 97, 101, 102, 104, 109, 110, 111], "summary": {"covered_lines": 52, "num_statements": 54, "percent_covered": 96.29629629629629, "percent_covered_display": "96", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [105, 106], "excluded_lines": []}, "nemo/collections/asr/models/configs/diarizer_config.py": {"executed_lines": [15, 16, 19, 20, 21, 23, 26, 30, 34, 35, 36, 37, 38, 39, 42, 43, 45, 47, 49, 51, 54, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 111, 113, 115, 117, 120, 121, 123, 124, 127, 128, 130, 132, 134, 136, 138, 140, 143, 144, 145, 148, 149, 151, 153, 155, 157, 159, 161, 163, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197], "summary": {"covered_lines": 112, "num_statements": 117, "percent_covered": 95.72649572649573, "percent_covered_display": "96", "missing_lines": 5, "excluded_lines": 0}, "missing_lines": [24, 27, 28, 31, 198], "excluded_lines": []}, "nemo/collections/asr/models/configs/k2_sequence_models_config.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 18, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 18, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 37, 38, 39], "excluded_lines": []}, "nemo/collections/asr/models/configs/matchboxnet_config.py": {"executed_lines": [15, 16, 18, 20, 21, 26, 31, 35, 65, 98, 99, 101, 102, 103, 104, 105, 106, 107, 110, 115, 118, 123, 128, 131, 136, 140, 141, 144, 145, 146, 147, 149, 152, 153, 155, 190, 193, 196, 199, 202, 205, 208, 223, 260], "summary": {"covered_lines": 44, "num_statements": 90, "percent_covered": 48.888888888888886, "percent_covered_display": "49", "missing_lines": 46, "excluded_lines": 0}, "missing_lines": [36, 62, 66, 92, 156, 157, 159, 161, 162, 163, 165, 172, 173, 174, 176, 185, 187, 188, 191, 194, 197, 200, 203, 206, 209, 225, 226, 227, 228, 231, 234, 235, 236, 237, 238, 241, 242, 245, 246, 249, 250, 253, 254, 257, 258, 261], "excluded_lines": []}, "nemo/collections/asr/models/configs/quartznet_config.py": {"executed_lines": [15, 16, 18, 20, 21, 25, 26, 30, 108, 167, 168, 170, 171, 172, 173, 174, 177, 180, 183, 188, 193, 196, 199, 200, 203, 204, 205, 208, 209, 211, 250, 253, 256, 259, 262, 265, 282, 315], "summary": {"covered_lines": 38, "num_statements": 85, "percent_covered": 44.705882352941174, "percent_covered_display": "45", "missing_lines": 47, "excluded_lines": 0}, "missing_lines": [31, 105, 109, 163, 212, 213, 215, 217, 218, 219, 221, 229, 230, 231, 233, 242, 244, 245, 247, 248, 251, 254, 257, 260, 263, 266, 267, 268, 284, 285, 286, 287, 290, 293, 294, 295, 296, 297, 300, 301, 304, 305, 308, 309, 312, 313, 316], "excluded_lines": []}, "nemo/collections/asr/models/ctc_bpe_models.py": {"executed_lines": [15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 39, 40, 42, 96, 159, 202, 309, 344, 345], "summary": {"covered_lines": 27, "num_statements": 220, "percent_covered": 12.272727272727273, "percent_covered_display": "12", "missing_lines": 193, "excluded_lines": 0}, "missing_lines": [44, 45, 47, 48, 51, 54, 57, 59, 60, 62, 65, 67, 68, 73, 75, 78, 81, 82, 83, 84, 86, 89, 97, 98, 105, 114, 115, 117, 119, 121, 122, 123, 125, 126, 127, 129, 132, 134, 135, 136, 137, 142, 143, 144, 145, 147, 178, 179, 180, 182, 183, 185, 196, 197, 199, 200, 224, 225, 226, 228, 232, 234, 235, 237, 238, 243, 244, 246, 249, 252, 255, 257, 258, 260, 262, 265, 271, 273, 274, 275, 276, 282, 284, 287, 288, 289, 291, 293, 301, 302, 304, 305, 307, 317, 319, 320, 323, 324, 325, 327, 329, 336, 339, 340, 342, 352, 354, 359, 361, 366, 368, 373, 375, 380, 382, 387, 389, 395, 397, 403, 405, 410, 412, 417, 419, 424, 426, 432, 434, 439, 441, 446, 448, 453, 455, 460, 462, 467, 469, 474, 476, 481, 483, 488, 490, 495, 497, 502, 504, 509, 511, 516, 518, 523, 525, 530, 532, 537, 539, 544, 546, 551, 553, 558, 560, 565, 567, 572, 574, 579, 581, 586, 588, 593, 595, 600, 602, 607, 609, 614, 616, 621, 623, 628, 630, 635, 637, 642, 644, 649, 651, 656, 658], "excluded_lines": []}, "nemo/collections/asr/models/ctc_models.py": {"executed_lines": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 49, 50, 52, 120, 167, 238, 275, 349, 394, 417, 440, 441, 454, 455, 462, 463, 515, 572, 588, 622, 630, 635, 640, 649, 653, 655, 662, 669, 675, 710, 752, 753, 863, 864, 867, 868], "summary": {"covered_lines": 65, "num_statements": 335, "percent_covered": 19.402985074626866, "percent_covered_display": "19", "missing_lines": 270, "excluded_lines": 0}, "missing_lines": [55, 56, 57, 59, 60, 61, 63, 64, 67, 68, 69, 71, 72, 77, 79, 81, 87, 88, 90, 93, 96, 97, 98, 99, 101, 104, 112, 115, 118, 156, 184, 185, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 203, 205, 208, 209, 210, 212, 216, 224, 225, 227, 228, 230, 231, 232, 233, 234, 236, 246, 248, 249, 252, 253, 254, 256, 260, 267, 270, 271, 273, 277, 278, 280, 281, 296, 304, 305, 307, 309, 311, 312, 313, 315, 316, 317, 319, 322, 324, 325, 326, 327, 332, 333, 334, 335, 337, 364, 365, 368, 370, 375, 383, 384, 388, 389, 409, 410, 413, 415, 432, 433, 436, 438, 442, 443, 445, 446, 456, 486, 487, 488, 489, 494, 495, 499, 500, 502, 503, 504, 505, 506, 508, 517, 518, 520, 521, 523, 524, 525, 529, 531, 532, 534, 536, 541, 543, 548, 549, 551, 559, 560, 566, 567, 568, 570, 573, 574, 575, 579, 581, 585, 586, 589, 590, 592, 593, 594, 598, 600, 603, 607, 610, 611, 612, 614, 617, 618, 620, 623, 624, 625, 627, 628, 631, 632, 633, 636, 637, 638, 641, 642, 643, 644, 646, 647, 650, 651, 656, 659, 660, 663, 666, 667, 670, 671, 672, 673, 676, 677, 679, 682, 683, 687, 688, 690, 691, 693, 694, 695, 696, 697, 700, 702, 703, 704, 706, 708, 728, 729, 730, 732, 733, 735, 746, 747, 749, 750, 760, 762, 767, 769, 774, 776, 781, 783, 788, 790, 795, 797, 802, 804, 809, 811, 816, 818, 823, 825, 830, 832, 837, 839, 845, 847, 852, 854, 859, 861, 865, 869], "excluded_lines": []}, "nemo/collections/asr/models/enhancement_models.py": {"executed_lines": [14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 39, 40, 49, 87, 88, 201, 245, 267, 286, 305, 335, 336, 344, 345, 353, 370, 371, 407, 442, 477, 478], "summary": {"covered_lines": 40, "num_statements": 188, "percent_covered": 21.27659574468085, "percent_covered_display": "21", "missing_lines": 148, "excluded_lines": 0}, "missing_lines": [52, 53, 54, 56, 57, 60, 61, 62, 63, 65, 66, 67, 69, 70, 77, 78, 79, 81, 82, 85, 112, 113, 115, 116, 119, 122, 123, 125, 127, 129, 131, 132, 135, 137, 138, 139, 140, 141, 143, 152, 153, 156, 159, 162, 163, 164, 168, 169, 171, 175, 177, 179, 181, 183, 185, 187, 189, 190, 194, 195, 196, 197, 199, 203, 204, 208, 209, 210, 214, 217, 218, 220, 221, 222, 224, 226, 227, 228, 230, 233, 235, 256, 257, 260, 262, 264, 265, 278, 279, 282, 284, 297, 298, 301, 303, 319, 332, 333, 337, 346, 364, 365, 366, 368, 384, 387, 390, 393, 396, 397, 400, 403, 404, 409, 411, 412, 413, 415, 419, 420, 421, 422, 425, 426, 429, 432, 435, 436, 437, 440, 444, 446, 447, 448, 450, 454, 455, 456, 457, 460, 463, 466, 468, 469, 472, 475, 485, 487], "excluded_lines": []}, "nemo/collections/asr/models/hybrid_asr_tts_models.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 272, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 272, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 67, 70, 71, 76, 77, 78, 79, 80, 81, 82, 83, 86, 93, 94, 95, 97, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 130, 135, 148, 149, 150, 152, 153, 155, 159, 160, 161, 162, 163, 164, 166, 169, 170, 172, 173, 174, 179, 181, 182, 183, 187, 188, 189, 194, 195, 198, 199, 200, 202, 203, 206, 207, 213, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 247, 248, 265, 266, 267, 268, 269, 270, 271, 273, 274, 296, 297, 314, 315, 316, 317, 318, 320, 322, 323, 324, 326, 333, 334, 336, 337, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 375, 376, 378, 379, 381, 383, 385, 387, 389, 391, 393, 395, 396, 398, 400, 401, 403, 405, 406, 407, 409, 413, 414, 415, 417, 420, 421, 422, 424, 426, 427, 428, 429, 430, 431, 432, 436, 447, 449, 450, 452, 453, 456, 457, 459, 463, 464, 465, 467, 468, 477, 478, 480, 481, 482, 484, 486, 487, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 503, 505, 506, 508, 509, 511, 512, 513, 515, 518, 520, 521, 531, 544, 547, 548, 564, 577, 579, 585, 586, 587, 588, 589, 591], "excluded_lines": []}, "nemo/collections/asr/models/hybrid_rnnt_ctc_bpe_models.py": {"executed_lines": [15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 43, 135, 199, 242, 409, 494, 495], "summary": {"covered_lines": 29, "num_statements": 244, "percent_covered": 11.885245901639344, "percent_covered_display": "12", "missing_lines": 215, "excluded_lines": 0}, "missing_lines": [45, 46, 49, 50, 52, 53, 56, 59, 62, 63, 65, 66, 68, 69, 70, 71, 72, 75, 76, 80, 81, 82, 84, 86, 87, 92, 94, 96, 98, 103, 112, 113, 114, 117, 118, 119, 120, 121, 122, 125, 133, 137, 138, 145, 154, 155, 157, 159, 161, 162, 163, 165, 166, 167, 169, 172, 174, 175, 176, 177, 182, 183, 184, 185, 187, 218, 219, 220, 222, 223, 225, 236, 237, 239, 240, 265, 266, 267, 269, 273, 275, 276, 278, 279, 283, 284, 286, 289, 292, 294, 295, 296, 297, 299, 301, 302, 303, 305, 306, 307, 308, 309, 311, 312, 314, 316, 319, 320, 321, 322, 324, 328, 337, 340, 341, 344, 345, 347, 348, 350, 351, 353, 356, 357, 359, 360, 362, 364, 366, 371, 373, 374, 375, 376, 382, 384, 387, 388, 389, 391, 393, 401, 402, 404, 405, 407, 419, 420, 422, 423, 426, 427, 428, 429, 431, 435, 444, 447, 448, 450, 453, 454, 456, 457, 459, 460, 461, 462, 464, 465, 468, 469, 470, 472, 474, 481, 484, 485, 487, 488, 492, 502, 504, 509, 511, 516, 518, 523, 525, 530, 532, 537, 539, 544, 546, 551, 553, 558, 560, 565, 567, 572, 574, 579, 581, 586, 588, 593, 595, 600, 602, 607, 609, 614, 616], "excluded_lines": []}, "nemo/collections/asr/models/hybrid_rnnt_ctc_models.py": {"executed_lines": [15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 42, 96, 97, 149, 155, 161, 174, 214, 295, 340, 463, 481, 587, 596, 605, 622, 642, 648, 649, 655, 656], "summary": {"covered_lines": 42, "num_statements": 312, "percent_covered": 13.461538461538462, "percent_covered_display": "13", "missing_lines": 270, "excluded_lines": 0}, "missing_lines": [43, 44, 45, 47, 48, 51, 52, 55, 56, 57, 59, 60, 65, 67, 68, 70, 76, 77, 78, 79, 80, 82, 83, 91, 94, 132, 133, 137, 150, 152, 153, 156, 158, 159, 162, 163, 166, 168, 169, 171, 172, 177, 178, 181, 182, 184, 187, 189, 191, 192, 193, 194, 201, 203, 204, 206, 207, 208, 210, 212, 236, 239, 240, 241, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 261, 263, 264, 267, 268, 269, 271, 273, 281, 282, 284, 285, 287, 288, 289, 290, 291, 293, 306, 307, 308, 310, 311, 313, 314, 317, 318, 319, 321, 323, 330, 333, 334, 336, 337, 342, 343, 345, 346, 348, 351, 352, 354, 355, 358, 360, 361, 362, 364, 365, 367, 368, 370, 373, 375, 376, 381, 383, 388, 389, 395, 396, 397, 401, 411, 413, 418, 419, 421, 422, 423, 426, 427, 428, 429, 430, 436, 437, 438, 445, 448, 449, 451, 452, 455, 458, 459, 461, 465, 468, 469, 471, 472, 474, 478, 479, 482, 483, 485, 488, 489, 491, 492, 494, 495, 498, 499, 500, 501, 503, 506, 508, 514, 515, 517, 518, 519, 523, 525, 526, 528, 529, 532, 540, 541, 543, 544, 545, 547, 548, 549, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 565, 567, 576, 579, 580, 582, 583, 585, 588, 589, 590, 592, 594, 597, 598, 599, 600, 602, 603, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 643, 644, 646, 650, 651, 653, 663, 664], "excluded_lines": []}, "nemo/collections/asr/models/k2_aligner_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 303, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 303, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 66, 67, 69, 71, 72, 73, 74, 75, 77, 81, 83, 87, 88, 89, 90, 91, 93, 95, 96, 100, 101, 102, 103, 104, 106, 111, 112, 114, 116, 117, 118, 120, 122, 134, 136, 150, 151, 152, 153, 154, 156, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 176, 181, 183, 184, 186, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 215, 216, 218, 221, 223, 224, 225, 227, 228, 229, 231, 245, 246, 248, 251, 252, 253, 257, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 283, 296, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 314, 318, 324, 326, 339, 342, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 411, 419, 420, 422, 423, 424, 425, 426, 429, 430, 432, 433, 434, 435, 436, 437, 438, 442, 443, 444, 449, 450, 452, 465, 467, 468, 470, 471, 472, 473, 474, 480, 482, 484, 489, 502, 503, 504, 505, 506, 511, 512, 513, 514, 515, 521, 522, 527, 529, 530, 531, 533, 534, 536, 538, 540, 541, 560, 562, 563, 564, 565, 567, 568, 570, 571, 572, 575, 577, 578, 579, 580, 581, 582, 584, 589, 590, 591, 592, 593, 594, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 609, 610, 612, 613, 615, 616], "excluded_lines": []}, "nemo/collections/asr/models/k2_sequence_models.py": {"executed_lines": [15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 29, 30, 32, 39, 40, 49, 77, 78, 112, 113, 115, 122, 123, 132, 160, 161, 195, 196, 198, 209, 210, 219, 248, 249, 251, 262, 263, 272], "summary": {"covered_lines": 34, "num_statements": 84, "percent_covered": 40.476190476190474, "percent_covered_display": "40", "missing_lines": 50, "excluded_lines": 0}, "missing_lines": [33, 34, 35, 36, 37, 47, 65, 67, 68, 69, 75, 101, 107, 116, 117, 118, 119, 120, 130, 148, 150, 151, 152, 158, 184, 190, 199, 200, 201, 202, 206, 207, 217, 235, 237, 238, 239, 245, 252, 253, 254, 255, 259, 260, 270, 288, 290, 291, 292, 298], "excluded_lines": []}, "nemo/collections/asr/models/label_models.py": {"executed_lines": [14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 49, 50, 63, 64, 109, 173, 174, 195, 267, 302, 306, 314, 318, 319, 329, 330, 336, 341, 342, 355, 372, 401, 430, 433, 436, 439, 442, 443, 474, 475, 503, 549, 564, 565, 593, 594], "summary": {"covered_lines": 62, "num_statements": 330, "percent_covered": 18.78787878787879, "percent_covered_display": "19", "missing_lines": 268, "excluded_lines": 0}, "missing_lines": [70, 72, 77, 79, 84, 86, 91, 93, 98, 100, 105, 107, 110, 111, 112, 113, 115, 117, 118, 119, 120, 121, 123, 125, 127, 128, 130, 132, 134, 136, 137, 139, 140, 141, 142, 144, 145, 146, 149, 150, 153, 157, 158, 160, 162, 163, 164, 166, 168, 169, 171, 175, 176, 177, 178, 179, 180, 182, 183, 184, 190, 191, 192, 193, 196, 197, 199, 201, 204, 205, 206, 209, 213, 215, 216, 217, 225, 232, 234, 235, 236, 238, 248, 249, 251, 252, 254, 256, 257, 268, 271, 272, 273, 275, 276, 277, 278, 279, 283, 291, 292, 296, 297, 303, 304, 307, 308, 310, 311, 312, 315, 316, 320, 321, 323, 324, 331, 337, 338, 339, 343, 347, 348, 350, 351, 352, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 368, 370, 373, 374, 375, 376, 377, 378, 379, 381, 388, 389, 390, 392, 394, 395, 397, 399, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 424, 431, 434, 437, 440, 452, 453, 454, 455, 456, 457, 458, 459, 463, 464, 466, 468, 469, 470, 471, 472, 484, 486, 487, 488, 492, 493, 495, 497, 498, 499, 500, 501, 517, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 530, 531, 533, 534, 535, 537, 539, 540, 541, 542, 544, 545, 547, 560, 562, 577, 578, 580, 581, 583, 584, 586, 587, 588, 590, 591, 617, 618, 619, 620, 621, 622, 623, 625, 627, 629, 633, 634, 635, 637, 638, 639, 640, 641, 643, 644, 645, 647, 649, 650, 651, 653, 655], "excluded_lines": []}, "nemo/collections/asr/models/msdd_models.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 46, 47, 48, 49, 60, 61, 62, 63, 64, 66, 67, 76, 79, 80, 90, 91, 108, 151, 165, 175, 209, 243, 277, 280, 283, 293, 299, 303, 304, 319, 320, 328, 383, 384, 448, 449, 527, 536, 537, 571, 593, 615, 627, 637, 652, 653, 678, 692, 701, 738, 762, 823, 885, 902, 924, 941, 967, 968, 974, 1004, 1017, 1018, 1046, 1073, 1098, 1138, 1164, 1171, 1172, 1185, 1256, 1298, 1347, 1348, 1387, 1432, 1433, 1458, 1517, 1537, 1538], "summary": {"covered_lines": 102, "num_statements": 618, "percent_covered": 16.50485436893204, "percent_covered_display": "17", "missing_lines": 516, "excluded_lines": 0}, "missing_lines": [68, 69, 71, 72, 73, 98, 100, 105, 106, 112, 113, 115, 116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 129, 130, 131, 133, 134, 135, 137, 138, 139, 141, 144, 146, 147, 148, 149, 159, 160, 161, 162, 163, 168, 169, 181, 182, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 198, 199, 202, 203, 204, 207, 210, 214, 215, 216, 217, 229, 230, 231, 232, 233, 246, 248, 249, 250, 252, 263, 264, 265, 266, 267, 278, 281, 284, 285, 297, 300, 301, 305, 306, 308, 309, 321, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 441, 442, 443, 446, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 521, 522, 523, 524, 525, 531, 534, 540, 543, 548, 549, 550, 553, 554, 557, 558, 559, 562, 564, 565, 566, 569, 572, 573, 574, 583, 584, 585, 586, 587, 588, 589, 590, 591, 594, 595, 596, 605, 606, 607, 608, 609, 610, 616, 617, 618, 620, 621, 622, 628, 629, 630, 631, 632, 645, 646, 647, 648, 649, 681, 682, 683, 684, 685, 688, 689, 690, 696, 697, 719, 720, 721, 722, 723, 724, 725, 728, 729, 730, 731, 733, 734, 735, 736, 753, 754, 755, 756, 757, 758, 759, 760, 790, 791, 795, 796, 799, 800, 801, 802, 804, 805, 806, 809, 810, 811, 812, 813, 815, 816, 818, 820, 821, 843, 844, 847, 848, 849, 851, 852, 855, 858, 859, 860, 862, 863, 864, 867, 868, 870, 873, 876, 877, 878, 879, 882, 883, 896, 897, 898, 899, 900, 916, 919, 920, 921, 922, 935, 936, 937, 938, 939, 952, 953, 954, 955, 958, 959, 960, 961, 962, 963, 964, 975, 976, 979, 980, 981, 982, 983, 984, 985, 989, 990, 991, 994, 999, 1000, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1030, 1031, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1088, 1089, 1090, 1091, 1093, 1094, 1096, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1133, 1134, 1135, 1136, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1167, 1168, 1169, 1178, 1179, 1180, 1181, 1182, 1183, 1214, 1215, 1216, 1217, 1218, 1222, 1223, 1224, 1225, 1232, 1235, 1236, 1239, 1240, 1250, 1253, 1254, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1321, 1322, 1323, 1324, 1327, 1328, 1334, 1335, 1337, 1338, 1341, 1342, 1343, 1344, 1345, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1374, 1375, 1377, 1378, 1379, 1381, 1382, 1383, 1384, 1385, 1401, 1404, 1405, 1406, 1407, 1408, 1420, 1428, 1429, 1430, 1452, 1453, 1456, 1481, 1482, 1483, 1484, 1485, 1498, 1499, 1501, 1511, 1512, 1514, 1515, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1545], "excluded_lines": []}, "nemo/collections/asr/models/online_diarizer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 187, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 187, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 32, 34, 37, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 62, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 102, 103, 105, 108, 110, 124, 132, 133, 135, 137, 145, 147, 163, 164, 165, 166, 168, 181, 182, 183, 185, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 237, 238, 239, 240, 242, 246, 247, 248, 250, 258, 261, 262, 263, 264, 265, 266, 268, 279, 280, 282, 287, 288, 289, 290, 291, 293, 294, 303, 304, 305, 306, 308, 309, 310, 312, 313, 315, 337, 339, 340, 341, 342, 343, 346, 348, 351, 352, 353, 356, 359, 360, 361, 362, 368, 370, 376, 383, 384, 386, 387, 389, 390, 391, 402, 403, 404, 405, 407, 408, 429, 430, 432, 433, 434, 435, 437, 439, 440, 442, 443, 444, 446, 447, 461, 464, 470, 477, 478, 482, 483, 485, 487, 494, 495, 497, 500, 502, 503, 532, 535, 536, 539, 542, 551, 552, 553, 556, 563, 565, 570, 575, 578, 579], "excluded_lines": []}, "nemo/collections/asr/models/rnnt_bpe_models.py": {"executed_lines": [15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 41, 42, 284, 337, 448, 494, 557], "summary": {"covered_lines": 27, "num_statements": 216, "percent_covered": 12.5, "percent_covered_display": "12", "missing_lines": 189, "excluded_lines": 0}, "missing_lines": [49, 51, 56, 58, 63, 65, 70, 72, 77, 79, 84, 86, 91, 93, 98, 100, 105, 107, 112, 114, 119, 121, 126, 128, 133, 135, 140, 142, 147, 149, 154, 156, 161, 163, 168, 170, 175, 177, 182, 184, 189, 191, 196, 198, 203, 205, 210, 212, 217, 219, 224, 226, 231, 233, 238, 240, 245, 247, 252, 254, 259, 261, 266, 268, 273, 275, 280, 282, 286, 287, 290, 291, 293, 294, 297, 300, 303, 304, 306, 307, 309, 310, 311, 312, 313, 315, 317, 319, 324, 333, 334, 335, 358, 359, 360, 362, 366, 368, 369, 371, 372, 376, 377, 379, 382, 385, 387, 388, 389, 390, 392, 394, 395, 396, 398, 399, 400, 401, 402, 404, 405, 407, 409, 412, 413, 414, 415, 417, 421, 430, 433, 434, 437, 438, 440, 441, 443, 444, 446, 456, 458, 459, 462, 463, 464, 465, 467, 471, 480, 483, 484, 486, 489, 490, 492, 495, 496, 503, 512, 513, 515, 517, 519, 520, 521, 523, 524, 525, 527, 530, 532, 533, 534, 535, 540, 541, 542, 543, 545, 573, 574, 575, 577, 578, 580, 591, 592, 594, 595], "excluded_lines": []}, "nemo/collections/asr/models/rnnt_models.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 137, 188, 226, 236, 237, 289, 377, 423, 497, 543, 566, 589, 590, 603, 604, 610, 611, 663, 761, 778, 846, 854, 863, 874, 885, 887, 892, 919, 959, 1003, 1007, 1008, 1011, 1019, 1020, 1038, 1039, 1042, 1043], "summary": {"covered_lines": 69, "num_statements": 416, "percent_covered": 16.58653846153846, "percent_covered_display": "17", "missing_lines": 347, "excluded_lines": 0}, "missing_lines": [58, 59, 60, 62, 65, 66, 69, 70, 72, 73, 74, 75, 76, 78, 79, 82, 84, 86, 87, 89, 96, 97, 99, 101, 103, 107, 116, 117, 119, 122, 125, 126, 129, 132, 135, 168, 169, 170, 172, 173, 176, 177, 180, 183, 186, 212, 213, 215, 217, 218, 220, 222, 224, 227, 229, 230, 231, 232, 234, 276, 305, 306, 308, 309, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 330, 332, 335, 336, 337, 338, 340, 344, 353, 356, 357, 360, 361, 363, 364, 366, 367, 369, 370, 371, 372, 373, 375, 385, 387, 388, 391, 392, 393, 394, 396, 400, 409, 412, 413, 415, 418, 419, 421, 425, 426, 428, 429, 444, 452, 453, 455, 457, 459, 460, 461, 463, 464, 465, 467, 470, 472, 473, 474, 475, 480, 481, 482, 483, 485, 512, 513, 516, 518, 524, 532, 533, 537, 538, 558, 559, 562, 564, 581, 582, 585, 587, 591, 592, 594, 596, 605, 642, 643, 644, 645, 650, 651, 656, 657, 659, 660, 665, 666, 668, 671, 672, 674, 675, 678, 680, 681, 682, 684, 685, 688, 690, 691, 696, 699, 700, 702, 708, 709, 715, 716, 717, 721, 722, 724, 727, 737, 740, 741, 743, 749, 750, 753, 756, 757, 759, 762, 765, 766, 768, 769, 771, 775, 776, 779, 782, 783, 785, 786, 788, 791, 792, 793, 794, 796, 800, 802, 808, 809, 811, 812, 813, 817, 819, 820, 822, 823, 826, 835, 836, 838, 839, 840, 842, 844, 847, 848, 849, 851, 852, 855, 856, 857, 858, 860, 861, 864, 865, 866, 868, 869, 870, 871, 872, 875, 876, 877, 879, 880, 881, 882, 883, 888, 889, 890, 895, 896, 898, 906, 908, 909, 911, 912, 913, 915, 917, 935, 936, 937, 939, 940, 942, 953, 954, 956, 957, 960, 961, 962, 963, 964, 971, 973, 974, 975, 976, 977, 978, 980, 981, 982, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1004, 1009, 1012, 1013, 1014, 1016, 1017, 1027, 1029, 1034, 1036, 1040, 1044], "excluded_lines": []}, "nemo/collections/asr/models/slu_models.py": {"executed_lines": [16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 43, 45, 48, 49, 51, 120, 121, 136, 137, 144, 148, 149, 225, 268, 295, 337, 345, 354, 361, 430, 475, 498, 521, 560, 561, 595, 597, 602, 606, 607, 623, 624, 627, 628], "summary": {"covered_lines": 52, "num_statements": 234, "percent_covered": 22.22222222222222, "percent_covered_display": "22", "missing_lines": 182, "excluded_lines": 0}, "missing_lines": [53, 54, 56, 57, 60, 62, 64, 65, 66, 68, 69, 71, 74, 77, 79, 80, 83, 84, 87, 88, 90, 92, 101, 104, 105, 106, 107, 109, 112, 122, 123, 125, 126, 138, 145, 146, 183, 184, 185, 186, 191, 192, 196, 197, 199, 200, 201, 203, 204, 205, 207, 208, 209, 211, 217, 219, 221, 222, 226, 227, 229, 231, 238, 239, 241, 243, 244, 245, 247, 248, 250, 251, 253, 255, 256, 262, 263, 264, 266, 271, 272, 273, 274, 279, 280, 284, 285, 287, 288, 289, 291, 292, 293, 296, 297, 299, 301, 302, 309, 316, 317, 319, 321, 327, 328, 330, 338, 339, 340, 342, 343, 346, 347, 348, 349, 351, 352, 355, 357, 359, 362, 363, 365, 367, 368, 369, 370, 371, 380, 383, 384, 387, 391, 393, 394, 402, 404, 405, 406, 408, 411, 412, 413, 415, 418, 420, 445, 446, 449, 451, 456, 464, 465, 469, 470, 490, 491, 494, 496, 513, 514, 517, 519, 540, 541, 542, 544, 545, 547, 557, 558, 587, 598, 599, 600, 603, 604, 614, 616, 621, 625, 629], "excluded_lines": []}, "nemo/collections/asr/models/ssl_models.py": {"executed_lines": [15, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 41, 43, 46, 47, 49, 50, 75, 145, 230, 270, 310, 311, 325, 326, 334, 335, 417, 508, 549, 580, 588], "summary": {"covered_lines": 37, "num_statements": 240, "percent_covered": 15.416666666666666, "percent_covered_display": "15", "missing_lines": 203, "excluded_lines": 0}, "missing_lines": [57, 59, 64, 66, 71, 73, 78, 79, 80, 82, 83, 84, 86, 88, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 103, 107, 108, 109, 110, 111, 112, 113, 114, 116, 119, 120, 122, 125, 130, 135, 136, 138, 140, 141, 143, 146, 147, 149, 152, 154, 155, 170, 171, 172, 173, 174, 182, 185, 186, 189, 193, 195, 196, 203, 205, 206, 207, 209, 211, 212, 213, 215, 218, 220, 245, 246, 249, 251, 256, 264, 265, 285, 286, 289, 291, 296, 304, 305, 312, 313, 315, 316, 327, 360, 361, 364, 365, 367, 370, 376, 377, 379, 380, 381, 383, 384, 385, 386, 391, 392, 396, 397, 398, 400, 401, 402, 403, 405, 406, 408, 409, 410, 411, 413, 415, 433, 435, 436, 437, 439, 440, 441, 449, 452, 453, 454, 456, 458, 459, 461, 462, 465, 466, 467, 469, 471, 472, 473, 474, 475, 477, 479, 483, 485, 486, 488, 496, 502, 503, 505, 509, 510, 511, 515, 519, 520, 521, 522, 523, 524, 526, 527, 529, 533, 538, 539, 541, 542, 545, 547, 551, 553, 554, 555, 559, 563, 564, 565, 567, 569, 570, 573, 574, 576, 578, 581, 582, 583, 585, 586, 589, 590, 591], "excluded_lines": []}, "nemo/collections/asr/models/transformer_bpe_models.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 60, 63, 69, 70, 72, 174, 175, 212, 221, 262, 288, 308, 328, 329, 344, 345, 353, 354, 415, 435, 446, 481, 484, 535, 538, 542, 570, 572, 578, 585, 628], "summary": {"covered_lines": 59, "num_statements": 243, "percent_covered": 24.279835390946502, "percent_covered_display": "24", "missing_lines": 184, "excluded_lines": 0}, "missing_lines": [64, 65, 66, 74, 75, 78, 80, 83, 86, 89, 90, 92, 94, 97, 98, 99, 101, 113, 114, 116, 119, 120, 121, 122, 123, 124, 125, 126, 134, 143, 144, 145, 146, 149, 163, 167, 168, 170, 172, 202, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 231, 240, 241, 243, 244, 245, 247, 248, 250, 252, 265, 266, 272, 277, 278, 282, 283, 301, 302, 305, 306, 321, 322, 325, 326, 330, 331, 333, 334, 346, 381, 382, 383, 384, 389, 390, 394, 395, 397, 399, 400, 401, 402, 403, 405, 406, 407, 408, 411, 413, 417, 418, 420, 421, 423, 430, 432, 437, 439, 444, 447, 448, 450, 451, 458, 465, 468, 470, 471, 473, 475, 477, 479, 482, 489, 490, 492, 493, 495, 496, 497, 498, 501, 503, 504, 508, 510, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 523, 524, 527, 528, 530, 531, 532, 533, 536, 539, 540, 556, 557, 567, 568, 573, 576, 579, 582, 583, 586, 587, 588, 589, 592, 594, 602, 603, 605, 610, 611, 612, 622, 624, 626, 629, 632], "excluded_lines": []}, "nemo/collections/asr/modules/__init__.py": {"executed_lines": [15, 21, 30, 31, 32, 42, 43, 44, 45, 46, 47, 54], "summary": {"covered_lines": 12, "num_statements": 12, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/modules/audio_modules.py": {"executed_lines": [15, 17, 18, 20, 21, 22, 23, 30, 31, 32, 33, 34, 36, 45, 46, 63, 107, 108, 116, 117, 125, 126, 131, 132, 143, 144, 167, 168, 197, 204, 218, 225, 239, 240, 301, 302, 328, 389, 390, 398, 399, 407, 408, 469, 470, 506, 638, 639, 647, 648, 656, 657, 721, 722, 742, 767, 782, 790, 815, 818, 831, 839, 903, 904, 912, 913, 920, 921, 973, 974, 983, 995, 996, 1005, 1006, 1014, 1015, 1038, 1039, 1057, 1124, 1125, 1135, 1136, 1144, 1145, 1218, 1219, 1237, 1250, 1251, 1260, 1261, 1269, 1270, 1317, 1318, 1359, 1360, 1387, 1438, 1476, 1508, 1509, 1531, 1562, 1563, 1572, 1573, 1581, 1582, 1619, 1620, 1633, 1641, 1642, 1650, 1651, 1658, 1659], "summary": {"covered_lines": 111, "num_statements": 534, "percent_covered": 20.786516853932586, "percent_covered_display": "21", "missing_lines": 423, "excluded_lines": 0}, "missing_lines": [74, 75, 76, 77, 79, 80, 81, 83, 84, 85, 87, 88, 89, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 111, 120, 129, 135, 136, 138, 155, 157, 158, 161, 163, 165, 181, 183, 184, 186, 187, 189, 191, 193, 195, 214, 215, 216, 235, 236, 237, 254, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266, 268, 270, 271, 272, 274, 276, 278, 279, 281, 283, 286, 287, 288, 291, 293, 294, 298, 342, 343, 344, 346, 353, 357, 358, 366, 367, 376, 378, 381, 384, 387, 393, 402, 419, 420, 423, 426, 429, 432, 435, 436, 437, 438, 441, 444, 445, 447, 448, 452, 455, 458, 461, 464, 466, 527, 529, 538, 539, 542, 544, 546, 547, 550, 551, 554, 555, 557, 558, 561, 563, 564, 572, 573, 576, 577, 581, 582, 585, 588, 589, 590, 600, 602, 604, 605, 607, 608, 610, 614, 616, 618, 619, 636, 642, 651, 661, 664, 667, 668, 670, 672, 674, 675, 677, 679, 682, 685, 687, 690, 692, 694, 695, 697, 699, 702, 705, 706, 708, 710, 711, 713, 716, 718, 743, 745, 746, 749, 751, 752, 755, 758, 759, 760, 762, 763, 764, 765, 778, 779, 780, 803, 805, 808, 811, 813, 828, 829, 852, 855, 859, 862, 863, 866, 870, 874, 878, 881, 884, 892, 894, 896, 899, 901, 907, 916, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 946, 949, 952, 954, 956, 959, 962, 963, 964, 965, 967, 968, 970, 984, 985, 987, 988, 990, 991, 992, 993, 999, 1009, 1031, 1034, 1035, 1075, 1076, 1077, 1079, 1080, 1081, 1087, 1088, 1090, 1103, 1104, 1107, 1108, 1110, 1111, 1114, 1115, 1117, 1118, 1119, 1120, 1121, 1122, 1128, 1139, 1168, 1169, 1174, 1175, 1177, 1179, 1180, 1181, 1183, 1186, 1189, 1190, 1192, 1193, 1194, 1197, 1200, 1201, 1202, 1205, 1209, 1212, 1213, 1215, 1238, 1239, 1240, 1241, 1242, 1244, 1245, 1246, 1247, 1248, 1254, 1264, 1287, 1289, 1292, 1295, 1300, 1303, 1306, 1308, 1310, 1313, 1315, 1339, 1340, 1342, 1344, 1346, 1349, 1352, 1355, 1357, 1372, 1377, 1378, 1380, 1381, 1382, 1385, 1421, 1423, 1426, 1430, 1434, 1436, 1450, 1451, 1456, 1457, 1460, 1462, 1464, 1467, 1470, 1472, 1474, 1494, 1495, 1496, 1497, 1499, 1500, 1503, 1505, 1542, 1544, 1547, 1549, 1550, 1552, 1553, 1554, 1556, 1557, 1558, 1559, 1560, 1566, 1576, 1596, 1598, 1599, 1601, 1602, 1604, 1605, 1606, 1608, 1610, 1612, 1614, 1616, 1634, 1635, 1636, 1638, 1639, 1645, 1654, 1669, 1671, 1674, 1675, 1676, 1677, 1678, 1680, 1683, 1685], "excluded_lines": []}, "nemo/collections/asr/modules/audio_preprocessing.py": {"executed_lines": [15, 16, 17, 18, 19, 21, 22, 24, 25, 30, 31, 32, 40, 41, 42, 44, 45, 46, 47, 49, 50, 52, 56, 67, 68, 73, 88, 89, 90, 95, 96, 101, 102, 171, 174, 175, 178, 179, 189, 190, 205, 283, 291, 294, 295, 299, 300, 336, 337, 345, 346, 354, 357, 358, 361, 431, 437, 438, 468, 469, 477, 478, 483, 529, 530, 542, 543, 560, 561, 569, 570, 575, 593, 594, 623, 624, 633, 643, 644, 645, 677, 678, 686, 687, 695, 698, 699, 703, 704, 714, 735, 736, 739, 740, 748, 749, 757, 758, 793, 806, 807, 817, 837, 838, 841, 842, 850, 851, 859, 860, 894, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 986], "summary": {"covered_lines": 175, "num_statements": 363, "percent_covered": 48.209366391184574, "percent_covered_display": "48", "missing_lines": 188, "excluded_lines": 0}, "missing_lines": [53, 54, 74, 76, 77, 79, 91, 93, 98, 172, 176, 182, 200, 236, 238, 239, 240, 241, 242, 245, 246, 247, 248, 251, 252, 254, 255, 284, 285, 286, 287, 288, 289, 292, 296, 340, 349, 355, 359, 378, 379, 380, 382, 387, 388, 389, 390, 394, 395, 396, 397, 399, 401, 403, 404, 405, 407, 409, 410, 413, 414, 415, 419, 422, 432, 433, 434, 472, 481, 496, 498, 499, 502, 503, 504, 513, 516, 517, 518, 527, 531, 535, 536, 538, 539, 564, 573, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 591, 595, 597, 599, 601, 602, 604, 606, 607, 609, 610, 611, 612, 614, 615, 617, 618, 620, 634, 635, 637, 638, 646, 647, 649, 650, 653, 654, 655, 657, 658, 660, 661, 664, 665, 667, 668, 670, 673, 675, 681, 690, 696, 700, 715, 716, 718, 722, 725, 726, 728, 733, 737, 743, 752, 772, 773, 776, 777, 779, 781, 783, 786, 789, 791, 802, 803, 818, 819, 821, 825, 828, 829, 831, 835, 839, 845, 854, 872, 873, 874, 877, 878, 880, 882, 884, 887, 890, 892, 903, 904], "excluded_lines": []}, "nemo/collections/asr/modules/beam_search_decoder.py": {"executed_lines": [15, 17, 18, 21, 22, 44, 45, 53, 54, 59, 85, 86, 87], "summary": {"covered_lines": 12, "num_statements": 37, "percent_covered": 32.432432432432435, "percent_covered_display": "32", "missing_lines": 25, "excluded_lines": 0}, "missing_lines": [48, 57, 63, 64, 65, 66, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 103], "excluded_lines": []}, "nemo/collections/asr/modules/conformer_encoder.py": {"executed_lines": [15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30, 38, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 56, 151, 193, 194, 206, 207, 219, 220, 232, 233, 245, 246, 252, 253, 259, 448, 476, 494, 495, 506, 656, 669, 678, 734, 740, 788, 798, 897, 930, 1054, 1074, 1077, 1082, 1085, 1089, 1097, 1101, 1116, 1119, 1120, 1123, 1124, 1132, 1137], "summary": {"covered_lines": 68, "num_statements": 467, "percent_covered": 14.5610278372591, "percent_covered_display": "15", "missing_lines": 399, "excluded_lines": 0}, "missing_lines": [157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 174, 177, 187, 188, 189, 191, 196, 209, 222, 235, 247, 248, 250, 254, 255, 257, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 311, 324, 325, 327, 330, 331, 332, 333, 335, 342, 353, 356, 357, 358, 361, 363, 364, 366, 369, 370, 371, 372, 373, 374, 376, 377, 380, 381, 382, 389, 390, 391, 392, 400, 401, 402, 403, 407, 409, 410, 411, 428, 430, 431, 432, 434, 435, 436, 437, 439, 440, 442, 446, 451, 452, 453, 455, 462, 463, 464, 465, 466, 468, 477, 478, 480, 482, 483, 484, 488, 489, 490, 492, 498, 509, 511, 512, 518, 519, 521, 523, 525, 526, 528, 529, 531, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 551, 554, 562, 563, 564, 565, 567, 568, 570, 571, 572, 573, 574, 576, 577, 578, 587, 588, 589, 590, 593, 594, 596, 600, 603, 605, 606, 607, 610, 611, 620, 621, 622, 623, 624, 625, 626, 628, 631, 633, 634, 637, 638, 640, 641, 643, 644, 645, 646, 654, 658, 659, 662, 664, 666, 667, 674, 675, 676, 679, 680, 682, 683, 684, 685, 686, 687, 689, 690, 691, 693, 695, 696, 698, 700, 701, 702, 703, 706, 708, 711, 715, 716, 719, 721, 723, 724, 726, 728, 729, 731, 732, 736, 737, 738, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 759, 761, 762, 763, 764, 765, 766, 770, 772, 773, 774, 775, 776, 779, 780, 782, 783, 785, 786, 789, 790, 793, 794, 796, 817, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 839, 841, 842, 843, 845, 846, 848, 850, 851, 856, 858, 859, 864, 866, 867, 871, 873, 874, 876, 878, 879, 880, 884, 886, 888, 889, 890, 891, 892, 893, 895, 898, 899, 900, 901, 903, 904, 905, 910, 913, 914, 921, 922, 924, 925, 927, 928, 963, 964, 966, 968, 969, 971, 972, 974, 975, 982, 983, 991, 992, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1020, 1021, 1030, 1031, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1065, 1066, 1067, 1069, 1078, 1079, 1080, 1083, 1086, 1087, 1090, 1091, 1092, 1094, 1095, 1098, 1099, 1102, 1104, 1105, 1112, 1113], "excluded_lines": []}, "nemo/collections/asr/modules/conv_asr.py": {"executed_lines": [14, 15, 16, 18, 19, 20, 21, 22, 24, 32, 38, 39, 40, 41, 42, 43, 51, 53, 56, 57, 65, 75, 86, 87, 97, 98, 108, 194, 195, 203, 235, 236, 240, 248, 257, 258, 262, 263, 267, 270, 271, 274, 275, 285, 286, 296, 392, 393, 401, 402, 410, 411, 414, 415, 418, 451, 452, 465, 474, 485, 491, 495, 496, 499, 500, 504, 505, 508, 509, 512, 513, 519, 596, 597, 603, 612, 623, 624, 630, 639, 640, 643, 644, 647, 671, 672, 683, 684, 688, 689, 706, 707, 717, 718, 728, 755, 768, 769, 788, 797, 798, 806, 807, 815, 855, 873, 874, 893, 896, 903, 906, 910, 918, 922, 933, 934, 935, 936, 937, 938, 939, 940, 941, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987, 990, 993, 994], "summary": {"covered_lines": 157, "num_statements": 471, "percent_covered": 33.333333333333336, "percent_covered_display": "33", "missing_lines": 314, "excluded_lines": 0}, "missing_lines": [66, 67, 68, 69, 70, 72, 73, 81, 82, 83, 84, 90, 101, 121, 122, 123, 125, 128, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 185, 187, 189, 190, 192, 196, 197, 198, 199, 201, 205, 206, 209, 211, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 228, 229, 230, 231, 232, 241, 242, 243, 244, 245, 246, 254, 255, 260, 265, 268, 272, 278, 289, 310, 311, 312, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 372, 373, 375, 385, 387, 389, 390, 394, 395, 396, 398, 412, 416, 419, 421, 422, 426, 427, 428, 430, 431, 432, 435, 436, 438, 440, 443, 445, 446, 449, 454, 455, 456, 457, 459, 460, 463, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 487, 489, 492, 493, 497, 501, 510, 514, 515, 517, 532, 534, 535, 537, 539, 540, 541, 543, 544, 545, 546, 547, 560, 571, 572, 573, 574, 575, 585, 586, 588, 589, 591, 592, 594, 598, 599, 600, 601, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 636, 637, 641, 645, 655, 657, 658, 659, 661, 662, 663, 664, 666, 668, 669, 673, 675, 676, 678, 679, 681, 685, 710, 721, 737, 738, 739, 741, 742, 752, 753, 756, 757, 759, 760, 761, 763, 764, 765, 794, 795, 799, 808, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 844, 845, 846, 847, 849, 851, 853, 858, 859, 865, 871, 875, 876, 878, 879, 880, 882, 883, 884, 885, 886, 888, 890, 897, 898, 900, 901, 904, 907, 908, 911, 912, 913, 915, 916, 919, 920, 923, 925, 926, 929, 930], "excluded_lines": []}, "nemo/collections/asr/modules/flashlight_decoder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 132, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 132, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 22, 23, 24, 27, 28, 29, 30, 32, 33, 35, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 50, 51, 52, 54, 55, 56, 58, 59, 61, 63, 64, 65, 67, 68, 70, 72, 73, 74, 76, 79, 96, 112, 113, 122, 123, 124, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 143, 144, 145, 146, 148, 151, 152, 153, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 198, 202, 204, 208, 209, 210, 219, 221, 224, 225, 226, 228, 229, 230, 231, 232, 233, 235, 237, 249, 250, 251, 252, 253, 254, 256, 259, 260, 261, 262, 263, 264, 266, 268, 269, 271, 275, 276, 278, 290], "excluded_lines": []}, "nemo/collections/asr/modules/graph_decoder.py": {"executed_lines": [15, 17, 18, 20, 21, 24, 25, 72, 73, 81, 82, 87, 135, 140, 186, 187, 201, 202], "summary": {"covered_lines": 17, "num_statements": 96, "percent_covered": 17.708333333333332, "percent_covered_display": "18", "missing_lines": 79, "excluded_lines": 0}, "missing_lines": [76, 85, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 132, 133, 138, 141, 142, 146, 147, 148, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 173, 174, 175, 176, 178, 183, 184, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 203, 204, 205, 207, 210, 211, 212, 213, 214], "excluded_lines": []}, "nemo/collections/asr/modules/hybrid_autoregressive_transducer.py": {"executed_lines": [29, 31, 33, 34, 36, 39, 40, 99, 133, 134, 137, 138, 141, 204], "summary": {"covered_lines": 13, "num_statements": 52, "percent_covered": 25.0, "percent_covered_display": "25", "missing_lines": 39, "excluded_lines": 0}, "missing_lines": [111, 123, 131, 135, 139, 172, 173, 174, 176, 179, 180, 182, 183, 185, 187, 188, 189, 191, 193, 194, 195, 197, 199, 200, 202, 216, 217, 218, 222, 223, 225, 227, 228, 229, 230, 231, 232, 234, 239], "excluded_lines": []}, "nemo/collections/asr/modules/lstm_decoder.py": {"executed_lines": [15, 17, 18, 20, 21, 22, 23, 25, 28, 29, 40, 41, 44, 45, 48, 72, 73, 79, 88, 89, 92, 93], "summary": {"covered_lines": 21, "num_statements": 41, "percent_covered": 51.21951219512195, "percent_covered_display": "51", "missing_lines": 20, "excluded_lines": 0}, "missing_lines": [42, 46, 49, 51, 52, 53, 57, 58, 60, 62, 69, 70, 74, 75, 76, 77, 85, 86, 90, 94], "excluded_lines": []}, "nemo/collections/asr/modules/msdd_diarizer.py": {"executed_lines": [15, 17, 18, 19, 21, 22, 23, 24, 25, 27, 30, 31, 39, 44, 45, 76, 77, 88, 89, 102, 115, 198, 257, 294, 321, 351, 391, 425, 426, 430], "summary": {"covered_lines": 29, "num_statements": 159, "percent_covered": 18.238993710691823, "percent_covered_display": "18", "missing_lines": 130, "excluded_lines": 0}, "missing_lines": [32, 33, 40, 41, 81, 93, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 155, 156, 166, 167, 172, 173, 174, 175, 176, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 225, 226, 227, 229, 230, 231, 233, 235, 236, 237, 238, 240, 241, 243, 244, 245, 246, 248, 250, 251, 252, 253, 254, 255, 279, 280, 283, 284, 285, 286, 290, 291, 292, 315, 316, 317, 318, 319, 341, 342, 343, 345, 346, 347, 348, 349, 370, 371, 373, 376, 377, 384, 385, 386, 387, 388, 389, 417, 418, 419, 420, 421, 422, 423, 427, 428, 437, 438, 439, 440, 441, 442], "excluded_lines": []}, "nemo/collections/asr/modules/rnn_encoder.py": {"executed_lines": [15, 17, 18, 19, 21, 22, 23, 24, 25, 27, 30, 31, 58, 68, 69, 79, 80, 90, 156, 157], "summary": {"covered_lines": 19, "num_statements": 61, "percent_covered": 31.147540983606557, "percent_covered_display": "31", "missing_lines": 42, "excluded_lines": 0}, "missing_lines": [64, 65, 66, 72, 83, 103, 105, 106, 108, 109, 110, 111, 112, 119, 128, 130, 132, 134, 135, 136, 138, 140, 141, 142, 143, 151, 152, 153, 154, 158, 160, 161, 165, 167, 168, 170, 172, 173, 174, 175, 177, 178], "excluded_lines": []}, "nemo/collections/asr/modules/rnnt.py": {"executed_lines": [29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 52, 55, 56, 75, 76, 85, 86, 95, 111, 115, 145, 146, 162, 244, 258, 311, 318, 337, 359, 381, 382, 389, 390, 396, 403, 433, 449, 532, 533, 590, 591, 600, 601, 610, 626, 630, 668, 669, 685, 796, 850, 881, 934, 1017, 1045, 1068, 1094, 1095, 1108, 1109, 1116, 1125, 1158, 1174, 1180, 1185, 1186, 1252, 1253, 1265, 1266, 1282, 1287, 1298, 1299, 1303, 1371, 1372, 1523, 1535, 1547, 1610, 1645, 1651, 1655, 1656, 1659, 1660, 1663, 1664, 1667, 1673, 1674, 1677, 1683, 1684, 1687, 1693, 1694, 1697, 1701, 1702, 1706, 1711, 1712, 1724, 1729, 1730, 1738, 1747, 1748, 1753, 1754, 1757, 1758, 1765, 1766, 1769, 1777, 1778, 1849, 1872, 1873, 2047, 2231, 2232, 2233], "summary": {"covered_lines": 123, "num_statements": 702, "percent_covered": 17.521367521367523, "percent_covered_display": "18", "missing_lines": 579, "excluded_lines": 0}, "missing_lines": [79, 89, 101, 102, 105, 108, 109, 112, 113, 123, 124, 125, 128, 131, 133, 143, 148, 152, 153, 155, 157, 158, 160, 212, 213, 214, 217, 218, 219, 221, 226, 227, 229, 231, 234, 235, 236, 237, 239, 241, 242, 255, 256, 275, 276, 278, 279, 282, 283, 285, 288, 289, 292, 294, 295, 298, 299, 302, 306, 307, 309, 312, 315, 316, 333, 335, 350, 351, 352, 355, 357, 370, 371, 372, 373, 374, 376, 377, 379, 387, 394, 401, 428, 429, 431, 445, 446, 447, 468, 469, 470, 472, 473, 474, 476, 477, 478, 481, 482, 484, 485, 487, 488, 490, 491, 494, 495, 496, 498, 502, 505, 506, 507, 509, 512, 513, 515, 518, 522, 525, 529, 594, 604, 616, 617, 620, 623, 624, 627, 628, 639, 640, 641, 644, 647, 648, 649, 650, 651, 652, 654, 666, 671, 675, 676, 678, 680, 681, 683, 748, 749, 750, 753, 754, 755, 758, 762, 763, 765, 767, 770, 771, 772, 773, 775, 779, 780, 781, 784, 785, 786, 788, 791, 792, 794, 826, 827, 829, 831, 848, 867, 868, 869, 875, 879, 898, 899, 901, 902, 905, 906, 908, 911, 912, 915, 917, 918, 921, 922, 925, 929, 930, 932, 953, 955, 956, 958, 959, 960, 962, 963, 964, 967, 968, 970, 971, 973, 974, 976, 977, 980, 981, 982, 984, 988, 991, 992, 993, 995, 998, 999, 1001, 1004, 1008, 1011, 1015, 1033, 1034, 1035, 1037, 1038, 1040, 1041, 1043, 1058, 1059, 1060, 1061, 1062, 1064, 1066, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1092, 1104, 1105, 1106, 1113, 1114, 1123, 1149, 1150, 1151, 1153, 1154, 1156, 1171, 1176, 1178, 1181, 1182, 1256, 1269, 1270, 1275, 1283, 1284, 1285, 1293, 1294, 1295, 1296, 1301, 1315, 1317, 1319, 1320, 1321, 1323, 1325, 1327, 1328, 1330, 1331, 1333, 1334, 1337, 1338, 1340, 1341, 1348, 1349, 1350, 1351, 1354, 1356, 1366, 1369, 1383, 1385, 1386, 1388, 1389, 1390, 1395, 1396, 1400, 1401, 1404, 1405, 1408, 1409, 1413, 1414, 1415, 1416, 1419, 1420, 1421, 1426, 1427, 1429, 1430, 1434, 1435, 1437, 1440, 1441, 1444, 1448, 1449, 1452, 1454, 1458, 1459, 1463, 1466, 1469, 1475, 1476, 1479, 1482, 1485, 1486, 1487, 1488, 1491, 1498, 1499, 1501, 1502, 1503, 1505, 1508, 1509, 1512, 1513, 1514, 1515, 1517, 1518, 1519, 1521, 1533, 1545, 1577, 1578, 1579, 1581, 1584, 1585, 1587, 1589, 1591, 1592, 1595, 1596, 1597, 1598, 1600, 1602, 1603, 1604, 1606, 1608, 1622, 1623, 1625, 1626, 1628, 1630, 1631, 1632, 1633, 1634, 1635, 1637, 1642, 1647, 1649, 1652, 1653, 1657, 1661, 1665, 1668, 1669, 1671, 1675, 1678, 1679, 1681, 1685, 1688, 1690, 1691, 1695, 1698, 1707, 1708, 1709, 1713, 1714, 1722, 1725, 1726, 1727, 1731, 1739, 1740, 1741, 1742, 1743, 1744, 1749, 1750, 1751, 1755, 1759, 1767, 1771, 1772, 1774, 1860, 1869, 1870, 1884, 1886, 1895, 1896, 1900, 1907, 1909, 1910, 1913, 1914, 1917, 1918, 1921, 1922, 1926, 1927, 1928, 1929, 1932, 1933, 1934, 1939, 1940, 1942, 1943, 1947, 1948, 1950, 1953, 1954, 1957, 1961, 1962, 1966, 1967, 1970, 1974, 1978, 1981, 1987, 1988, 1991, 1997, 1998, 2001, 2002, 2005, 2008, 2009, 2010, 2011, 2014, 2022, 2023, 2025, 2026, 2027, 2029, 2032, 2033, 2036, 2037, 2038, 2039, 2041, 2042, 2043, 2045, 2090, 2092, 2096, 2097, 2100, 2101, 2103, 2105, 2108, 2109, 2112, 2113, 2116, 2118, 2121, 2128, 2129, 2132, 2134, 2135, 2136, 2149, 2150, 2151, 2154, 2155, 2158, 2161, 2170, 2182, 2186, 2193, 2194, 2197, 2200, 2201, 2207, 2212, 2214, 2216, 2217, 2220, 2221, 2222, 2224, 2225, 2227], "excluded_lines": []}, "nemo/collections/asr/modules/rnnt_abstract.py": {"executed_lines": [14, 15, 17, 19, 20, 23, 24, 30, 31, 44, 45, 57, 58, 70, 102, 103, 106, 107, 111, 112, 128, 138, 139, 192, 193, 208, 209, 228, 249, 266, 281, 282, 288, 289, 295, 302, 315, 341], "summary": {"covered_lines": 36, "num_statements": 60, "percent_covered": 60.0, "percent_covered_display": "60", "missing_lines": 24, "excluded_lines": 0}, "missing_lines": [42, 55, 68, 100, 104, 108, 129, 131, 132, 133, 135, 136, 190, 206, 226, 247, 264, 279, 286, 293, 300, 313, 339, 351], "excluded_lines": []}, "nemo/collections/asr/modules/squeezeformer_encoder.py": {"executed_lines": [15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 37, 38, 89, 100, 101, 111, 112, 122, 277, 293, 294, 298, 299, 385, 398, 403, 410, 413, 418, 421, 425, 433, 437, 452, 455, 456], "summary": {"covered_lines": 42, "num_statements": 206, "percent_covered": 20.388349514563107, "percent_covered_display": "20", "missing_lines": 164, "excluded_lines": 0}, "missing_lines": [95, 96, 97, 98, 104, 115, 147, 149, 150, 151, 152, 153, 155, 157, 158, 160, 161, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 184, 193, 195, 197, 199, 200, 201, 202, 203, 204, 206, 207, 209, 210, 211, 218, 219, 220, 221, 225, 227, 228, 229, 242, 245, 246, 247, 249, 250, 251, 254, 255, 259, 263, 265, 266, 267, 269, 270, 271, 272, 275, 281, 282, 283, 284, 285, 287, 288, 290, 291, 295, 296, 300, 302, 303, 305, 306, 310, 312, 313, 315, 317, 319, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 334, 338, 340, 341, 343, 345, 346, 350, 353, 354, 356, 358, 359, 360, 361, 363, 366, 367, 368, 369, 370, 371, 372, 374, 377, 379, 380, 382, 383, 387, 388, 391, 393, 395, 396, 400, 401, 405, 406, 407, 414, 415, 416, 419, 422, 423, 426, 427, 428, 430, 431, 434, 435, 438, 440, 441, 448, 449], "excluded_lines": []}, "nemo/collections/asr/modules/transformer/__init__.py": {"executed_lines": [15, 16, 17, 23, 24, 25, 32, 33], "summary": {"covered_lines": 8, "num_statements": 8, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/modules/transformer/bridge_encoders.py": {"executed_lines": [15, 17, 18, 20, 23, 24, 90, 91, 94, 95, 98, 99, 102, 103, 106], "summary": {"covered_lines": 15, "num_statements": 48, "percent_covered": 31.25, "percent_covered_display": "31", "missing_lines": 33, "excluded_lines": 0}, "missing_lines": [41, 43, 44, 45, 47, 48, 50, 51, 58, 60, 61, 76, 92, 96, 100, 104, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 127, 130, 135, 136, 137, 139, 141], "excluded_lines": []}, "nemo/collections/asr/modules/transformer/decoder_module.py": {"executed_lines": [15, 16, 18, 19, 21, 24, 25, 27, 28, 37, 38, 41, 42, 45, 46, 49, 50, 53, 54, 57, 58], "summary": {"covered_lines": 20, "num_statements": 27, "percent_covered": 74.07407407407408, "percent_covered_display": "74", "missing_lines": 7, "excluded_lines": 0}, "missing_lines": [29, 39, 43, 47, 51, 55, 59], "excluded_lines": []}, "nemo/collections/asr/modules/transformer/encoder_module.py": {"executed_lines": [15, 16, 18, 19, 21, 24, 25, 27, 28, 34, 35, 38, 39], "summary": {"covered_lines": 12, "num_statements": 15, "percent_covered": 80.0, "percent_covered_display": "80", "missing_lines": 3, "excluded_lines": 0}, "missing_lines": [29, 36, 40], "excluded_lines": []}, "nemo/collections/asr/modules/transformer/perceiver_encoders.py": {"executed_lines": [15, 17, 19, 20, 21, 23, 26, 27, 114, 115, 118, 119, 122, 123, 126, 127, 130], "summary": {"covered_lines": 17, "num_statements": 53, "percent_covered": 32.075471698113205, "percent_covered_display": "32", "missing_lines": 36, "excluded_lines": 0}, "missing_lines": [44, 46, 47, 48, 50, 51, 53, 54, 60, 62, 64, 65, 77, 78, 80, 83, 95, 96, 99, 112, 116, 120, 124, 128, 137, 142, 144, 145, 151, 153, 157, 158, 161, 169, 172, 174], "excluded_lines": []}, "nemo/collections/asr/modules/transformer/reduction_encoders.py": {"executed_lines": [15, 17, 19, 21, 24, 26, 28, 85, 97, 98, 101, 102, 105, 106, 109, 110, 113, 114, 117], "summary": {"covered_lines": 19, "num_statements": 55, "percent_covered": 34.54545454545455, "percent_covered_display": "35", "missing_lines": 36, "excluded_lines": 0}, "missing_lines": [46, 49, 50, 51, 52, 54, 55, 57, 58, 64, 65, 68, 81, 83, 90, 91, 92, 93, 95, 99, 103, 107, 111, 115, 124, 125, 128, 129, 132, 134, 137, 139, 140, 141, 144, 148], "excluded_lines": []}, "nemo/collections/asr/modules/transformer/text_generation.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 28, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 28, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 20, 21, 23, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 51, 56, 101], "excluded_lines": []}, "nemo/collections/asr/modules/transformer/transformer.py": {"executed_lines": [15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 37, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 54, 55, 56, 59, 60, 61, 64, 65, 66, 69, 70, 118, 119, 124, 125, 128, 129, 132, 133, 136, 137, 140, 141, 144, 157, 158, 208, 209, 232, 233, 236, 237, 240, 241, 244, 245, 248, 249, 252, 266, 271, 272], "summary": {"covered_lines": 70, "num_statements": 128, "percent_covered": 54.6875, "percent_covered_display": "55", "missing_lines": 58, "excluded_lines": 0}, "missing_lines": [89, 91, 92, 93, 95, 104, 120, 121, 122, 126, 130, 134, 138, 142, 150, 151, 152, 153, 154, 176, 178, 179, 180, 181, 182, 183, 184, 186, 195, 212, 213, 214, 215, 216, 217, 218, 219, 228, 229, 230, 234, 238, 242, 246, 250, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 273, 274, 276], "excluded_lines": []}, "nemo/collections/asr/modules/transformer/transformer_bottleneck.py": {"executed_lines": [15, 16, 18, 19, 20, 21, 26, 27, 28, 30, 38, 39, 41, 42, 43, 44, 47, 48, 49, 51, 54, 55, 56, 59, 61, 63, 129, 211, 212, 220, 221, 228, 229, 232, 233, 236, 237, 257, 258, 260, 318, 330, 331, 334, 335], "summary": {"covered_lines": 45, "num_statements": 88, "percent_covered": 51.13636363636363, "percent_covered_display": "51", "missing_lines": 43, "excluded_lines": 0}, "missing_lines": [88, 107, 108, 111, 134, 135, 136, 137, 153, 154, 170, 171, 188, 189, 207, 209, 213, 214, 218, 222, 223, 226, 230, 234, 238, 239, 241, 243, 244, 245, 247, 251, 252, 254, 279, 297, 300, 323, 324, 326, 328, 332, 336], "excluded_lines": []}, "nemo/collections/asr/modules/transformer/transformer_decoders.py": {"executed_lines": [15, 17, 18, 20, 21, 23, 26, 27, 42, 66, 89, 106, 113, 114, 147, 157, 212], "summary": {"covered_lines": 16, "num_statements": 92, "percent_covered": 17.391304347826086, "percent_covered_display": "17", "missing_lines": 76, "excluded_lines": 0}, "missing_lines": [53, 54, 55, 56, 59, 60, 63, 64, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 87, 94, 95, 96, 98, 99, 100, 102, 103, 104, 107, 108, 110, 127, 129, 130, 132, 134, 144, 145, 148, 149, 150, 151, 152, 154, 155, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 205, 207, 208, 210, 218, 219, 220, 221], "excluded_lines": []}, "nemo/collections/asr/modules/transformer/transformer_encoders.py": {"executed_lines": [15, 17, 18, 20, 21, 23, 26, 27, 42, 62, 80, 95, 102, 103, 137, 144], "summary": {"covered_lines": 15, "num_statements": 66, "percent_covered": 22.727272727272727, "percent_covered_display": "23", "missing_lines": 51, "excluded_lines": 0}, "missing_lines": [53, 54, 55, 56, 59, 60, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 85, 86, 87, 89, 90, 91, 93, 96, 97, 99, 117, 119, 120, 122, 124, 134, 135, 138, 139, 141, 142, 156, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 171, 172, 174], "excluded_lines": []}, "nemo/collections/asr/modules/transformer/transformer_generators.py": {"executed_lines": [15, 17, 19, 21, 30, 31, 50, 71, 113, 144, 173, 190, 203, 216, 217, 230, 231, 244, 250, 279, 280, 297, 298, 302, 405, 406, 457, 458, 462, 471, 514, 545, 548, 554, 699, 703, 720, 737, 738, 751, 752, 773, 798, 799, 803], "summary": {"covered_lines": 43, "num_statements": 392, "percent_covered": 10.96938775510204, "percent_covered_display": "11", "missing_lines": 349, "excluded_lines": 0}, "missing_lines": [62, 63, 64, 65, 66, 67, 68, 69, 94, 95, 97, 98, 107, 110, 111, 119, 120, 124, 125, 126, 127, 129, 131, 134, 135, 136, 138, 139, 140, 142, 147, 148, 152, 153, 155, 156, 158, 162, 163, 164, 165, 168, 169, 171, 176, 177, 180, 181, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 197, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 212, 213, 214, 222, 224, 225, 227, 245, 246, 247, 258, 262, 263, 265, 266, 273, 274, 276, 293, 294, 295, 300, 305, 308, 309, 310, 313, 314, 315, 318, 319, 320, 321, 325, 329, 333, 335, 336, 339, 342, 345, 349, 354, 355, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 373, 374, 375, 383, 384, 385, 388, 389, 392, 393, 394, 397, 399, 400, 402, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 460, 463, 464, 465, 468, 469, 495, 496, 498, 499, 508, 511, 512, 520, 521, 525, 526, 527, 528, 530, 532, 535, 536, 537, 539, 540, 541, 543, 546, 549, 550, 555, 558, 561, 565, 566, 568, 569, 570, 572, 573, 574, 577, 578, 579, 580, 582, 583, 584, 585, 587, 588, 589, 590, 596, 600, 602, 605, 608, 619, 620, 622, 623, 624, 626, 627, 631, 636, 637, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 655, 656, 657, 658, 659, 665, 666, 669, 670, 678, 679, 680, 683, 684, 687, 688, 689, 692, 694, 695, 697, 700, 701, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 743, 745, 746, 748, 767, 768, 769, 770, 771, 783, 786, 787, 789, 792, 794, 796, 801, 807, 810, 813, 814, 817, 818, 819, 820, 821, 824, 825, 826, 827, 831, 832, 836, 840, 842, 845, 848, 851, 855, 860, 861, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 879, 880, 881, 887, 888, 889, 897, 898, 899, 902, 903, 906, 907, 908, 911, 913, 914, 916], "excluded_lines": []}, "nemo/collections/asr/modules/transformer/transformer_modules.py": {"executed_lines": [17, 19, 20, 21, 22, 24, 25, 27, 30, 31, 40, 47, 60, 83, 84, 99, 122, 149, 150, 161, 181, 186, 216, 217, 228, 236, 244, 245, 252, 272], "summary": {"covered_lines": 25, "num_statements": 134, "percent_covered": 18.65671641791045, "percent_covered_display": "19", "missing_lines": 109, "excluded_lines": 0}, "missing_lines": [41, 43, 44, 45, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 64, 67, 71, 74, 75, 80, 108, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 123, 125, 126, 130, 133, 135, 136, 137, 139, 140, 141, 143, 144, 146, 162, 163, 164, 168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 182, 183, 184, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 205, 206, 207, 208, 211, 212, 213, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 258, 260, 261, 262, 264, 268, 269, 270, 280, 282, 283, 284, 285, 287, 288, 290, 291, 293, 295], "excluded_lines": []}, "nemo/collections/asr/modules/transformer/transformer_utils.py": {"executed_lines": [16, 18, 20, 21, 23, 26], "summary": {"covered_lines": 6, "num_statements": 23, "percent_covered": 26.08695652173913, "percent_covered_display": "26", "missing_lines": 17, "excluded_lines": 0}, "missing_lines": [49, 50, 52, 53, 55, 57, 58, 65, 67, 69, 70, 71, 89, 90, 114, 116, 134], "excluded_lines": []}, "nemo/collections/asr/modules/wav2vec_modules.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 147, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 147, "excluded_lines": 0}, "missing_lines": [20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 36, 41, 42, 45, 46, 47, 48, 50, 51, 52, 53, 56, 64, 65, 74, 79, 80, 90, 95, 104, 106, 107, 109, 112, 113, 114, 115, 117, 119, 120, 125, 126, 128, 130, 131, 132, 133, 134, 135, 136, 138, 149, 152, 153, 156, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 176, 179, 180, 181, 182, 184, 185, 187, 189, 190, 193, 194, 196, 199, 201, 203, 205, 206, 207, 208, 211, 214, 246, 247, 250, 251, 259, 261, 262, 263, 264, 266, 267, 269, 270, 272, 273, 283, 288, 289, 299, 304, 307, 310, 311, 313, 314, 316, 317, 319, 321, 323, 325, 326, 327, 330, 331, 332, 333, 335, 336, 337, 339, 341, 342, 345, 347, 350, 351, 352, 353, 354, 355, 357, 358, 359], "excluded_lines": []}, "nemo/collections/asr/parts/__init__.py": {"executed_lines": [1], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/parts/context_biasing/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 3, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 3, "excluded_lines": 0}, "missing_lines": [15, 19, 20], "excluded_lines": []}, "nemo/collections/asr/parts/context_biasing/context_biasing_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 162, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 162, "excluded_lines": 0}, "missing_lines": [16, 17, 19, 20, 22, 23, 24, 25, 28, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 82, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 122, 123, 124, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 140, 141, 143, 146, 163, 166, 167, 168, 169, 170, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 267], "excluded_lines": []}, "nemo/collections/asr/parts/context_biasing/context_graph_ctc.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 101, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 101, "excluded_lines": 0}, "missing_lines": [34, 35, 38, 39, 41, 42, 43, 46, 49, 62, 63, 64, 66, 68, 71, 77, 85, 86, 87, 89, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 118, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 145, 146, 147, 148, 149, 151, 152, 154, 155, 157, 174, 175, 177, 185, 186, 188, 192, 198, 204, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 235, 236, 237, 239, 240, 242], "excluded_lines": []}, "nemo/collections/asr/parts/context_biasing/ctc_based_word_spotter.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 165, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 165, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 20, 23, 24, 35, 36, 37, 38, 41, 42, 53, 54, 55, 56, 59, 70, 71, 72, 73, 74, 77, 87, 88, 90, 91, 92, 94, 95, 97, 98, 100, 102, 103, 104, 107, 121, 122, 123, 124, 125, 128, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 144, 146, 149, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 213, 216, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 254, 255, 256, 257, 258, 260, 261, 263, 266, 300, 301, 302, 303, 306, 307, 309, 311, 312, 313, 315, 316, 317, 319, 320, 322, 324, 326, 327, 328, 330, 331, 332, 333, 336, 338, 339, 340, 344, 345, 346, 347, 348, 350, 351, 353, 354, 357, 360, 363, 365], "excluded_lines": []}, "nemo/collections/asr/parts/features.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 2, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [36, 39], "excluded_lines": []}, "nemo/collections/asr/parts/k2/__init__.py": {"executed_lines": [1], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/parts/k2/classes.py": {"executed_lines": [15, 16, 17, 19, 20, 22, 25, 26, 27, 30, 31, 32, 33, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 61, 88, 147], "summary": {"covered_lines": 26, "num_statements": 63, "percent_covered": 41.26984126984127, "percent_covered_display": "41", "missing_lines": 37, "excluded_lines": 0}, "missing_lines": [68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 83, 84, 86, 96, 97, 98, 100, 102, 105, 106, 109, 111, 113, 123, 124, 125, 126, 127, 131, 132, 133, 134, 136, 166, 167, 170], "excluded_lines": []}, "nemo/collections/asr/parts/k2/grad_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 41, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 41, "excluded_lines": 0}, "missing_lines": [15, 17, 20, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 48, 49, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 67, 72, 73, 74, 76, 84, 85, 87, 88, 90, 91, 93], "excluded_lines": []}, "nemo/collections/asr/parts/k2/graph_compilers.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 67, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 67, "excluded_lines": 0}, "missing_lines": [29, 31, 33, 35, 38, 45, 53, 54, 55, 57, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 76, 77, 80, 85, 94, 95, 96, 98, 99, 101, 104, 105, 108, 109, 110, 111, 114, 120, 129, 130, 131, 133, 135, 136, 137, 138, 140, 143, 144, 145, 148, 149, 150, 153, 166, 175, 176, 177, 178, 180, 181, 183, 184, 186, 191], "excluded_lines": []}, "nemo/collections/asr/parts/k2/graph_decoders.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 112, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 112, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 21, 22, 23, 24, 27, 37, 38, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 88, 89, 91, 92, 93, 95, 96, 105, 106, 111, 112, 114, 115, 116, 117, 120, 121, 123, 126, 128, 136, 137, 145, 155, 158, 159, 160, 169, 180, 191, 194, 196, 199, 202, 211, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 237, 245, 247, 255, 257, 267, 269, 280, 294, 306, 309, 310, 311, 312, 313, 314, 316, 321, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338], "excluded_lines": []}, "nemo/collections/asr/parts/k2/graph_transducer.py": {"executed_lines": [15, 16, 17, 18, 19, 21, 22], "summary": {"covered_lines": 7, "num_statements": 149, "percent_covered": 4.697986577181208, "percent_covered_display": "5", "missing_lines": 142, "excluded_lines": 0}, "missing_lines": [25, 27, 28, 29, 32, 44, 58, 59, 60, 61, 62, 64, 65, 77, 79, 80, 93, 95, 96, 109, 111, 124, 125, 126, 127, 128, 129, 131, 146, 147, 148, 149, 161, 165, 171, 174, 175, 176, 178, 190, 191, 192, 198, 204, 207, 214, 234, 240, 242, 267, 268, 269, 273, 274, 276, 277, 278, 281, 282, 283, 285, 286, 288, 289, 290, 291, 293, 321, 323, 324, 326, 328, 329, 330, 335, 338, 341, 342, 344, 345, 346, 348, 349, 361, 362, 363, 364, 365, 366, 367, 368, 369, 375, 377, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 406, 411, 412, 413, 414, 415, 418, 419, 422, 423, 425, 426, 430, 431, 435, 436, 437, 438, 440, 441, 442, 444, 461, 464, 465, 467, 468, 469, 470, 471, 474, 477, 479, 481, 482, 483], "excluded_lines": []}, "nemo/collections/asr/parts/k2/loss_mixins.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 89, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 89, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 20, 21, 29, 32, 41, 50, 51, 53, 60, 66, 72, 76, 78, 84, 85, 87, 88, 90, 91, 92, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 108, 117, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 147, 148, 149, 150, 159, 160, 161, 162, 163, 164, 165, 169, 173, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 200, 201, 205, 209, 210, 211, 214, 217, 218, 220, 222, 223, 225, 226, 227, 228, 230, 233], "excluded_lines": []}, "nemo/collections/asr/parts/k2/map_loss.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 102, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 102, "excluded_lines": 0}, "missing_lines": [29, 30, 32, 33, 35, 36, 37, 38, 44, 45, 48, 59, 60, 73, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 99, 100, 101, 103, 105, 106, 108, 110, 118, 119, 121, 122, 124, 125, 127, 133, 136, 139, 141, 144, 147, 149, 157, 158, 159, 161, 162, 163, 170, 172, 180, 181, 183, 184, 186, 192, 202, 203, 205, 206, 208, 210, 220, 221, 225, 226, 227, 228, 230, 231, 233, 238, 239, 245, 246, 252, 254, 255, 257, 258, 259, 265, 266, 267, 270, 282, 295, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318], "excluded_lines": []}, "nemo/collections/asr/parts/k2/ml_loss.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 64, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 64, "excluded_lines": 0}, "missing_lines": [29, 30, 32, 33, 35, 36, 37, 38, 41, 53, 54, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 87, 90, 91, 92, 94, 95, 96, 97, 99, 101, 107, 108, 110, 111, 112, 113, 114, 116, 123, 125, 128, 129, 132, 143, 152, 160, 165, 174, 185, 193, 194, 195, 196, 197, 198, 199, 200, 201, 209, 216, 218], "excluded_lines": []}, "nemo/collections/asr/parts/k2/topologies.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 124, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 124, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 20, 23, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 82, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 179, 180, 181, 182, 184, 185, 186, 188, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211], "excluded_lines": []}, "nemo/collections/asr/parts/k2/utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 146, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 146, "excluded_lines": 0}, "missing_lines": [29, 30, 31, 32, 34, 36, 37, 40, 44, 48, 51, 56, 57, 58, 61, 64, 65, 66, 67, 68, 69, 72, 77, 78, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 124, 127, 128, 129, 130, 131, 132, 135, 138, 139, 142, 150, 152, 153, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 170, 174, 177, 180, 187, 190, 191, 192, 193, 194, 197, 201, 202, 203, 204, 205, 206, 207, 210, 215, 217, 218, 219, 222, 226, 227, 228, 230, 231, 232, 233, 234, 237, 240, 241, 242, 243, 244, 247, 261, 262, 263, 264, 265, 266, 269, 282, 283, 284, 285, 286, 293, 294, 295, 296, 297, 300, 301, 308, 314, 315, 316, 317, 318, 319, 320, 321, 326], "excluded_lines": []}, "nemo/collections/asr/parts/k2/w_transducer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 130, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 130, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 21, 22, 23, 26, 35, 36, 37, 39, 64, 71, 72, 74, 101, 102, 103, 104, 105, 108, 109, 111, 113, 114, 115, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 169, 170, 171, 172, 174, 175, 176, 177, 179, 182, 183, 184, 190, 192, 193, 194, 195, 200, 203, 204, 207, 208, 210, 211, 212, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 245, 251, 252, 253, 254, 255, 257, 258, 264, 269, 270, 271, 272, 273, 276, 277, 280, 281, 283, 284, 288, 289, 291, 292, 298, 299, 300, 301, 303, 304, 305, 307, 316, 319, 320, 322, 323, 324, 325, 326, 329, 330, 333, 335, 336, 338, 339, 340], "excluded_lines": []}, "nemo/collections/asr/parts/mixins/__init__.py": {"executed_lines": [15, 16, 17, 23], "summary": {"covered_lines": 4, "num_statements": 4, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/parts/mixins/asr_adapter_mixins.py": {"executed_lines": [15, 17, 19, 20, 23, 24, 47, 70, 109, 131, 181, 204, 250, 283, 292, 293], "summary": {"covered_lines": 15, "num_statements": 103, "percent_covered": 14.563106796116505, "percent_covered_display": "15", "missing_lines": 88, "excluded_lines": 0}, "missing_lines": [54, 57, 58, 60, 61, 63, 64, 67, 68, 79, 82, 85, 86, 88, 91, 92, 94, 96, 99, 101, 105, 107, 117, 120, 121, 123, 124, 126, 127, 129, 149, 152, 153, 155, 158, 159, 161, 163, 166, 167, 168, 171, 172, 173, 177, 178, 179, 188, 191, 192, 194, 195, 197, 198, 200, 202, 209, 212, 213, 214, 215, 220, 221, 227, 228, 229, 230, 235, 236, 242, 243, 245, 246, 266, 269, 270, 272, 275, 277, 278, 279, 281, 287, 288, 289, 290, 294, 295], "excluded_lines": []}, "nemo/collections/asr/parts/mixins/interctc_mixin.py": {"executed_lines": [14, 16, 18, 19, 22, 23, 46, 75, 102, 110, 123, 131, 136, 152, 175, 214], "summary": {"covered_lines": 15, "num_statements": 104, "percent_covered": 14.423076923076923, "percent_covered_display": "14", "missing_lines": 89, "excluded_lines": 0}, "missing_lines": [47, 48, 49, 50, 51, 58, 60, 61, 65, 68, 69, 71, 89, 90, 91, 95, 96, 97, 98, 100, 106, 107, 108, 116, 117, 121, 125, 126, 133, 134, 138, 139, 140, 141, 144, 147, 150, 160, 161, 163, 164, 165, 167, 168, 169, 170, 172, 173, 180, 181, 185, 186, 187, 188, 189, 190, 194, 195, 196, 197, 198, 199, 200, 205, 206, 209, 212, 249, 250, 251, 252, 253, 255, 256, 258, 259, 261, 266, 267, 273, 274, 275, 276, 282, 283, 284, 285, 286, 294], "excluded_lines": []}, "nemo/collections/asr/parts/mixins/mixins.py": {"executed_lines": [15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 54, 56, 65, 178, 227, 336, 362, 377, 398, 469, 470, 478, 496, 541, 569, 707, 708, 820, 848, 849, 850], "summary": {"covered_lines": 35, "num_statements": 354, "percent_covered": 9.887005649717514, "percent_covered_display": "10", "missing_lines": 319, "excluded_lines": 0}, "missing_lines": [57, 58, 59, 60, 61, 63, 67, 68, 70, 71, 72, 74, 77, 80, 81, 82, 84, 85, 86, 88, 89, 94, 96, 97, 99, 100, 101, 103, 104, 106, 107, 110, 112, 113, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 137, 138, 141, 142, 143, 148, 149, 151, 152, 153, 156, 157, 159, 172, 180, 181, 183, 186, 188, 190, 193, 194, 196, 198, 201, 202, 204, 206, 207, 209, 210, 211, 212, 215, 219, 221, 225, 229, 230, 232, 233, 238, 239, 240, 242, 244, 245, 247, 249, 253, 254, 255, 256, 259, 261, 262, 264, 266, 270, 271, 272, 274, 276, 281, 283, 285, 286, 287, 288, 289, 292, 293, 296, 297, 298, 303, 304, 306, 308, 313, 314, 316, 317, 330, 334, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 358, 359, 360, 367, 368, 369, 372, 373, 374, 375, 384, 385, 390, 391, 392, 393, 394, 396, 409, 410, 412, 414, 416, 418, 419, 421, 422, 423, 425, 426, 428, 429, 434, 435, 436, 437, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 457, 459, 460, 461, 463, 464, 466, 492, 521, 522, 524, 525, 529, 531, 532, 533, 535, 536, 537, 538, 539, 553, 554, 558, 560, 561, 562, 564, 565, 566, 567, 609, 610, 612, 613, 615, 616, 620, 621, 623, 639, 642, 643, 644, 646, 647, 649, 650, 655, 656, 657, 659, 660, 661, 662, 664, 665, 666, 667, 669, 670, 673, 674, 679, 680, 682, 688, 690, 691, 693, 701, 702, 703, 705, 728, 729, 731, 732, 737, 738, 740, 741, 743, 745, 746, 748, 749, 750, 751, 754, 755, 756, 757, 758, 760, 761, 762, 763, 776, 777, 787, 789, 798, 800, 801, 802, 804, 805, 807, 809, 810, 812, 813, 815, 816, 817, 818, 834, 836, 837, 838, 841, 842, 843, 844, 845, 859], "excluded_lines": []}, "nemo/collections/asr/parts/mixins/streaming.py": {"executed_lines": [15, 17, 20, 21, 22, 31, 32, 35, 36, 41], "summary": {"covered_lines": 10, "num_statements": 28, "percent_covered": 35.714285714285715, "percent_covered_display": "36", "missing_lines": 18, "excluded_lines": 0}, "missing_lines": [29, 33, 37, 38, 39, 51, 52, 53, 54, 55, 57, 59, 60, 62, 70, 72, 73, 75], "excluded_lines": []}, "nemo/collections/asr/parts/mixins/transcription.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 39, 40, 42, 43, 44, 45, 48, 49, 52, 55, 56, 57, 58, 59, 60, 61, 62, 65, 67, 70, 84, 106, 107, 121, 127, 130, 158, 159, 186, 187, 336, 398, 402, 457, 509, 552, 553, 569, 570, 584, 585, 600, 601, 617, 637, 681, 682, 697, 741, 761, 780, 781], "summary": {"covered_lines": 69, "num_statements": 283, "percent_covered": 24.381625441696112, "percent_covered_display": "24", "missing_lines": 214, "excluded_lines": 0}, "missing_lines": [74, 75, 76, 77, 78, 79, 81, 97, 98, 100, 103, 108, 109, 110, 111, 112, 114, 115, 117, 119, 122, 123, 125, 128, 131, 133, 134, 140, 141, 142, 145, 146, 149, 152, 153, 155, 237, 238, 248, 249, 254, 255, 257, 260, 261, 264, 265, 271, 273, 274, 276, 278, 280, 281, 284, 285, 286, 289, 290, 291, 294, 296, 298, 299, 301, 302, 304, 306, 307, 310, 311, 312, 315, 316, 321, 322, 325, 331, 332, 334, 341, 342, 344, 345, 351, 352, 355, 356, 361, 363, 365, 368, 369, 371, 373, 374, 376, 378, 380, 383, 384, 387, 390, 392, 396, 410, 411, 413, 414, 416, 417, 419, 420, 421, 423, 424, 427, 429, 430, 431, 434, 435, 438, 441, 442, 443, 444, 446, 447, 448, 451, 454, 455, 469, 470, 471, 473, 476, 477, 479, 480, 482, 483, 486, 487, 490, 491, 496, 497, 499, 500, 503, 525, 526, 527, 528, 529, 531, 532, 537, 546, 547, 548, 550, 567, 582, 598, 615, 625, 627, 628, 629, 631, 632, 634, 635, 650, 653, 656, 657, 658, 659, 660, 662, 668, 670, 712, 713, 714, 715, 716, 717, 718, 720, 725, 735, 736, 737, 739, 749, 752, 753, 755, 756, 758, 759, 768, 771, 772, 774, 775, 777, 778, 788], "excluded_lines": []}, "nemo/collections/asr/parts/numba/__init__.py": {"executed_lines": [15], "summary": {"covered_lines": 1, "num_statements": 1, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/parts/numba/rnnt_loss/__init__.py": {"executed_lines": [15, 16], "summary": {"covered_lines": 2, "num_statements": 2, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/parts/numba/rnnt_loss/rnnt.py": {"executed_lines": [29, 31, 32, 34, 35, 36, 39, 138, 239, 366], "summary": {"covered_lines": 10, "num_statements": 125, "percent_covered": 8.0, "percent_covered_display": "8", "missing_lines": 115, "excluded_lines": 0}, "missing_lines": [70, 71, 73, 74, 75, 76, 78, 79, 81, 83, 84, 85, 87, 90, 91, 93, 106, 107, 115, 116, 120, 122, 131, 132, 134, 135, 168, 169, 170, 171, 173, 174, 176, 178, 179, 181, 183, 184, 185, 188, 189, 192, 194, 207, 208, 216, 217, 221, 223, 232, 233, 235, 236, 280, 281, 282, 283, 285, 286, 288, 290, 291, 293, 295, 297, 298, 301, 302, 304, 306, 307, 310, 311, 313, 330, 331, 340, 341, 345, 346, 348, 359, 360, 362, 363, 404, 405, 406, 407, 409, 410, 412, 414, 415, 417, 419, 421, 422, 425, 426, 428, 432, 433, 436, 438, 454, 455, 463, 464, 468, 470, 479, 480, 482, 483], "excluded_lines": []}, "nemo/collections/asr/parts/numba/rnnt_loss/rnnt_numpy.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 151, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 151, "excluded_lines": 0}, "missing_lines": [30, 31, 32, 33, 36, 37, 38, 41, 42, 43, 46, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 67, 68, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 93, 94, 95, 96, 97, 99, 100, 101, 103, 104, 105, 106, 112, 125, 126, 128, 129, 131, 132, 133, 134, 135, 136, 137, 139, 140, 143, 156, 157, 158, 160, 161, 163, 164, 166, 167, 168, 169, 170, 172, 175, 190, 191, 192, 195, 196, 199, 200, 202, 204, 205, 206, 208, 211, 228, 244, 245, 248, 264, 265, 266, 267, 270, 285, 286, 287, 288, 289, 291, 292, 294, 297, 298, 299, 302, 303, 304, 305, 314, 315, 317, 318, 320, 321, 322, 323, 326, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 348, 349, 351, 352, 354, 356, 359, 360, 362, 364, 365, 366, 367, 369], "excluded_lines": []}, "nemo/collections/asr/parts/numba/rnnt_loss/rnnt_pytorch.py": {"executed_lines": [30, 31, 32, 34, 35, 37, 40, 41, 42, 87, 88, 94, 95, 99, 100, 178, 179, 198, 199, 203, 204, 258, 259, 265, 296, 344, 390, 391, 403, 411, 440, 441, 459, 477, 511, 512, 532, 552, 584, 589, 594, 599], "summary": {"covered_lines": 37, "num_statements": 186, "percent_covered": 19.892473118279568, "percent_covered_display": "20", "missing_lines": 149, "excluded_lines": 0}, "missing_lines": [51, 53, 54, 55, 57, 58, 59, 60, 62, 75, 76, 77, 78, 80, 81, 83, 85, 89, 90, 91, 130, 132, 133, 134, 136, 137, 139, 141, 142, 143, 144, 146, 164, 165, 166, 167, 169, 170, 171, 173, 174, 176, 180, 181, 182, 216, 218, 219, 220, 222, 223, 225, 227, 228, 229, 231, 246, 247, 248, 249, 251, 252, 254, 256, 260, 261, 262, 280, 286, 287, 291, 293, 326, 332, 333, 337, 339, 374, 380, 381, 385, 387, 404, 405, 406, 407, 408, 409, 418, 420, 421, 428, 429, 433, 435, 468, 469, 470, 471, 472, 473, 474, 475, 484, 490, 491, 495, 497, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 565, 566, 568, 585, 586, 590, 591, 595, 596, 601, 602, 603, 604, 605, 606, 607, 609, 610, 615, 616, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632], "excluded_lines": []}, "nemo/collections/asr/parts/numba/rnnt_loss/utils/__init__.py": {"executed_lines": [1], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/parts/numba/rnnt_loss/utils/cpu_utils/__init__.py": {"executed_lines": [1], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/parts/numba/rnnt_loss/utils/cpu_utils/cpu_rnnt.py": {"executed_lines": [29, 30, 31, 33, 34, 35, 37, 40, 56, 57, 76, 88, 89, 128, 141, 142, 143, 153, 154, 164, 165, 214, 246, 278, 347, 384], "summary": {"covered_lines": 26, "num_statements": 157, "percent_covered": 16.56050955414013, "percent_covered_display": "17", "missing_lines": 131, "excluded_lines": 0}, "missing_lines": [44, 45, 47, 48, 50, 51, 53, 69, 70, 71, 72, 73, 74, 78, 79, 82, 83, 85, 113, 115, 116, 118, 119, 121, 122, 124, 126, 132, 133, 134, 135, 137, 138, 144, 145, 149, 150, 151, 157, 158, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 224, 225, 227, 229, 231, 232, 237, 238, 240, 241, 242, 244, 259, 261, 262, 263, 264, 265, 267, 268, 270, 271, 272, 273, 275, 276, 307, 308, 310, 311, 313, 314, 315, 316, 318, 319, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 334, 335, 336, 341, 345, 357, 360, 363, 365, 366, 367, 368, 369, 370, 372, 382, 393, 396, 399, 401, 402, 403, 404, 405, 406, 408, 409, 420, 422], "excluded_lines": []}, "nemo/collections/asr/parts/numba/rnnt_loss/utils/cuda_utils/__init__.py": {"executed_lines": [1], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/parts/numba/rnnt_loss/utils/cuda_utils/gpu_rnnt.py": {"executed_lines": [29, 30, 31, 33, 34, 35, 37, 38, 41, 42, 93, 125, 233, 254, 267, 296, 297, 344, 463, 484, 497, 512, 513, 563, 745, 772, 795], "summary": {"covered_lines": 27, "num_statements": 147, "percent_covered": 18.367346938775512, "percent_covered_display": "18", "missing_lines": 120, "excluded_lines": 0}, "missing_lines": [72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 107, 116, 153, 155, 156, 158, 161, 164, 179, 181, 197, 198, 199, 224, 225, 226, 229, 231, 242, 250, 252, 262, 263, 265, 275, 278, 279, 282, 283, 284, 285, 288, 289, 290, 291, 293, 334, 337, 341, 342, 372, 374, 375, 377, 380, 383, 401, 403, 422, 423, 424, 454, 455, 456, 459, 461, 472, 480, 482, 492, 493, 495, 505, 507, 509, 552, 555, 559, 560, 561, 595, 597, 598, 599, 601, 604, 606, 607, 609, 625, 644, 646, 647, 663, 664, 665, 684, 704, 705, 706, 736, 737, 738, 741, 743, 756, 766, 768, 781, 789, 791, 803, 805, 807], "excluded_lines": []}, "nemo/collections/asr/parts/numba/rnnt_loss/utils/cuda_utils/gpu_rnnt_kernel.py": {"executed_lines": [29, 31, 32, 34, 36, 38, 41, 42, 67, 68, 73, 74, 175, 176, 272, 273, 410, 411, 569, 570, 719, 720, 888, 889, 1064, 1065, 1217, 1218], "summary": {"covered_lines": 28, "num_statements": 347, "percent_covered": 8.069164265129682, "percent_covered_display": "8", "missing_lines": 319, "excluded_lines": 0}, "missing_lines": [63, 64, 69, 70, 117, 118, 119, 120, 122, 123, 128, 129, 132, 136, 137, 139, 141, 142, 145, 147, 148, 153, 154, 157, 161, 164, 168, 169, 172, 219, 220, 221, 222, 224, 225, 230, 231, 234, 238, 239, 241, 243, 244, 247, 248, 250, 253, 255, 258, 261, 264, 268, 269, 326, 327, 328, 331, 332, 333, 334, 337, 338, 339, 343, 351, 354, 356, 363, 364, 372, 375, 379, 380, 384, 385, 390, 393, 396, 399, 400, 401, 402, 403, 407, 460, 461, 462, 463, 465, 466, 469, 470, 473, 479, 480, 482, 484, 485, 492, 493, 494, 503, 505, 506, 513, 514, 519, 525, 528, 529, 533, 540, 545, 549, 550, 557, 558, 559, 564, 566, 619, 620, 621, 622, 624, 625, 631, 632, 637, 641, 642, 644, 646, 649, 656, 657, 660, 666, 669, 674, 675, 677, 682, 684, 689, 694, 697, 698, 701, 706, 711, 715, 716, 779, 780, 781, 784, 785, 786, 787, 790, 791, 792, 796, 804, 807, 809, 820, 821, 830, 833, 837, 838, 845, 846, 847, 851, 852, 857, 858, 859, 866, 869, 874, 877, 878, 879, 880, 881, 885, 937, 938, 939, 940, 942, 943, 948, 949, 952, 956, 957, 959, 961, 962, 964, 965, 966, 978, 981, 983, 984, 996, 997, 998, 999, 1000, 1012, 1014, 1015, 1016, 1017, 1029, 1032, 1035, 1039, 1041, 1049, 1050, 1051, 1057, 1059, 1061, 1113, 1114, 1115, 1116, 1118, 1119, 1124, 1125, 1132, 1136, 1137, 1139, 1141, 1142, 1143, 1148, 1149, 1160, 1161, 1172, 1173, 1175, 1182, 1184, 1185, 1186, 1187, 1195, 1196, 1197, 1198, 1207, 1210, 1213, 1214, 1278, 1279, 1280, 1283, 1284, 1285, 1286, 1289, 1290, 1291, 1296, 1297, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1310, 1311, 1313, 1314, 1323, 1326, 1328, 1335, 1336, 1338, 1339, 1340, 1350, 1353, 1357, 1358, 1359, 1360, 1366, 1367, 1368, 1369, 1381, 1384, 1385, 1386, 1397, 1400, 1401, 1402, 1403, 1404, 1408], "excluded_lines": []}, "nemo/collections/asr/parts/numba/rnnt_loss/utils/cuda_utils/reduce.py": {"executed_lines": [29, 30, 32, 33, 35, 37, 38, 40, 43, 44, 48, 49, 52, 53, 57, 58, 61, 62, 121, 122, 186, 187, 251, 299, 332], "summary": {"covered_lines": 23, "num_statements": 99, "percent_covered": 23.232323232323232, "percent_covered_display": "23", "missing_lines": 76, "excluded_lines": 0}, "missing_lines": [86, 88, 91, 92, 93, 95, 96, 98, 100, 102, 103, 105, 106, 108, 110, 111, 112, 114, 116, 118, 145, 146, 147, 150, 152, 155, 156, 157, 158, 160, 162, 164, 165, 167, 168, 169, 170, 171, 172, 174, 176, 179, 182, 183, 210, 211, 212, 215, 217, 220, 221, 222, 223, 225, 227, 229, 230, 232, 233, 234, 235, 236, 237, 239, 241, 244, 247, 248, 286, 287, 289, 292, 294, 296, 320, 353], "excluded_lines": []}, "nemo/collections/asr/parts/numba/rnnt_loss/utils/global_constants.py": {"executed_lines": [30, 32, 33, 36, 37, 38, 41, 42, 43, 45, 50, 55, 57, 60, 62, 66, 67, 68], "summary": {"covered_lines": 18, "num_statements": 19, "percent_covered": 94.73684210526316, "percent_covered_display": "95", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [52], "excluded_lines": []}, "nemo/collections/asr/parts/numba/rnnt_loss/utils/rnnt_helper.py": {"executed_lines": [30, 31, 33, 34, 35, 37, 39, 42, 43, 56, 57, 61, 62, 69, 70, 74, 75, 79, 80, 84, 85, 89, 90, 101, 102, 106, 107, 119, 145], "summary": {"covered_lines": 29, "num_statements": 72, "percent_covered": 40.27777777777778, "percent_covered_display": "40", "missing_lines": 43, "excluded_lines": 0}, "missing_lines": [44, 45, 47, 48, 50, 51, 53, 58, 63, 64, 66, 71, 76, 81, 86, 91, 92, 94, 95, 97, 98, 103, 108, 109, 110, 111, 113, 114, 115, 116, 123, 124, 127, 130, 132, 134, 137, 139, 141, 142, 146, 147, 148], "excluded_lines": []}, "nemo/collections/asr/parts/numba/spec_augment/__init__.py": {"executed_lines": [15], "summary": {"covered_lines": 1, "num_statements": 1, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/parts/numba/spec_augment/spec_aug_numba.py": {"executed_lines": [15, 16, 17, 19, 20, 21, 23, 26, 27, 98, 122, 181, 182, 204, 205, 213, 214, 219, 248, 249, 250], "summary": {"covered_lines": 20, "num_statements": 104, "percent_covered": 19.23076923076923, "percent_covered_display": "19", "missing_lines": 84, "excluded_lines": 0}, "missing_lines": [50, 51, 52, 53, 56, 58, 60, 63, 65, 67, 68, 71, 72, 75, 77, 79, 82, 84, 86, 87, 90, 94, 95, 110, 111, 113, 114, 116, 117, 119, 151, 152, 154, 157, 159, 162, 163, 164, 165, 166, 169, 172, 175, 176, 178, 208, 217, 222, 225, 227, 228, 230, 231, 233, 236, 237, 238, 240, 241, 243, 244, 246, 251, 252, 255, 256, 259, 261, 262, 264, 265, 266, 268, 274, 275, 276, 277, 282, 286, 287, 290, 291, 293, 305], "excluded_lines": []}, "nemo/collections/asr/parts/preprocessing/__init__.py": {"executed_lines": [15, 16, 17, 36], "summary": {"covered_lines": 4, "num_statements": 4, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/parts/preprocessing/feature_loader.py": {"executed_lines": [14, 16, 17, 20, 21, 25, 33, 47, 48, 62, 67], "summary": {"covered_lines": 10, "num_statements": 31, "percent_covered": 32.25806451612903, "percent_covered_display": "32", "missing_lines": 21, "excluded_lines": 0}, "missing_lines": [31, 38, 39, 40, 43, 44, 52, 53, 54, 55, 56, 57, 59, 60, 63, 64, 65, 68, 70, 71, 73], "excluded_lines": []}, "nemo/collections/asr/parts/preprocessing/features.py": {"executed_lines": [35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 48, 49, 51, 56, 59, 98, 117, 130, 131, 163, 164, 169, 172, 203, 207, 208, 220, 221, 224, 225, 229, 230, 234, 375, 390, 396, 397, 400, 474, 475, 482, 564, 565, 569, 574, 580, 586, 590, 597, 609, 615, 647], "summary": {"covered_lines": 50, "num_statements": 296, "percent_covered": 16.89189189189189, "percent_covered_display": "17", "missing_lines": 246, "excluded_lines": 0}, "missing_lines": [52, 53, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 95, 110, 111, 112, 113, 114, 124, 125, 126, 127, 150, 152, 153, 155, 156, 158, 159, 160, 165, 166, 167, 170, 186, 201, 204, 205, 209, 210, 212, 214, 215, 217, 222, 226, 264, 265, 266, 271, 272, 276, 277, 285, 289, 291, 292, 293, 294, 296, 297, 298, 305, 306, 307, 308, 318, 319, 320, 321, 322, 323, 324, 325, 327, 333, 336, 337, 338, 339, 340, 344, 345, 351, 352, 353, 354, 355, 356, 357, 358, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 378, 379, 380, 382, 388, 392, 393, 394, 398, 401, 403, 404, 409, 410, 413, 414, 417, 418, 422, 423, 424, 426, 427, 428, 429, 432, 433, 436, 437, 440, 442, 443, 444, 445, 446, 448, 451, 452, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 513, 514, 515, 518, 519, 520, 525, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 567, 570, 571, 572, 575, 576, 577, 578, 581, 582, 583, 584, 587, 588, 592, 593, 594, 595, 598, 599, 600, 601, 602, 603, 605, 606, 607, 611, 612, 613, 617, 618, 620, 621, 623, 624, 626, 627, 628, 630, 631, 640, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655], "excluded_lines": []}, "nemo/collections/asr/parts/preprocessing/perturb.py": {"executed_lines": [35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 55, 56, 57, 58, 65, 66, 68, 73, 91, 92, 95, 99, 100, 130, 148, 151, 168, 169, 201, 225, 228, 276, 277, 289, 306, 315, 316, 325, 330, 335, 336, 348, 372, 404, 405, 416, 421, 436, 437, 451, 480, 481, 484, 489, 500, 543, 591, 592, 610, 670, 671, 674, 695, 711, 732, 744, 763, 808, 809, 818, 823, 829, 830, 861, 930, 960, 961, 970, 981, 1020, 1021, 1035, 1043, 1057, 1073, 1082, 1083, 1087, 1093, 1099, 1100, 1111, 1239, 1240, 1257, 1286, 1289, 1320], "summary": {"covered_lines": 91, "num_statements": 550, "percent_covered": 16.545454545454547, "percent_covered_display": "17", "missing_lines": 459, "excluded_lines": 0}, "missing_lines": [59, 60, 62, 69, 70, 74, 75, 76, 77, 79, 80, 83, 84, 85, 86, 88, 93, 96, 132, 133, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 149, 153, 154, 156, 159, 160, 162, 163, 203, 204, 205, 207, 208, 209, 210, 211, 212, 215, 216, 219, 220, 222, 223, 226, 230, 231, 233, 236, 237, 242, 243, 244, 245, 248, 249, 250, 252, 253, 256, 259, 260, 263, 266, 269, 273, 298, 299, 300, 301, 303, 304, 307, 308, 309, 310, 312, 326, 327, 328, 331, 332, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 369, 370, 373, 378, 380, 381, 383, 386, 389, 392, 394, 395, 398, 401, 417, 418, 419, 422, 423, 425, 426, 428, 429, 430, 431, 432, 433, 462, 463, 464, 465, 466, 468, 469, 470, 471, 473, 474, 476, 477, 478, 482, 485, 495, 498, 508, 509, 513, 514, 518, 519, 520, 522, 523, 525, 526, 529, 530, 531, 534, 536, 537, 538, 541, 553, 554, 558, 559, 563, 564, 565, 567, 568, 570, 571, 573, 575, 576, 577, 578, 579, 580, 582, 584, 585, 587, 588, 627, 629, 630, 631, 632, 633, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 654, 655, 658, 659, 662, 664, 665, 666, 667, 668, 672, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 688, 689, 690, 691, 693, 702, 706, 707, 709, 720, 721, 726, 727, 728, 730, 739, 740, 741, 742, 753, 754, 755, 757, 758, 759, 761, 773, 774, 778, 779, 783, 784, 786, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 801, 803, 805, 819, 820, 821, 824, 825, 826, 885, 886, 887, 888, 889, 895, 896, 897, 898, 899, 900, 901, 903, 904, 911, 912, 913, 914, 915, 916, 917, 919, 920, 928, 931, 933, 934, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 950, 951, 952, 953, 954, 956, 957, 971, 972, 973, 974, 975, 976, 977, 982, 983, 984, 985, 987, 988, 989, 991, 992, 993, 994, 995, 996, 1000, 1001, 1002, 1003, 1004, 1008, 1009, 1010, 1015, 1016, 1017, 1036, 1037, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1053, 1054, 1074, 1075, 1079, 1084, 1085, 1088, 1089, 1090, 1091, 1094, 1095, 1096, 1097, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1191, 1192, 1194, 1195, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1206, 1208, 1209, 1210, 1212, 1213, 1219, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1267, 1269, 1271, 1275, 1276, 1277, 1287, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1314, 1316, 1318, 1321, 1323, 1324, 1325, 1326, 1327, 1328, 1331, 1332, 1333, 1334], "excluded_lines": []}, "nemo/collections/asr/parts/preprocessing/segment.py": {"executed_lines": [36, 37, 38, 39, 41, 42, 43, 45, 46, 49, 50, 51, 52, 57, 58, 61, 62, 70, 124, 136, 140, 161, 162, 177, 178, 295, 296, 376, 377, 446, 447, 450, 451, 454, 455, 461, 462, 465, 466, 469, 470, 476, 477, 480, 483, 494, 514], "summary": {"covered_lines": 46, "num_statements": 219, "percent_covered": 21.004566210045663, "percent_covered_display": "21", "missing_lines": 173, "excluded_lines": 0}, "missing_lines": [53, 54, 88, 91, 92, 95, 96, 97, 98, 102, 104, 105, 106, 107, 108, 110, 111, 114, 115, 116, 117, 118, 119, 121, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 142, 143, 151, 152, 167, 168, 169, 170, 171, 172, 174, 175, 218, 219, 220, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 254, 255, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 276, 277, 278, 280, 316, 318, 319, 323, 325, 327, 329, 331, 344, 345, 349, 351, 354, 356, 357, 360, 361, 366, 369, 370, 372, 404, 405, 406, 407, 408, 409, 411, 413, 414, 415, 416, 418, 419, 420, 423, 424, 425, 426, 427, 430, 432, 433, 434, 435, 437, 441, 442, 444, 448, 452, 456, 457, 459, 463, 467, 473, 474, 478, 481, 488, 489, 490, 491, 492, 501, 502, 503, 504, 506, 508, 512, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 542], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/__init__.py": {"executed_lines": [1], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/adapters/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [15], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/adapters/multi_head_attention_adapter_module.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 133, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 133, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 22, 23, 24, 27, 32, 56, 59, 60, 61, 63, 66, 69, 71, 73, 89, 90, 91, 92, 94, 95, 98, 99, 100, 105, 119, 127, 129, 132, 133, 135, 138, 139, 140, 142, 143, 144, 145, 146, 147, 150, 153, 155, 170, 171, 172, 174, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 195, 210, 218, 222, 225, 226, 228, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 249, 251, 266, 267, 268, 270, 272, 273, 274, 275, 283, 284, 286, 287, 290, 291, 292, 293, 294, 295, 296, 297, 302, 321, 329, 334, 336, 337, 340, 341, 342, 343, 344, 345, 348, 351, 368, 375, 378, 380, 381, 384, 385, 386, 387, 388, 389, 392], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/batchnorm.py": {"executed_lines": [15, 17, 18, 20, 21, 24, 25, 30, 40, 41, 59, 66, 71, 89], "summary": {"covered_lines": 13, "num_statements": 44, "percent_covered": 29.545454545454547, "percent_covered_display": "30", "missing_lines": 31, "excluded_lines": 0}, "missing_lines": [35, 36, 37, 38, 50, 51, 54, 55, 56, 57, 60, 61, 62, 63, 67, 68, 78, 79, 80, 81, 82, 83, 84, 85, 86, 98, 99, 100, 101, 102, 103], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/causal_convs.py": {"executed_lines": [15, 17, 18, 19, 21, 24, 25, 30, 64, 72, 73, 84, 130, 144], "summary": {"covered_lines": 12, "num_statements": 51, "percent_covered": 23.529411764705884, "percent_covered_display": "24", "missing_lines": 39, "excluded_lines": 0}, "missing_lines": [44, 45, 46, 47, 49, 50, 67, 68, 69, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 116, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 145, 146, 147, 148, 150], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/classifier.py": {"executed_lines": [15, 17, 18, 20, 21, 22, 24, 27, 28, 32, 33, 40, 51, 60, 70, 78, 79], "summary": {"covered_lines": 16, "num_statements": 27, "percent_covered": 59.25925925925926, "percent_covered_display": "59", "missing_lines": 11, "excluded_lines": 0}, "missing_lines": [38, 47, 48, 49, 57, 58, 66, 67, 68, 76, 85], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/conformer_modules.py": {"executed_lines": [16, 17, 18, 20, 21, 22, 27, 28, 29, 30, 31, 33, 36, 37, 61, 141, 216, 275, 276, 285, 340, 372, 385, 386, 390, 399, 406], "summary": {"covered_lines": 24, "num_statements": 178, "percent_covered": 13.48314606741573, "percent_covered_display": "13", "missing_lines": 154, "excluded_lines": 0}, "missing_lines": [79, 81, 82, 83, 86, 87, 90, 91, 99, 100, 102, 103, 111, 112, 124, 125, 129, 135, 136, 138, 139, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 168, 170, 171, 173, 175, 177, 183, 184, 186, 187, 188, 189, 190, 192, 193, 194, 196, 198, 200, 204, 205, 207, 210, 211, 212, 214, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 259, 260, 261, 264, 268, 270, 272, 288, 289, 290, 291, 292, 294, 295, 297, 298, 299, 301, 302, 304, 305, 307, 311, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 335, 336, 341, 342, 345, 346, 348, 350, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 370, 373, 374, 376, 377, 378, 379, 380, 381, 382, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 413], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/ctc_beam_decoding.py": {"executed_lines": [15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 31, 54, 64, 65, 75, 76, 84, 85, 90, 110, 122, 139, 148, 149, 165, 169, 170, 185, 247, 248, 291, 292, 385, 386, 475, 476, 562, 571, 572, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 605, 606], "summary": {"covered_lines": 63, "num_statements": 240, "percent_covered": 26.25, "percent_covered_display": "26", "missing_lines": 177, "excluded_lines": 0}, "missing_lines": [35, 36, 37, 39, 41, 42, 43, 45, 46, 48, 49, 51, 55, 56, 58, 59, 61, 79, 88, 91, 93, 94, 96, 99, 100, 101, 104, 105, 108, 118, 119, 120, 129, 130, 132, 133, 137, 146, 163, 166, 199, 201, 202, 203, 204, 206, 207, 209, 211, 212, 213, 214, 215, 216, 218, 224, 226, 227, 230, 233, 234, 235, 237, 238, 239, 242, 243, 244, 245, 262, 263, 265, 266, 268, 270, 272, 273, 279, 280, 283, 286, 287, 289, 306, 307, 311, 313, 314, 320, 321, 324, 327, 329, 339, 341, 342, 343, 346, 347, 349, 350, 351, 360, 361, 364, 367, 368, 374, 375, 377, 380, 381, 383, 400, 401, 405, 406, 407, 408, 413, 414, 418, 420, 421, 422, 423, 424, 434, 436, 437, 438, 439, 441, 446, 447, 448, 450, 452, 453, 455, 456, 458, 459, 460, 463, 465, 466, 468, 470, 471, 473, 490, 491, 495, 497, 498, 511, 513, 528, 530, 531, 534, 535, 537, 538, 539, 544, 545, 551, 552, 554, 557, 558, 560, 563, 567, 568], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/ctc_decoding.py": {"executed_lines": [15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 29, 32, 37, 38, 191, 315, 418, 495, 539, 540, 552, 553, 566, 649, 650, 686, 687, 735, 736, 823, 824, 827, 828, 834, 835, 838, 839, 845, 846, 849, 850, 857, 858, 1012, 1026, 1040, 1053, 1068, 1069, 1223, 1244, 1260, 1273, 1288, 1289, 1290, 1293, 1296, 1299, 1302, 1305, 1308, 1313, 1318, 1321, 1324, 1325, 1326], "summary": {"covered_lines": 67, "num_statements": 336, "percent_covered": 19.94047619047619, "percent_covered_display": "20", "missing_lines": 269, "excluded_lines": 0}, "missing_lines": [33, 34, 192, 195, 196, 198, 199, 201, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 218, 221, 222, 223, 225, 228, 229, 230, 231, 232, 235, 238, 243, 246, 247, 249, 251, 259, 261, 273, 275, 277, 290, 292, 294, 307, 310, 344, 345, 347, 351, 357, 359, 361, 366, 368, 369, 370, 372, 373, 374, 379, 380, 381, 382, 384, 385, 387, 388, 390, 391, 392, 395, 400, 402, 403, 406, 407, 408, 409, 410, 412, 413, 415, 416, 431, 433, 434, 435, 437, 438, 439, 441, 442, 445, 446, 447, 449, 450, 451, 453, 454, 455, 457, 458, 459, 460, 462, 463, 465, 467, 468, 471, 472, 473, 474, 475, 478, 482, 484, 488, 491, 493, 506, 507, 509, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 550, 564, 584, 587, 588, 591, 592, 595, 596, 604, 605, 608, 609, 610, 612, 615, 616, 617, 618, 620, 628, 629, 631, 634, 637, 638, 641, 642, 645, 647, 665, 669, 670, 673, 674, 677, 683, 684, 704, 706, 707, 708, 709, 710, 711, 712, 714, 716, 717, 720, 722, 725, 726, 727, 729, 730, 731, 733, 758, 759, 760, 762, 764, 765, 769, 772, 773, 782, 783, 784, 788, 794, 796, 797, 804, 806, 811, 812, 819, 821, 825, 829, 831, 832, 836, 840, 842, 843, 847, 851, 853, 854, 1015, 1016, 1017, 1019, 1022, 1023, 1024, 1036, 1050, 1051, 1064, 1065, 1224, 1225, 1227, 1230, 1231, 1232, 1233, 1234, 1236, 1237, 1238, 1240, 1242, 1256, 1270, 1271, 1284, 1285], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/ctc_greedy_decoding.py": {"executed_lines": [15, 16, 18, 19, 21, 22, 23, 24, 25, 28, 48, 58, 59, 109, 110, 121, 122, 127, 146, 147, 206, 207, 236, 237, 265, 269, 270, 271, 272, 273, 274, 276], "summary": {"covered_lines": 31, "num_statements": 105, "percent_covered": 29.523809523809526, "percent_covered_display": "30", "missing_lines": 74, "excluded_lines": 0}, "missing_lines": [30, 31, 32, 34, 36, 37, 39, 40, 42, 43, 45, 49, 50, 52, 53, 55, 116, 125, 135, 137, 138, 140, 141, 144, 161, 162, 165, 170, 173, 175, 177, 182, 184, 185, 191, 192, 194, 196, 197, 198, 199, 202, 204, 212, 213, 215, 216, 218, 220, 221, 222, 224, 226, 228, 229, 231, 232, 234, 242, 243, 245, 246, 248, 249, 250, 252, 253, 255, 256, 258, 259, 263, 266, 278], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/cuda_graph_rnnt_greedy_decoding.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 147, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 147, "excluded_lines": 0}, "missing_lines": [16, 17, 19, 20, 22, 23, 24, 25, 27, 28, 35, 38, 44, 55, 58, 64, 75, 78, 79, 80, 81, 83, 85, 87, 91, 92, 93, 94, 95, 97, 98, 99, 101, 106, 107, 109, 110, 111, 113, 115, 117, 118, 127, 128, 132, 134, 135, 136, 138, 139, 141, 143, 144, 146, 151, 155, 156, 158, 164, 168, 170, 173, 174, 178, 183, 184, 187, 190, 192, 197, 204, 206, 209, 211, 212, 213, 214, 215, 220, 221, 223, 224, 226, 228, 229, 230, 231, 232, 233, 242, 245, 248, 250, 251, 252, 256, 257, 259, 261, 263, 266, 268, 269, 270, 272, 273, 275, 279, 284, 285, 287, 294, 295, 297, 298, 300, 301, 305, 309, 311, 312, 314, 323, 324, 325, 327, 328, 329, 330, 332, 333, 335, 336, 339, 341, 342, 343, 345, 349, 350, 351, 352, 353, 354, 355, 356, 358], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/jasper.py": {"executed_lines": [15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 37, 38, 40, 43, 66, 89, 118, 126, 132, 168, 169, 197, 198, 227, 228, 238, 239, 241, 324, 347, 372, 380, 387, 388, 394, 406, 407, 466, 469, 495, 512, 525, 537, 561, 562, 675, 677, 838, 896, 973, 979, 1070, 1071, 1093, 1128, 1134], "summary": {"covered_lines": 58, "num_statements": 430, "percent_covered": 13.488372093023257, "percent_covered_display": "13", "missing_lines": 372, "excluded_lines": 0}, "missing_lines": [32, 33, 34, 36, 58, 59, 60, 61, 62, 63, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 121, 122, 123, 127, 128, 129, 133, 134, 136, 137, 139, 141, 144, 150, 152, 153, 160, 161, 162, 163, 165, 181, 182, 183, 192, 194, 212, 213, 214, 216, 217, 218, 220, 221, 222, 224, 229, 230, 231, 233, 234, 235, 255, 257, 258, 260, 261, 262, 263, 264, 267, 270, 271, 273, 275, 277, 278, 288, 289, 294, 304, 305, 308, 311, 312, 314, 320, 321, 322, 325, 326, 328, 329, 338, 348, 350, 351, 352, 355, 358, 359, 361, 362, 363, 365, 367, 368, 370, 373, 374, 375, 377, 378, 381, 382, 383, 384, 389, 391, 392, 395, 397, 399, 401, 403, 432, 433, 434, 436, 438, 439, 441, 442, 447, 448, 453, 458, 461, 464, 467, 471, 472, 473, 474, 476, 478, 479, 480, 481, 482, 483, 484, 485, 491, 492, 493, 497, 499, 501, 506, 507, 509, 510, 516, 517, 518, 519, 520, 521, 523, 527, 528, 529, 530, 532, 533, 535, 555, 556, 558, 707, 709, 710, 712, 713, 714, 716, 718, 719, 721, 723, 724, 725, 726, 727, 728, 729, 730, 732, 734, 735, 737, 739, 740, 742, 744, 761, 763, 765, 782, 783, 794, 796, 797, 799, 800, 802, 803, 805, 807, 808, 809, 810, 811, 823, 825, 826, 827, 828, 829, 834, 836, 852, 853, 854, 868, 869, 879, 880, 885, 912, 913, 915, 916, 942, 956, 957, 958, 959, 960, 961, 962, 963, 965, 969, 970, 971, 974, 975, 976, 977, 992, 993, 994, 995, 998, 1000, 1001, 1005, 1006, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1029, 1031, 1034, 1037, 1039, 1041, 1042, 1045, 1047, 1049, 1051, 1052, 1056, 1057, 1058, 1059, 1061, 1062, 1064, 1065, 1067, 1102, 1103, 1105, 1106, 1107, 1110, 1112, 1113, 1114, 1116, 1117, 1118, 1121, 1123, 1124, 1125, 1126, 1129, 1130, 1131, 1132, 1146, 1147, 1149, 1150, 1152, 1153, 1154, 1156, 1157, 1159, 1160, 1161, 1163, 1164, 1166, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/multi_head_attention.py": {"executed_lines": [31, 35, 36, 37, 39, 40, 41, 43, 45, 52, 53, 60, 77, 98, 121, 149, 157, 158, 166, 184, 197, 253, 254, 272, 304, 472, 512, 554, 601, 677, 693, 712, 734, 735, 749, 769, 831, 872, 873, 882, 894, 909, 916, 935, 936, 946, 956, 982, 983, 995, 1000, 1010], "summary": {"covered_lines": 46, "num_statements": 365, "percent_covered": 12.602739726027398, "percent_covered_display": "13", "missing_lines": 319, "excluded_lines": 0}, "missing_lines": [62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 88, 89, 90, 91, 92, 93, 94, 96, 107, 108, 109, 110, 111, 113, 115, 116, 117, 119, 134, 136, 137, 140, 141, 142, 143, 144, 145, 147, 150, 151, 152, 153, 154, 168, 170, 173, 174, 175, 178, 179, 181, 182, 189, 191, 192, 194, 195, 211, 213, 214, 217, 218, 219, 221, 222, 223, 226, 228, 234, 238, 239, 241, 243, 245, 247, 248, 250, 286, 294, 295, 296, 297, 299, 300, 301, 302, 318, 320, 321, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 346, 347, 349, 352, 353, 355, 358, 361, 365, 366, 370, 372, 373, 375, 378, 380, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 396, 399, 400, 405, 414, 425, 428, 430, 431, 434, 436, 446, 448, 450, 451, 463, 465, 467, 468, 470, 486, 489, 492, 495, 500, 503, 505, 535, 538, 540, 543, 546, 547, 550, 552, 576, 578, 581, 582, 585, 587, 592, 597, 599, 630, 631, 633, 634, 636, 637, 638, 639, 642, 643, 646, 647, 650, 652, 656, 659, 661, 664, 665, 667, 671, 673, 689, 690, 691, 704, 705, 706, 707, 708, 709, 710, 724, 727, 728, 730, 731, 732, 737, 738, 739, 740, 741, 743, 744, 746, 747, 759, 760, 761, 762, 763, 765, 766, 767, 783, 784, 785, 787, 790, 791, 793, 794, 800, 804, 812, 817, 818, 820, 821, 824, 827, 829, 842, 843, 845, 849, 853, 857, 858, 859, 860, 863, 866, 869, 884, 885, 886, 887, 888, 889, 890, 892, 895, 896, 897, 901, 902, 903, 904, 905, 907, 911, 912, 913, 914, 925, 926, 927, 928, 929, 930, 931, 932, 948, 949, 950, 953, 954, 966, 967, 972, 973, 974, 975, 976, 977, 978, 979, 996, 997, 998, 1002, 1003, 1005, 1008, 1019, 1020, 1022, 1023, 1024, 1025, 1026], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/multichannel_modules.py": {"executed_lines": [15, 16, 18, 20, 21, 22, 23, 25, 26, 28, 33, 34, 44, 69, 70, 77, 78, 85, 86, 87, 110, 111, 123, 144, 145, 152, 153, 160, 161, 193, 194, 208, 232, 233, 240, 241, 248, 249, 283, 284, 287, 291, 292, 299, 300, 307, 308, 319, 320, 334, 344, 345, 352, 353, 360, 361, 390, 391, 413, 487, 488, 503, 520, 543, 577, 578, 587, 588, 595, 596, 666, 667, 687, 715, 716, 725, 726, 733, 734], "summary": {"covered_lines": 72, "num_statements": 285, "percent_covered": 25.263157894736842, "percent_covered_display": "25", "missing_lines": 213, "excluded_lines": 0}, "missing_lines": [29, 30, 52, 54, 55, 56, 57, 59, 60, 64, 65, 66, 67, 73, 81, 89, 90, 92, 93, 97, 98, 100, 102, 103, 105, 107, 124, 126, 127, 130, 131, 133, 136, 140, 141, 142, 148, 156, 169, 172, 175, 176, 178, 181, 184, 188, 190, 209, 211, 212, 215, 216, 218, 221, 224, 226, 227, 228, 229, 230, 236, 244, 257, 260, 261, 264, 267, 269, 272, 275, 278, 280, 288, 289, 295, 303, 316, 335, 336, 337, 339, 340, 341, 342, 348, 356, 369, 372, 373, 376, 379, 382, 385, 387, 426, 427, 429, 433, 437, 441, 443, 444, 447, 448, 449, 452, 453, 454, 456, 457, 458, 461, 464, 465, 466, 474, 476, 478, 479, 480, 481, 482, 483, 484, 485, 498, 499, 500, 501, 513, 516, 518, 530, 531, 533, 534, 536, 537, 539, 541, 562, 563, 564, 566, 567, 571, 573, 575, 581, 591, 609, 611, 613, 614, 615, 618, 619, 621, 624, 625, 629, 630, 631, 632, 634, 636, 637, 641, 643, 645, 648, 649, 652, 655, 657, 660, 661, 663, 695, 697, 698, 699, 700, 702, 703, 705, 706, 708, 709, 710, 711, 712, 713, 719, 729, 745, 747, 748, 752, 753, 757, 758, 761, 762, 765, 767, 768, 769, 770, 773, 776, 778, 780], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/multitask_beam_decoding.py": {"executed_lines": [15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 29, 49, 59, 60, 79, 82, 83, 92, 96, 97, 103, 104, 117, 118, 123, 165, 166, 214, 215, 216, 217, 218, 219, 220, 221], "summary": {"covered_lines": 34, "num_statements": 81, "percent_covered": 41.97530864197531, "percent_covered_display": "42", "missing_lines": 47, "excluded_lines": 0}, "missing_lines": [33, 34, 35, 37, 38, 39, 41, 43, 44, 46, 50, 51, 53, 54, 56, 69, 71, 72, 73, 75, 76, 77, 80, 90, 93, 110, 121, 135, 143, 144, 157, 158, 159, 184, 185, 192, 193, 194, 195, 196, 197, 199, 203, 204, 205, 209, 211], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/multitask_decoding.py": {"executed_lines": [15, 16, 17, 18, 20, 21, 23, 28, 29, 30, 31, 34, 35, 88, 145, 216, 243, 244, 256, 257, 270, 271, 284, 285, 298, 310, 311, 363, 382, 395, 409, 422, 435, 466, 467, 468, 470, 473, 476, 484, 487], "summary": {"covered_lines": 39, "num_statements": 120, "percent_covered": 32.5, "percent_covered_display": "32", "missing_lines": 81, "excluded_lines": 0}, "missing_lines": [95, 98, 99, 101, 103, 104, 105, 107, 108, 109, 112, 113, 114, 116, 117, 119, 122, 124, 126, 140, 176, 177, 185, 187, 189, 190, 191, 193, 194, 195, 197, 198, 200, 201, 203, 204, 205, 208, 210, 211, 213, 214, 226, 228, 230, 231, 233, 235, 236, 239, 241, 254, 268, 282, 296, 303, 304, 307, 370, 372, 379, 380, 392, 393, 406, 407, 419, 420, 432, 433, 446, 447, 448, 449, 451, 453, 454, 456, 457, 459, 463], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/rnnt_beam_decoding.py": {"executed_lines": [29, 30, 31, 33, 34, 35, 37, 38, 45, 46, 47, 49, 50, 53, 54, 57, 71, 81, 82, 202, 203, 212, 213, 218, 343, 344, 427, 441, 532, 669, 829, 1070, 1372, 1395, 1413, 1460, 1475, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505], "summary": {"covered_lines": 57, "num_statements": 589, "percent_covered": 9.67741935483871, "percent_covered_display": "10", "missing_lines": 532, "excluded_lines": 0}, "missing_lines": [52, 58, 59, 61, 62, 65, 66, 68, 72, 73, 75, 76, 78, 206, 216, 242, 243, 245, 246, 247, 248, 250, 251, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 272, 277, 278, 280, 281, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 307, 308, 310, 311, 313, 314, 318, 320, 321, 322, 324, 326, 327, 328, 329, 331, 335, 337, 338, 339, 340, 341, 362, 363, 366, 367, 368, 369, 370, 372, 374, 376, 377, 379, 380, 389, 391, 392, 395, 396, 397, 399, 400, 403, 406, 411, 414, 415, 417, 418, 420, 421, 422, 423, 425, 436, 437, 439, 454, 456, 458, 461, 464, 468, 469, 470, 471, 472, 474, 477, 479, 480, 482, 483, 486, 487, 488, 491, 492, 494, 495, 497, 499, 501, 502, 504, 506, 509, 510, 511, 512, 515, 516, 519, 520, 521, 524, 527, 528, 530, 544, 545, 546, 549, 550, 553, 554, 556, 559, 562, 563, 565, 566, 567, 568, 569, 571, 572, 574, 575, 576, 577, 579, 580, 581, 584, 587, 588, 591, 592, 595, 598, 604, 606, 615, 616, 619, 620, 623, 624, 625, 627, 630, 631, 632, 636, 641, 642, 646, 647, 649, 650, 652, 653, 656, 657, 658, 659, 662, 663, 664, 665, 667, 681, 682, 685, 686, 689, 690, 692, 695, 696, 701, 710, 713, 714, 715, 717, 718, 721, 722, 724, 727, 728, 731, 734, 737, 738, 740, 742, 744, 747, 757, 758, 759, 763, 766, 768, 772, 773, 776, 779, 789, 790, 791, 795, 798, 800, 802, 805, 806, 807, 810, 812, 814, 817, 818, 819, 822, 823, 824, 825, 827, 842, 844, 845, 848, 849, 852, 853, 855, 858, 860, 861, 862, 868, 869, 871, 874, 885, 886, 888, 889, 892, 894, 895, 896, 901, 902, 904, 905, 906, 908, 909, 910, 912, 913, 915, 917, 918, 919, 920, 922, 925, 927, 930, 932, 934, 938, 941, 944, 946, 949, 951, 952, 954, 956, 959, 964, 965, 968, 971, 972, 974, 977, 986, 987, 990, 995, 999, 1000, 1004, 1005, 1007, 1011, 1014, 1023, 1024, 1027, 1031, 1036, 1037, 1039, 1041, 1044, 1045, 1046, 1049, 1051, 1053, 1055, 1056, 1057, 1058, 1060, 1063, 1064, 1065, 1066, 1068, 1082, 1083, 1085, 1088, 1089, 1094, 1104, 1107, 1108, 1109, 1112, 1113, 1116, 1117, 1118, 1121, 1129, 1131, 1132, 1135, 1147, 1148, 1151, 1152, 1153, 1155, 1156, 1159, 1164, 1167, 1170, 1171, 1174, 1176, 1179, 1180, 1182, 1183, 1186, 1191, 1192, 1193, 1194, 1204, 1205, 1208, 1209, 1213, 1214, 1215, 1218, 1219, 1222, 1223, 1227, 1230, 1234, 1236, 1239, 1240, 1242, 1243, 1247, 1256, 1257, 1260, 1262, 1265, 1266, 1267, 1270, 1274, 1281, 1289, 1298, 1301, 1303, 1305, 1306, 1309, 1314, 1317, 1320, 1322, 1325, 1326, 1327, 1331, 1332, 1335, 1336, 1339, 1340, 1343, 1348, 1351, 1354, 1356, 1359, 1360, 1361, 1364, 1365, 1366, 1367, 1370, 1381, 1383, 1384, 1386, 1387, 1389, 1391, 1393, 1400, 1401, 1402, 1403, 1404, 1405, 1407, 1411, 1421, 1422, 1423, 1424, 1426, 1427, 1428, 1429, 1431, 1432, 1435, 1436, 1440, 1442, 1443, 1444, 1445, 1447, 1448, 1449, 1450, 1454, 1456, 1458, 1465, 1466, 1468, 1469, 1470, 1471, 1473, 1479, 1480, 1482], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/rnnt_decoding.py": {"executed_lines": [15, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 33, 34, 196, 439, 523, 573, 652, 653, 665, 666, 679, 680, 693, 694, 707, 733, 826, 827, 870, 871, 921, 922, 1010, 1011, 1177, 1195, 1207, 1220, 1234, 1247, 1261, 1262, 1443, 1459, 1475, 1488, 1502, 1515, 1528, 1563, 1564, 1565, 1566, 1568, 1571, 1574, 1577, 1580, 1583, 1586, 1589, 1592, 1597, 1602, 1605, 1608, 1611, 1612, 1613], "summary": {"covered_lines": 70, "num_statements": 389, "percent_covered": 17.994858611825194, "percent_covered_display": "18", "missing_lines": 319, "excluded_lines": 0}, "missing_lines": [197, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 224, 227, 228, 229, 230, 234, 235, 236, 239, 240, 241, 243, 244, 247, 248, 249, 251, 252, 255, 256, 259, 261, 262, 263, 268, 273, 275, 276, 277, 278, 291, 306, 319, 320, 321, 322, 337, 354, 367, 369, 380, 382, 394, 396, 408, 410, 431, 437, 469, 470, 475, 477, 479, 480, 481, 483, 484, 485, 488, 489, 490, 491, 493, 494, 496, 497, 499, 500, 501, 504, 507, 508, 509, 510, 512, 514, 517, 518, 520, 521, 533, 535, 537, 538, 542, 543, 544, 545, 546, 548, 551, 555, 556, 557, 559, 563, 565, 566, 569, 571, 584, 586, 589, 590, 592, 594, 596, 597, 598, 599, 600, 601, 602, 604, 609, 611, 612, 613, 614, 615, 616, 618, 621, 622, 623, 625, 626, 627, 629, 630, 631, 632, 633, 634, 636, 642, 644, 645, 646, 647, 648, 649, 650, 663, 677, 691, 705, 708, 710, 712, 713, 717, 719, 720, 725, 727, 728, 730, 731, 734, 737, 740, 741, 744, 747, 748, 750, 752, 753, 760, 763, 764, 765, 766, 767, 770, 771, 772, 779, 780, 783, 784, 787, 790, 791, 792, 793, 797, 805, 806, 808, 811, 814, 815, 818, 819, 822, 824, 842, 846, 847, 850, 851, 854, 855, 856, 857, 860, 867, 868, 888, 890, 891, 892, 893, 894, 895, 896, 897, 899, 901, 902, 905, 907, 910, 911, 912, 914, 916, 917, 919, 944, 945, 946, 948, 950, 951, 954, 955, 959, 962, 963, 972, 973, 974, 978, 985, 986, 994, 997, 998, 1005, 1007, 1181, 1183, 1184, 1186, 1188, 1192, 1193, 1205, 1217, 1218, 1231, 1232, 1244, 1245, 1257, 1258, 1444, 1447, 1448, 1450, 1452, 1456, 1457, 1471, 1485, 1486, 1499, 1500, 1512, 1513, 1525, 1526, 1539, 1540, 1541, 1542, 1544, 1546, 1547, 1551, 1553, 1554, 1556, 1560], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/rnnt_greedy_decoding.py": {"executed_lines": [29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 68, 78, 79, 139, 140, 149, 150, 155, 181, 184, 185, 223, 247, 272, 273, 333, 353, 354, 401, 402, 511, 512, 582, 635, 636, 680, 681, 702, 901, 1114, 1115, 1123, 1158, 1286, 1289, 1292, 1295, 1299, 1300, 1347, 1351, 1355, 1382, 1397, 1435, 1457, 1458, 1488, 1492, 1496, 1501, 1506, 1527, 1543, 1544, 1603, 1626, 1627, 1749, 1750, 1807, 1837, 2069, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2288, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2307, 2316, 2317, 2379, 2403, 2404, 2449, 2450, 2583, 2584, 2644, 2690, 2691, 2732, 2741, 2742], "summary": {"covered_lines": 104, "num_statements": 1007, "percent_covered": 10.327706057596822, "percent_covered_display": "10", "missing_lines": 903, "excluded_lines": 0}, "missing_lines": [49, 50, 52, 54, 55, 60, 62, 63, 65, 69, 70, 72, 73, 75, 143, 153, 165, 166, 167, 169, 170, 172, 173, 174, 175, 176, 179, 182, 208, 210, 211, 215, 216, 218, 221, 235, 236, 238, 239, 240, 242, 243, 245, 259, 260, 262, 263, 264, 266, 267, 269, 343, 372, 373, 375, 377, 379, 380, 382, 384, 385, 386, 387, 389, 390, 391, 394, 396, 397, 399, 409, 411, 412, 413, 418, 419, 420, 422, 424, 426, 427, 430, 433, 436, 437, 439, 442, 443, 445, 448, 450, 454, 457, 458, 461, 462, 464, 466, 468, 470, 472, 475, 476, 479, 480, 481, 482, 483, 486, 488, 490, 492, 493, 496, 497, 498, 501, 502, 503, 506, 508, 594, 604, 608, 609, 610, 612, 613, 623, 624, 628, 631, 633, 654, 655, 657, 659, 660, 662, 663, 665, 666, 668, 673, 675, 676, 678, 693, 694, 696, 697, 698, 699, 700, 709, 710, 712, 718, 719, 724, 727, 729, 730, 733, 735, 736, 740, 743, 744, 747, 748, 749, 752, 753, 756, 761, 762, 765, 769, 770, 773, 777, 781, 782, 785, 786, 790, 791, 793, 797, 799, 800, 801, 804, 805, 808, 812, 814, 815, 816, 817, 818, 820, 824, 825, 828, 831, 833, 835, 839, 842, 845, 846, 853, 854, 855, 856, 857, 858, 865, 868, 873, 874, 877, 879, 880, 881, 884, 885, 886, 887, 890, 891, 892, 893, 896, 897, 899, 908, 909, 916, 917, 922, 925, 927, 928, 930, 933, 935, 936, 940, 941, 944, 945, 948, 950, 951, 952, 955, 956, 959, 964, 965, 968, 972, 973, 978, 979, 980, 985, 989, 993, 994, 997, 998, 1002, 1003, 1007, 1009, 1010, 1011, 1014, 1015, 1019, 1023, 1025, 1026, 1027, 1028, 1029, 1031, 1035, 1036, 1039, 1042, 1044, 1046, 1050, 1053, 1056, 1057, 1064, 1065, 1066, 1067, 1068, 1070, 1077, 1080, 1085, 1086, 1089, 1091, 1092, 1093, 1096, 1097, 1098, 1099, 1102, 1103, 1104, 1105, 1108, 1109, 1111, 1116, 1117, 1118, 1121, 1135, 1137, 1139, 1140, 1142, 1143, 1145, 1146, 1149, 1150, 1151, 1152, 1154, 1156, 1163, 1164, 1165, 1168, 1169, 1173, 1174, 1175, 1178, 1181, 1182, 1183, 1185, 1186, 1188, 1191, 1192, 1195, 1200, 1202, 1207, 1208, 1210, 1211, 1213, 1216, 1217, 1218, 1221, 1222, 1224, 1228, 1229, 1231, 1232, 1236, 1237, 1241, 1242, 1244, 1246, 1247, 1250, 1252, 1253, 1255, 1259, 1260, 1263, 1266, 1267, 1269, 1270, 1277, 1278, 1279, 1280, 1282, 1284, 1287, 1290, 1293, 1296, 1301, 1307, 1308, 1309, 1310, 1311, 1313, 1315, 1318, 1320, 1321, 1323, 1324, 1325, 1326, 1330, 1331, 1332, 1333, 1337, 1340, 1341, 1343, 1344, 1345, 1348, 1349, 1352, 1353, 1357, 1358, 1359, 1360, 1361, 1362, 1364, 1366, 1371, 1374, 1375, 1377, 1378, 1383, 1384, 1386, 1387, 1389, 1393, 1394, 1395, 1399, 1400, 1401, 1403, 1404, 1406, 1407, 1409, 1415, 1416, 1417, 1418, 1419, 1420, 1422, 1424, 1427, 1428, 1429, 1431, 1433, 1437, 1438, 1439, 1440, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1450, 1452, 1454, 1466, 1472, 1473, 1475, 1476, 1478, 1481, 1482, 1484, 1485, 1486, 1489, 1490, 1493, 1494, 1497, 1499, 1502, 1503, 1504, 1508, 1509, 1510, 1512, 1513, 1514, 1516, 1519, 1520, 1521, 1523, 1525, 1529, 1530, 1531, 1532, 1534, 1535, 1537, 1538, 1540, 1614, 1623, 1624, 1634, 1636, 1637, 1638, 1643, 1644, 1645, 1647, 1649, 1651, 1652, 1655, 1658, 1659, 1661, 1662, 1665, 1668, 1669, 1672, 1675, 1676, 1678, 1681, 1683, 1687, 1690, 1691, 1694, 1695, 1699, 1700, 1702, 1704, 1706, 1708, 1710, 1713, 1714, 1717, 1718, 1719, 1720, 1721, 1724, 1726, 1728, 1730, 1731, 1734, 1735, 1736, 1739, 1740, 1741, 1744, 1746, 1818, 1827, 1831, 1832, 1834, 1835, 1844, 1845, 1847, 1853, 1854, 1859, 1862, 1864, 1865, 1868, 1870, 1871, 1875, 1878, 1881, 1887, 1892, 1894, 1895, 1897, 1898, 1899, 1902, 1903, 1906, 1907, 1908, 1913, 1914, 1915, 1918, 1922, 1923, 1926, 1930, 1934, 1935, 1938, 1939, 1943, 1944, 1946, 1950, 1953, 1954, 1956, 1960, 1962, 1963, 1964, 1965, 1966, 1969, 1973, 1975, 1976, 1977, 1978, 1979, 1983, 1984, 1987, 1990, 1992, 1994, 1998, 2001, 2004, 2005, 2012, 2013, 2014, 2015, 2016, 2018, 2020, 2024, 2025, 2026, 2033, 2036, 2041, 2042, 2045, 2047, 2048, 2049, 2052, 2053, 2054, 2055, 2058, 2059, 2060, 2061, 2064, 2065, 2067, 2076, 2077, 2079, 2080, 2089, 2090, 2095, 2098, 2100, 2101, 2103, 2106, 2108, 2109, 2113, 2114, 2117, 2120, 2122, 2123, 2124, 2127, 2128, 2131, 2136, 2139, 2143, 2144, 2149, 2150, 2151, 2156, 2160, 2164, 2165, 2168, 2169, 2173, 2174, 2178, 2180, 2181, 2182, 2183, 2184, 2187, 2191, 2193, 2194, 2195, 2196, 2197, 2201, 2202, 2205, 2208, 2210, 2212, 2216, 2219, 2222, 2223, 2230, 2231, 2232, 2233, 2234, 2236, 2243, 2246, 2251, 2252, 2255, 2257, 2258, 2259, 2262, 2263, 2264, 2265, 2268, 2269, 2270, 2271, 2274, 2275, 2277, 2290, 2309, 2391, 2400, 2401, 2420, 2421, 2423, 2425, 2427, 2428, 2430, 2432, 2433, 2434, 2435, 2437, 2438, 2439, 2442, 2444, 2445, 2447, 2457, 2459, 2460, 2461, 2466, 2467, 2468, 2470, 2472, 2474, 2475, 2477, 2478, 2481, 2484, 2485, 2487, 2489, 2492, 2493, 2495, 2498, 2500, 2501, 2502, 2503, 2505, 2506, 2509, 2510, 2513, 2514, 2516, 2517, 2519, 2521, 2523, 2525, 2527, 2533, 2536, 2537, 2540, 2541, 2542, 2543, 2544, 2547, 2548, 2549, 2554, 2555, 2557, 2559, 2561, 2562, 2564, 2565, 2568, 2569, 2570, 2573, 2574, 2575, 2578, 2580, 2657, 2666, 2667, 2671, 2672, 2674, 2686, 2688, 2707, 2708, 2710, 2712, 2713, 2715, 2716, 2718, 2719, 2720, 2725, 2727, 2728, 2730, 2739, 2754, 2755, 2757, 2758, 2759, 2760, 2761], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/rnnt_loop_labels_computer.py": {"executed_lines": [15, 17, 18, 19, 20, 22, 23, 24, 30, 32, 33, 36, 37, 40, 41, 47, 48, 49, 51, 52, 54, 55, 57, 59, 60, 61, 62, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 78, 79, 81, 155, 164, 165, 174, 175, 177, 225, 406, 450, 451, 469, 470, 488, 552, 581, 591, 636, 685, 721], "summary": {"covered_lines": 57, "num_statements": 256, "percent_covered": 22.265625, "percent_covered_display": "22", "missing_lines": 199, "excluded_lines": 0}, "missing_lines": [35, 106, 107, 108, 109, 111, 114, 116, 117, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 136, 142, 143, 153, 157, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 235, 236, 239, 243, 250, 252, 254, 265, 267, 269, 272, 273, 274, 275, 278, 279, 282, 283, 286, 287, 289, 292, 296, 303, 307, 308, 309, 310, 322, 323, 324, 325, 328, 331, 332, 341, 343, 345, 347, 348, 358, 359, 360, 361, 362, 367, 368, 373, 375, 380, 385, 388, 397, 399, 401, 402, 403, 404, 417, 418, 419, 421, 422, 425, 426, 429, 430, 432, 433, 444, 456, 467, 475, 486, 491, 493, 505, 506, 507, 511, 514, 515, 516, 519, 521, 524, 527, 528, 529, 530, 534, 537, 538, 540, 541, 542, 543, 546, 549, 550, 554, 555, 556, 559, 564, 565, 568, 569, 570, 571, 575, 579, 584, 587, 588, 589, 595, 596, 607, 611, 613, 614, 615, 627, 628, 629, 630, 634, 640, 646, 658, 660, 662, 664, 665, 676, 678, 680, 681, 682, 683, 690, 691, 697, 704, 714, 716, 718, 719, 724, 725, 727], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/spectr_augment.py": {"executed_lines": [15, 17, 18, 19, 21, 22, 25, 26, 43, 44, 52, 53, 58, 81, 82, 83, 116, 117, 127, 128, 133, 134, 139, 148, 149, 150], "summary": {"covered_lines": 24, "num_statements": 74, "percent_covered": 32.432432432432435, "percent_covered_display": "32", "missing_lines": 50, "excluded_lines": 0}, "missing_lines": [47, 56, 61, 63, 65, 66, 68, 69, 71, 73, 74, 76, 77, 79, 84, 86, 88, 89, 91, 93, 94, 95, 96, 99, 100, 102, 103, 106, 107, 108, 109, 111, 112, 113, 131, 137, 140, 142, 144, 145, 146, 151, 153, 154, 155, 156, 158, 159, 161, 163], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/squeezeformer_modules.py": {"executed_lines": [15, 16, 17, 19, 20, 24, 25, 26, 28, 31, 32, 44, 54, 60, 61, 74, 133, 200, 258], "summary": {"covered_lines": 17, "num_statements": 105, "percent_covered": 16.19047619047619, "percent_covered_display": "16", "missing_lines": 88, "excluded_lines": 0}, "missing_lines": [45, 46, 47, 48, 49, 51, 52, 55, 56, 57, 88, 90, 91, 92, 93, 96, 97, 98, 101, 102, 105, 108, 109, 110, 113, 114, 116, 120, 123, 124, 125, 127, 131, 143, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 158, 164, 165, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 186, 190, 191, 193, 196, 198, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 243, 244, 245, 248, 252, 254, 256, 260, 261, 262], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/ssl_quantizers.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 100, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 100, "excluded_lines": 0}, "missing_lines": [20, 21, 22, 24, 25, 26, 29, 30, 58, 60, 61, 62, 63, 64, 66, 68, 69, 71, 72, 74, 75, 77, 78, 80, 81, 86, 87, 88, 90, 92, 93, 94, 96, 97, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 129, 130, 131, 133, 134, 137, 138, 142, 147, 149, 150, 152, 153, 154, 155, 157, 158, 161, 162, 163, 164, 166, 167, 169, 171, 173, 174, 175, 177, 178, 179, 180, 182, 184, 185, 187, 188, 192, 194, 195, 196, 198, 200], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/stateless_net.py": {"executed_lines": [15, 17, 20, 21, 35, 67], "summary": {"covered_lines": 5, "num_statements": 50, "percent_covered": 10.0, "percent_covered_display": "10", "missing_lines": 45, "excluded_lines": 0}, "missing_lines": [36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 56, 57, 59, 61, 62, 64, 65, 83, 85, 86, 87, 88, 89, 91, 95, 96, 97, 98, 103, 105, 106, 107, 109, 110, 112, 113, 116, 117, 119, 120, 122, 123, 124, 125], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/subsampling.py": {"executed_lines": [15, 17, 18, 19, 21, 22, 25, 26, 34, 43, 46, 49, 62, 63, 77, 379, 382, 385, 439, 462, 486, 522, 556, 566, 579, 580, 590, 614, 633, 644, 645, 647, 672], "summary": {"covered_lines": 29, "num_statements": 307, "percent_covered": 9.446254071661238, "percent_covered_display": "9", "missing_lines": 278, "excluded_lines": 0}, "missing_lines": [35, 36, 37, 38, 39, 41, 44, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 125, 126, 131, 132, 140, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 157, 158, 168, 177, 178, 180, 181, 182, 193, 204, 214, 215, 217, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 231, 232, 233, 243, 252, 253, 255, 257, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 284, 293, 294, 296, 298, 300, 301, 302, 304, 305, 308, 328, 329, 331, 332, 352, 353, 356, 358, 360, 361, 369, 370, 371, 372, 373, 375, 377, 380, 383, 386, 396, 397, 400, 403, 404, 408, 409, 410, 412, 415, 417, 418, 419, 420, 421, 423, 425, 427, 430, 431, 432, 435, 437, 441, 442, 444, 445, 446, 448, 449, 451, 452, 453, 454, 455, 458, 459, 460, 464, 465, 466, 468, 469, 470, 474, 475, 476, 477, 479, 480, 481, 483, 484, 488, 489, 491, 492, 494, 495, 496, 500, 501, 502, 504, 505, 506, 507, 509, 510, 511, 512, 514, 515, 518, 519, 520, 525, 526, 527, 528, 530, 531, 534, 543, 551, 552, 554, 557, 562, 563, 568, 569, 570, 571, 572, 573, 575, 576, 591, 593, 594, 595, 596, 597, 599, 608, 612, 615, 616, 617, 619, 620, 622, 624, 625, 626, 627, 628, 629, 631, 634, 635, 637, 638, 639, 640, 641, 648, 650, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 678, 679, 681, 682, 690, 691, 693], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/tdnn_attention.py": {"executed_lines": [15, 17, 18, 19, 20, 22, 25, 26, 45, 58, 89, 90, 105, 123, 138, 139, 152, 176, 182, 183, 196, 206, 218, 219, 231, 265, 271, 272, 282, 303], "summary": {"covered_lines": 25, "num_statements": 111, "percent_covered": 22.52252252252252, "percent_covered_display": "23", "missing_lines": 86, "excluded_lines": 0}, "missing_lines": [46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 63, 65, 67, 68, 70, 72, 73, 74, 83, 85, 86, 93, 95, 96, 98, 99, 100, 101, 102, 116, 117, 118, 119, 120, 133, 134, 135, 161, 162, 163, 165, 173, 174, 177, 178, 179, 197, 198, 207, 208, 210, 211, 212, 214, 215, 241, 242, 243, 245, 253, 261, 263, 266, 267, 268, 290, 292, 294, 301, 304, 306, 307, 309, 312, 313, 314, 315, 318, 319, 320, 321, 324], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/tdt_loop_labels_computer.py": {"executed_lines": [16, 18, 19, 20, 21, 23, 24, 25, 31, 33, 34, 37, 38, 41, 42, 48, 49, 50, 52, 54, 55, 57, 58, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 74, 75, 77, 78, 79, 81, 82, 84, 161, 170, 171, 180, 181, 183, 238, 460, 504, 505, 523, 524, 542, 610, 639, 649, 713, 786, 822], "summary": {"covered_lines": 58, "num_statements": 277, "percent_covered": 20.938628158844764, "percent_covered_display": "21", "missing_lines": 219, "excluded_lines": 0}, "missing_lines": [36, 111, 112, 113, 114, 116, 119, 121, 122, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 141, 147, 148, 159, 163, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 225, 226, 227, 229, 230, 231, 232, 233, 234, 236, 248, 249, 252, 253, 257, 264, 266, 268, 280, 281, 284, 286, 288, 291, 292, 293, 294, 297, 298, 301, 302, 305, 306, 308, 311, 315, 322, 323, 324, 328, 330, 331, 332, 333, 357, 358, 359, 360, 363, 366, 367, 376, 378, 380, 381, 382, 384, 385, 409, 411, 413, 414, 415, 416, 421, 422, 427, 429, 434, 439, 442, 451, 453, 455, 456, 457, 458, 471, 472, 473, 475, 476, 479, 480, 483, 484, 486, 487, 498, 510, 521, 529, 540, 545, 547, 559, 561, 562, 563, 567, 570, 571, 572, 575, 577, 580, 582, 583, 584, 585, 591, 594, 595, 596, 597, 598, 599, 604, 607, 608, 612, 613, 614, 617, 622, 623, 626, 627, 628, 629, 633, 637, 642, 645, 646, 647, 653, 654, 655, 666, 667, 668, 672, 674, 676, 677, 678, 704, 705, 706, 707, 711, 717, 723, 724, 736, 737, 738, 740, 742, 744, 745, 770, 772, 774, 781, 782, 783, 784, 791, 792, 798, 805, 815, 817, 819, 820, 825, 826, 828], "excluded_lines": []}, "nemo/collections/asr/parts/submodules/token_classifier.py": {"executed_lines": [15, 16, 18, 20, 21, 22, 23, 25, 27, 30, 31, 32, 33, 34, 35, 36, 39, 40, 44, 45, 54, 84, 85, 98, 99, 103, 104, 113, 150, 151], "summary": {"covered_lines": 28, "num_statements": 56, "percent_covered": 50.0, "percent_covered_display": "50", "missing_lines": 28, "excluded_lines": 0}, "missing_lines": [49, 50, 52, 77, 78, 79, 82, 93, 94, 95, 108, 109, 111, 136, 138, 140, 141, 142, 143, 144, 145, 148, 159, 160, 161, 162, 163, 164], "excluded_lines": []}, "nemo/collections/asr/parts/utils/__init__.py": {"executed_lines": [15], "summary": {"covered_lines": 1, "num_statements": 1, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/asr/parts/utils/activations.py": {"executed_lines": [15, 16, 18, 21, 22, 33, 34, 38, 42, 46, 47], "summary": {"covered_lines": 9, "num_statements": 17, "percent_covered": 52.94117647058823, "percent_covered_display": "53", "missing_lines": 8, "excluded_lines": 0}, "missing_lines": [26, 27, 28, 29, 30, 39, 40, 43], "excluded_lines": []}, "nemo/collections/asr/parts/utils/adapter_utils.py": {"executed_lines": [15, 17, 18, 20, 23, 24, 27, 28, 31, 36, 47], "summary": {"covered_lines": 11, "num_statements": 31, "percent_covered": 35.483870967741936, "percent_covered_display": "35", "missing_lines": 20, "excluded_lines": 0}, "missing_lines": [38, 39, 41, 42, 44, 59, 61, 62, 64, 65, 66, 67, 69, 70, 76, 78, 79, 80, 82, 83], "excluded_lines": []}, "nemo/collections/asr/parts/utils/asr_batching.py": {"executed_lines": [15, 16, 18, 19, 20, 22, 23, 24, 27, 28, 102, 121, 184, 197, 201], "summary": {"covered_lines": 15, "num_statements": 81, "percent_covered": 18.51851851851852, "percent_covered_display": "19", "missing_lines": 66, "excluded_lines": 0}, "missing_lines": [77, 78, 79, 81, 83, 84, 86, 87, 89, 91, 92, 93, 94, 95, 96, 98, 100, 103, 106, 107, 110, 113, 114, 117, 119, 122, 123, 124, 127, 130, 133, 134, 135, 136, 137, 138, 140, 143, 144, 149, 152, 153, 154, 160, 162, 165, 170, 173, 174, 176, 177, 182, 185, 187, 188, 189, 190, 192, 194, 195, 198, 218, 219, 224, 226, 237], "excluded_lines": []}, "nemo/collections/asr/parts/utils/asr_confidence_benchmarking_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 75, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 75, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 40, 43, 48, 55, 56, 59, 60, 63, 79, 80, 81, 82, 85, 87, 88, 89, 92, 93, 94, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 114, 115, 117, 121, 123, 124, 132, 133, 135, 136, 137, 139, 141, 143, 145, 147, 149, 150, 159, 160, 161, 165, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183], "excluded_lines": []}, "nemo/collections/asr/parts/utils/asr_confidence_utils.py": {"executed_lines": [15, 16, 17, 18, 19, 21, 22, 24, 25, 28, 29, 30, 31, 33, 34, 42, 43, 45, 46, 50, 51, 52, 87, 88, 89, 90, 91, 93, 117, 118, 119, 176, 177, 178, 179, 180, 181, 182, 184, 198, 267, 291, 292, 297, 332, 336, 341, 342, 347, 389, 390, 402, 403, 414, 433], "summary": {"covered_lines": 51, "num_statements": 156, "percent_covered": 32.69230769230769, "percent_covered_display": "33", "missing_lines": 105, "excluded_lines": 0}, "missing_lines": [35, 47, 94, 96, 97, 98, 99, 103, 104, 108, 109, 110, 111, 186, 191, 192, 215, 216, 217, 219, 220, 221, 223, 224, 225, 228, 229, 231, 233, 238, 243, 246, 251, 254, 259, 264, 279, 281, 282, 284, 285, 287, 288, 301, 309, 310, 313, 315, 317, 318, 319, 320, 321, 325, 326, 327, 328, 330, 334, 338, 351, 354, 357, 360, 364, 367, 368, 369, 372, 373, 376, 377, 378, 380, 381, 386, 387, 400, 412, 424, 425, 426, 427, 428, 430, 431, 448, 450, 451, 452, 453, 454, 455, 456, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 477], "excluded_lines": []}, "nemo/collections/asr/parts/utils/asr_module_utils.py": {"executed_lines": [15, 17, 19, 20, 21, 24, 67], "summary": {"covered_lines": 7, "num_statements": 31, "percent_covered": 22.580645161290324, "percent_covered_display": "23", "missing_lines": 24, "excluded_lines": 0}, "missing_lines": [39, 40, 44, 46, 47, 52, 54, 56, 57, 58, 60, 63, 64, 68, 69, 70, 71, 73, 74, 75, 77, 78, 81, 82], "excluded_lines": []}, "nemo/collections/asr/parts/utils/audio_utils.py": {"executed_lines": [15, 16, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 32, 54, 115, 127, 172, 204, 249, 334, 346, 359, 371, 384, 407, 457, 470, 499, 522, 545, 593], "summary": {"covered_lines": 31, "num_statements": 189, "percent_covered": 16.402116402116402, "percent_covered_display": "16", "missing_lines": 158, "excluded_lines": 0}, "missing_lines": [46, 47, 48, 49, 50, 51, 68, 70, 71, 74, 76, 77, 79, 80, 87, 89, 90, 92, 93, 95, 96, 97, 98, 100, 101, 104, 107, 108, 110, 112, 124, 146, 147, 149, 150, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 165, 167, 169, 182, 183, 185, 187, 188, 190, 191, 193, 194, 195, 196, 197, 199, 201, 232, 233, 235, 236, 238, 246, 275, 276, 277, 278, 280, 283, 286, 287, 291, 293, 294, 295, 300, 302, 305, 308, 309, 310, 311, 312, 314, 316, 318, 323, 327, 329, 331, 343, 356, 368, 381, 399, 400, 403, 404, 433, 434, 436, 437, 438, 440, 441, 442, 443, 447, 448, 450, 451, 453, 454, 466, 467, 482, 483, 485, 487, 490, 491, 492, 494, 496, 511, 512, 514, 516, 517, 519, 537, 539, 540, 541, 542, 561, 563, 565, 566, 569, 571, 574, 575, 577, 578, 581, 584, 587, 588, 590, 602, 603, 604], "excluded_lines": []}, "nemo/collections/asr/parts/utils/confidence_metrics.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 145, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 145, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 22, 33, 38, 39, 40, 41, 42, 43, 44, 47, 52, 53, 54, 55, 56, 57, 58, 61, 68, 69, 70, 71, 72, 73, 74, 77, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 137, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 192, 193, 194, 195, 196, 197, 198, 199, 202, 208, 209, 210, 211, 212, 213, 214, 217, 223, 224, 225, 226, 227, 228, 229, 232, 238, 239, 240, 241, 242, 243, 244, 247, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "excluded_lines": []}, "nemo/collections/asr/parts/utils/data_simulation_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 344, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 344, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 35, 36, 39, 50, 51, 52, 53, 54, 56, 57, 58, 61, 62, 63, 65, 66, 69, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 105, 121, 122, 123, 124, 126, 134, 135, 139, 140, 141, 144, 175, 176, 177, 179, 180, 186, 192, 193, 194, 195, 196, 197, 198, 199, 202, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 239, 242, 255, 258, 278, 281, 284, 287, 302, 303, 305, 306, 307, 308, 311, 340, 341, 342, 345, 347, 348, 349, 356, 357, 359, 360, 368, 369, 371, 374, 395, 396, 399, 402, 403, 406, 407, 409, 412, 419, 422, 426, 428, 429, 432, 444, 445, 446, 447, 450, 458, 459, 460, 461, 462, 463, 466, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 489, 492, 495, 506, 507, 508, 509, 512, 523, 524, 525, 526, 529, 546, 547, 548, 551, 552, 557, 558, 560, 561, 564, 587, 588, 589, 590, 591, 592, 593, 596, 598, 599, 602, 618, 619, 620, 621, 622, 623, 624, 625, 628, 647, 652, 653, 654, 655, 657, 661, 662, 663, 665, 669, 670, 671, 673, 677, 678, 680, 697, 698, 700, 701, 702, 703, 706, 707, 708, 709, 710, 712, 713, 714, 715, 717, 742, 743, 744, 755, 757, 773, 774, 775, 776, 777, 780, 781, 782, 783, 793, 794, 796, 804, 805, 806, 808, 815, 816, 817, 818, 820, 832, 833, 834, 835, 836, 839, 878, 883, 885, 886, 887, 889, 890, 891, 893, 894, 895, 897, 898, 900, 901, 903, 904, 906, 908, 919, 920, 921, 923, 927, 928, 930, 933, 934, 938, 942, 946, 948, 951, 952, 956, 960, 972, 973, 974, 976, 982, 983, 984, 985, 987, 999, 1000, 1001, 1002, 1003, 1004, 1010, 1012, 1013, 1015, 1027, 1028, 1029, 1030, 1031, 1032, 1038, 1040, 1041, 1043, 1065, 1068, 1069, 1070, 1071, 1080, 1082, 1083, 1085, 1106, 1109, 1111, 1112, 1117, 1121, 1122, 1124, 1136, 1137, 1138, 1139, 1140, 1141, 1142], "excluded_lines": []}, "nemo/collections/asr/parts/utils/decoder_timestamps_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 371, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 371, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 32, 33, 34, 35, 36, 38, 40, 41, 43, 44, 45, 48, 49, 52, 61, 70, 71, 73, 74, 75, 77, 80, 82, 83, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 118, 121, 122, 123, 124, 125, 126, 127, 130, 131, 134, 137, 138, 139, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 157, 166, 175, 176, 178, 179, 180, 182, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 199, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 226, 229, 234, 235, 236, 237, 240, 247, 254, 255, 257, 258, 259, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 306, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 359, 360, 362, 363, 364, 365, 366, 367, 368, 371, 373, 374, 376, 378, 379, 380, 383, 385, 387, 388, 390, 395, 396, 398, 399, 400, 401, 402, 403, 405, 407, 410, 412, 426, 428, 437, 438, 441, 442, 443, 444, 445, 446, 449, 451, 452, 453, 454, 457, 458, 461, 464, 465, 466, 467, 469, 471, 472, 489, 490, 492, 493, 494, 496, 497, 498, 499, 500, 502, 520, 521, 522, 523, 524, 527, 528, 529, 532, 533, 536, 537, 538, 540, 554, 556, 565, 566, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581, 582, 585, 586, 587, 588, 589, 591, 593, 597, 598, 601, 602, 603, 605, 606, 609, 611, 614, 618, 620, 622, 636, 637, 638, 640, 649, 656, 657, 659, 660, 662, 663, 664, 665, 667, 675, 676, 679, 680, 682, 683, 684, 685, 688, 690, 691, 692, 693, 695, 697, 713, 714, 715, 718, 719, 720, 722, 726, 731, 733, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 768, 769, 770, 771, 772, 773, 778, 779, 783, 784, 788], "excluded_lines": []}, "nemo/collections/asr/parts/utils/diarization_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 456, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 456, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 35, 37, 38, 40, 41, 42, 44, 47, 57, 58, 61, 71, 72, 75, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 152, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 239, 240, 243, 258, 259, 262, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 321, 323, 324, 326, 327, 328, 342, 343, 344, 357, 361, 362, 364, 365, 366, 367, 372, 375, 376, 378, 382, 386, 387, 388, 390, 397, 408, 416, 418, 427, 428, 429, 432, 433, 434, 435, 436, 437, 439, 440, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 502, 503, 504, 505, 506, 507, 509, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 532, 533, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 572, 573, 575, 582, 591, 593, 599, 607, 609, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 642, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 674, 675, 676, 677, 679, 681, 682, 684, 716, 717, 718, 719, 722, 724, 726, 727, 728, 732, 734, 735, 736, 737, 738, 741, 744, 745, 748, 749, 750, 752, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 868, 869, 870, 872, 873, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 889, 892, 895, 898, 901, 903, 904, 907, 909, 910, 912, 915, 916, 917, 920, 922, 923, 924, 926, 943, 944, 945, 946, 947, 948, 950, 951, 953, 972, 973, 974, 975, 976, 977, 979, 982, 984, 985, 987, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1025, 1026, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1068, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1082, 1083, 1084, 1086, 1087, 1088, 1092, 1094, 1096, 1097, 1098, 1099, 1102, 1104, 1107, 1108, 1109, 1111, 1113, 1114, 1115, 1117, 1119, 1120, 1130, 1131, 1132, 1133, 1135, 1136, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1165, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1197, 1221, 1222, 1223, 1225, 1226, 1228, 1229, 1230, 1231, 1232, 1234, 1235, 1247, 1252, 1253, 1259, 1261, 1274, 1276, 1278, 1279, 1280, 1281, 1283, 1284, 1286, 1289, 1290, 1291, 1293, 1294, 1295, 1296, 1298, 1299, 1301, 1304, 1306], "excluded_lines": []}, "nemo/collections/asr/parts/utils/eval_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 172, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 172, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 22, 23, 24, 26, 31, 34, 46, 47, 48, 49, 50, 52, 53, 56, 63, 64, 65, 66, 67, 68, 69, 70, 73, 77, 78, 81, 85, 86, 88, 89, 90, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 117, 118, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 150, 154, 157, 174, 175, 176, 177, 179, 180, 181, 183, 184, 185, 187, 190, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 212, 213, 214, 215, 216, 218, 219, 220, 222, 226, 227, 229, 231, 232, 233, 234, 235, 237, 245, 248, 260, 261, 262, 264, 265, 267, 268, 269, 270, 272, 273, 274, 276, 279, 281, 282, 284, 285, 286, 287, 288, 289, 291, 292, 293, 295, 296, 298, 299, 301, 302, 303, 305, 306, 307, 309, 310, 312, 314, 315, 316, 317, 318, 320, 324], "excluded_lines": []}, "nemo/collections/asr/parts/utils/longform_clustering.py": {"executed_lines": [15, 16, 17, 18, 24, 27, 28, 49, 78, 116, 144, 184, 197, 373], "summary": {"covered_lines": 14, "num_statements": 101, "percent_covered": 13.861386138613861, "percent_covered_display": "14", "missing_lines": 87, "excluded_lines": 0}, "missing_lines": [42, 43, 44, 45, 46, 47, 61, 62, 65, 69, 73, 74, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 136, 137, 138, 140, 141, 142, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 195, 273, 275, 278, 281, 282, 283, 284, 285, 286, 288, 289, 291, 293, 295, 300, 301, 303, 304, 305, 314, 315, 320, 325, 326, 329, 330, 333, 334, 335, 336, 337, 339, 340, 343, 344, 347, 355, 356, 361, 367, 368, 371, 394, 395, 409, 421, 422], "excluded_lines": []}, "nemo/collections/asr/parts/utils/manifest_utils.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 22, 23, 25, 33, 34, 37, 54, 134, 149, 163, 196, 216, 252, 268, 282, 299, 319, 340, 379, 464, 501, 516, 531], "summary": {"covered_lines": 29, "num_statements": 234, "percent_covered": 12.393162393162394, "percent_covered_display": "12", "missing_lines": 205, "excluded_lines": 0}, "missing_lines": [50, 51, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 145, 146, 158, 159, 160, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 205, 206, 207, 208, 209, 210, 211, 212, 213, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 261, 262, 263, 264, 265, 277, 278, 279, 291, 292, 293, 294, 295, 296, 309, 310, 311, 312, 313, 315, 316, 330, 331, 332, 333, 334, 335, 336, 337, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 367, 368, 369, 370, 373, 374, 375, 376, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 412, 413, 414, 422, 423, 424, 425, 426, 428, 430, 431, 433, 434, 435, 437, 439, 440, 442, 443, 444, 445, 446, 459, 461, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 510, 511, 512, 513, 524, 525, 526, 527, 528, 539, 540, 541, 542, 543, 544, 545], "excluded_lines": []}, "nemo/collections/asr/parts/utils/numba_utils.py": {"executed_lines": [14, 15, 18, 47, 48], "summary": {"covered_lines": 5, "num_statements": 25, "percent_covered": 20.0, "percent_covered_display": "20", "missing_lines": 20, "excluded_lines": 0}, "missing_lines": [31, 34, 37, 40, 42, 44, 62, 64, 65, 66, 67, 70, 71, 74, 77, 80, 81, 83, 86, 88], "excluded_lines": []}, "nemo/collections/asr/parts/utils/offline_clustering.py": {"executed_lines": [34, 36, 37, 40, 65, 82, 105, 189, 265, 302, 309, 346, 356, 374, 386, 417, 442, 490, 532, 543, 557, 571, 580, 617, 676, 719, 749, 750, 755, 786, 803, 838, 862, 863, 899, 969, 1029, 1054, 1083, 1124, 1125, 1167, 1247, 1287], "summary": {"covered_lines": 42, "num_statements": 412, "percent_covered": 10.194174757281553, "percent_covered_display": "10", "missing_lines": 370, "excluded_lines": 0}, "missing_lines": [56, 57, 58, 59, 60, 61, 62, 77, 78, 79, 98, 99, 100, 101, 102, 147, 148, 149, 151, 152, 153, 155, 156, 158, 159, 160, 161, 163, 164, 166, 167, 169, 171, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 185, 186, 226, 227, 230, 231, 233, 235, 236, 238, 239, 241, 243, 245, 246, 247, 249, 250, 252, 255, 256, 259, 260, 262, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 306, 325, 326, 327, 328, 331, 332, 333, 334, 337, 338, 339, 340, 342, 343, 351, 352, 353, 363, 364, 365, 366, 367, 368, 369, 371, 380, 381, 382, 383, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 433, 434, 436, 437, 438, 439, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 536, 537, 538, 539, 540, 547, 548, 549, 550, 552, 553, 554, 561, 562, 563, 564, 566, 567, 568, 575, 576, 577, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 612, 613, 614, 655, 656, 657, 658, 659, 660, 670, 671, 672, 673, 699, 700, 703, 704, 707, 708, 712, 713, 714, 715, 716, 741, 742, 743, 744, 745, 746, 780, 781, 782, 783, 784, 798, 799, 800, 801, 825, 826, 828, 829, 832, 833, 834, 835, 836, 854, 855, 856, 857, 858, 859, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 979, 980, 982, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1017, 1018, 1022, 1023, 1024, 1026, 1027, 1050, 1051, 1052, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1101, 1102, 1105, 1107, 1110, 1111, 1113, 1115, 1116, 1118, 1119, 1120, 1121, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1211, 1225, 1226, 1227, 1229, 1230, 1231, 1234, 1235, 1236, 1237, 1239, 1241, 1244, 1245, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1354, 1358, 1361, 1362, 1363, 1364, 1366, 1368, 1369, 1371, 1378], "excluded_lines": []}, "nemo/collections/asr/parts/utils/online_clustering.py": {"executed_lines": [34, 35, 37, 46, 49, 95, 119, 120, 161, 241, 303, 346, 390, 475, 491, 492, 596, 645, 690, 711, 726, 749, 858, 892, 1011, 1063, 1105, 1132], "summary": {"covered_lines": 27, "num_statements": 296, "percent_covered": 9.121621621621621, "percent_covered_display": "9", "missing_lines": 269, "excluded_lines": 0}, "missing_lines": [70, 71, 74, 75, 78, 79, 82, 83, 86, 87, 88, 89, 91, 92, 112, 113, 114, 115, 116, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 150, 152, 155, 156, 157, 158, 208, 209, 212, 215, 216, 217, 218, 221, 222, 223, 224, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 276, 277, 278, 279, 280, 281, 282, 285, 286, 289, 290, 293, 294, 295, 296, 297, 300, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 377, 378, 379, 382, 385, 386, 387, 435, 436, 438, 439, 440, 441, 442, 445, 448, 449, 450, 454, 455, 458, 461, 463, 464, 469, 470, 471, 472, 488, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 641, 642, 643, 664, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 702, 703, 704, 705, 706, 707, 708, 709, 724, 743, 744, 745, 746, 747, 805, 806, 807, 808, 809, 810, 812, 814, 815, 816, 817, 818, 823, 824, 826, 827, 828, 830, 834, 835, 840, 841, 842, 843, 851, 854, 855, 856, 881, 884, 885, 886, 887, 889, 890, 961, 964, 966, 968, 975, 976, 982, 983, 986, 987, 988, 989, 990, 991, 994, 995, 998, 999, 1003, 1005, 1006, 1007, 1008, 1009, 1046, 1047, 1048, 1052, 1053, 1054, 1058, 1059, 1060, 1061, 1084, 1086, 1089, 1090, 1091, 1092, 1094, 1095, 1098, 1101, 1102, 1103, 1120, 1130, 1174, 1175, 1176, 1177, 1178, 1181, 1182, 1184, 1186, 1187, 1189, 1190, 1191, 1192, 1194, 1195], "excluded_lines": []}, "nemo/collections/asr/parts/utils/optimization_utils.py": {"executed_lines": [27, 30, 31, 52, 53, 54, 95, 112, 119, 135, 158, 177, 217, 271, 290, 291], "summary": {"covered_lines": 15, "num_statements": 129, "percent_covered": 11.627906976744185, "percent_covered_display": "12", "missing_lines": 114, "excluded_lines": 0}, "missing_lines": [43, 44, 45, 46, 47, 48, 49, 97, 98, 101, 102, 105, 106, 109, 110, 116, 117, 132, 133, 147, 148, 149, 150, 151, 152, 153, 155, 156, 170, 171, 172, 173, 175, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 233, 234, 235, 236, 238, 240, 242, 244, 246, 247, 248, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 265, 268, 269, 282, 283, 284, 285, 286, 287, 302, 304, 305, 306, 307, 312, 313, 314, 316, 318, 319, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 341, 342, 343], "excluded_lines": []}, "nemo/collections/asr/parts/utils/regularization_utils.py": {"executed_lines": [15, 18], "summary": {"covered_lines": 2, "num_statements": 14, "percent_covered": 14.285714285714286, "percent_covered_display": "14", "missing_lines": 12, "excluded_lines": 0}, "missing_lines": [45, 46, 47, 48, 51, 54, 55, 57, 58, 59, 61, 64], "excluded_lines": []}, "nemo/collections/asr/parts/utils/rnnt_utils.py": {"executed_lines": [29, 30, 32, 35, 36, 37, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 133, 134, 143, 144, 145, 147, 150, 151, 152, 159, 160, 163, 186, 225, 226, 228, 266, 274, 283, 305, 334, 352, 393, 394, 399, 454, 461, 474, 513, 537, 571], "summary": {"covered_lines": 51, "num_statements": 204, "percent_covered": 25.0, "percent_covered_display": "25", "missing_lines": 153, "excluded_lines": 0}, "missing_lines": [115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 130, 131, 140, 176, 177, 179, 180, 181, 183, 206, 208, 209, 210, 212, 213, 215, 217, 218, 220, 222, 243, 244, 245, 246, 247, 250, 252, 254, 256, 260, 262, 263, 264, 267, 268, 269, 270, 271, 272, 279, 280, 281, 295, 296, 298, 299, 301, 320, 323, 324, 325, 327, 330, 332, 346, 347, 348, 368, 371, 372, 375, 381, 388, 390, 421, 422, 423, 424, 425, 426, 427, 428, 431, 433, 436, 437, 438, 440, 441, 444, 445, 447, 452, 455, 456, 457, 458, 459, 466, 467, 468, 469, 470, 471, 472, 493, 494, 497, 498, 500, 502, 504, 505, 506, 508, 509, 511, 531, 532, 533, 558, 560, 561, 562, 563, 565, 566, 568, 587, 588, 589, 599, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 616, 617, 618, 619, 622, 623, 626, 627], "excluded_lines": []}, "nemo/collections/asr/parts/utils/slu_utils.py": {"executed_lines": [17, 18, 20, 21, 23, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 47, 48, 49, 50, 52, 94, 127, 140, 162, 177, 195], "summary": {"covered_lines": 27, "num_statements": 77, "percent_covered": 35.064935064935064, "percent_covered_display": "35", "missing_lines": 50, "excluded_lines": 0}, "missing_lines": [60, 62, 63, 64, 65, 66, 67, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 90, 113, 119, 120, 122, 123, 125, 135, 136, 137, 138, 148, 150, 151, 153, 154, 155, 156, 157, 158, 159, 171, 172, 173, 174, 186, 187, 188, 189, 191, 192, 204, 205], "excluded_lines": []}, "nemo/collections/asr/parts/utils/speaker_utils.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 40, 51, 60, 80, 125, 201, 247, 273, 293, 313, 326, 343, 350, 375, 387, 403, 433, 532, 544, 571, 600, 624, 649, 667, 685, 744, 751, 758, 801, 836, 877, 931, 956, 979, 996, 1003, 1070, 1104, 1176, 1250, 1278, 1308, 1333, 1400, 1413, 1436, 1496, 1522, 1583, 1601, 1602, 1622, 1629], "summary": {"covered_lines": 70, "num_statements": 621, "percent_covered": 11.272141706924316, "percent_covered_display": "11", "missing_lines": 551, "excluded_lines": 0}, "missing_lines": [44, 45, 46, 48, 55, 56, 57, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 77, 90, 91, 92, 93, 94, 95, 96, 98, 108, 109, 111, 113, 114, 116, 122, 145, 146, 150, 153, 154, 160, 166, 170, 175, 176, 178, 180, 181, 182, 183, 187, 188, 189, 191, 193, 194, 198, 217, 218, 219, 220, 221, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 240, 241, 242, 244, 262, 263, 264, 265, 266, 270, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 297, 298, 299, 300, 301, 302, 303, 305, 307, 308, 310, 317, 318, 319, 320, 321, 323, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 347, 368, 369, 370, 371, 372, 379, 380, 381, 382, 383, 384, 395, 398, 399, 400, 423, 424, 425, 426, 427, 428, 429, 430, 457, 458, 459, 460, 462, 463, 464, 465, 467, 469, 470, 471, 473, 474, 476, 477, 478, 479, 481, 483, 485, 498, 499, 500, 502, 503, 505, 506, 507, 509, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 523, 524, 526, 527, 529, 536, 537, 538, 540, 541, 560, 561, 562, 563, 565, 566, 567, 568, 587, 588, 589, 596, 597, 612, 613, 614, 616, 621, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 645, 646, 662, 663, 664, 681, 682, 712, 713, 714, 715, 716, 718, 719, 720, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 734, 735, 736, 737, 739, 740, 741, 748, 755, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 825, 826, 828, 829, 830, 831, 832, 833, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 873, 874, 897, 898, 899, 901, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 925, 926, 928, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 974, 975, 976, 989, 990, 991, 992, 993, 1000, 1039, 1040, 1041, 1044, 1045, 1046, 1051, 1056, 1061, 1064, 1065, 1067, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1147, 1148, 1150, 1151, 1153, 1154, 1156, 1158, 1159, 1160, 1161, 1163, 1164, 1166, 1167, 1168, 1170, 1171, 1173, 1217, 1218, 1219, 1220, 1221, 1223, 1225, 1226, 1227, 1229, 1232, 1242, 1243, 1244, 1246, 1247, 1265, 1266, 1271, 1272, 1273, 1274, 1275, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1327, 1330, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1377, 1378, 1379, 1380, 1381, 1383, 1384, 1386, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1429, 1430, 1431, 1432, 1433, 1457, 1460, 1461, 1462, 1463, 1464, 1467, 1468, 1469, 1470, 1472, 1475, 1476, 1477, 1479, 1486, 1489, 1490, 1492, 1493, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1578, 1579, 1580, 1592, 1593, 1594, 1595, 1596, 1598, 1623, 1624, 1625, 1626, 1627, 1678, 1680, 1681, 1682, 1683, 1686, 1688, 1689, 1690, 1692, 1693, 1695, 1704, 1715, 1716, 1717, 1719, 1720, 1721], "excluded_lines": []}, "nemo/collections/asr/parts/utils/streaming_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 926, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 926, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 34, 37, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 64, 65, 67, 68, 71, 108, 109, 110, 114, 115, 119, 120, 121, 122, 123, 124, 126, 127, 128, 131, 137, 138, 141, 142, 146, 148, 149, 150, 154, 155, 173, 174, 176, 177, 178, 179, 182, 183, 185, 186, 187, 190, 191, 199, 203, 204, 205, 217, 218, 220, 221, 223, 224, 231, 232, 233, 234, 236, 240, 243, 246, 247, 254, 255, 257, 258, 260, 263, 264, 265, 269, 270, 271, 274, 275, 277, 278, 284, 285, 287, 290, 299, 300, 301, 304, 305, 306, 309, 310, 313, 317, 318, 321, 322, 325, 334, 335, 336, 339, 340, 341, 344, 345, 348, 355, 366, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 391, 392, 393, 394, 395, 397, 401, 402, 403, 404, 408, 416, 417, 419, 423, 424, 426, 427, 429, 430, 435, 437, 443, 444, 445, 446, 447, 448, 449, 451, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 492, 493, 494, 496, 497, 499, 500, 501, 502, 503, 504, 507, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 534, 536, 540, 541, 542, 543, 548, 549, 551, 552, 554, 555, 556, 557, 558, 563, 564, 565, 566, 568, 569, 572, 578, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 601, 602, 603, 605, 608, 609, 610, 611, 613, 617, 618, 619, 620, 621, 622, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 656, 657, 658, 659, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 679, 680, 682, 684, 685, 686, 687, 688, 689, 690, 697, 703, 712, 720, 721, 723, 724, 725, 727, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 745, 746, 747, 748, 749, 750, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 779, 780, 781, 782, 783, 785, 786, 787, 788, 790, 791, 792, 794, 795, 796, 797, 799, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 847, 854, 857, 858, 859, 864, 865, 866, 867, 869, 870, 871, 873, 877, 878, 882, 883, 884, 885, 887, 889, 890, 893, 894, 895, 896, 897, 899, 900, 906, 907, 909, 910, 912, 913, 915, 917, 919, 920, 922, 923, 924, 927, 931, 932, 934, 936, 937, 938, 939, 941, 943, 944, 945, 948, 950, 951, 952, 954, 955, 957, 959, 960, 961, 962, 964, 965, 967, 969, 970, 972, 973, 974, 977, 982, 1000, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1014, 1015, 1016, 1017, 1019, 1022, 1026, 1028, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1059, 1060, 1061, 1063, 1065, 1067, 1068, 1070, 1071, 1073, 1074, 1093, 1095, 1097, 1098, 1100, 1102, 1103, 1104, 1106, 1107, 1108, 1110, 1111, 1114, 1116, 1117, 1119, 1120, 1122, 1124, 1127, 1128, 1129, 1130, 1131, 1132, 1134, 1138, 1140, 1142, 1143, 1145, 1146, 1147, 1149, 1150, 1151, 1153, 1154, 1155, 1157, 1158, 1159, 1161, 1162, 1163, 1165, 1167, 1169, 1170, 1172, 1173, 1178, 1179, 1180, 1182, 1183, 1185, 1191, 1193, 1194, 1196, 1197, 1198, 1200, 1201, 1202, 1204, 1206, 1210, 1212, 1213, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1235, 1237, 1239, 1240, 1241, 1242, 1245, 1252, 1272, 1273, 1274, 1276, 1278, 1281, 1282, 1286, 1288, 1289, 1291, 1292, 1293, 1295, 1298, 1300, 1301, 1303, 1304, 1309, 1310, 1312, 1313, 1314, 1315, 1316, 1318, 1319, 1321, 1323, 1325, 1334, 1335, 1336, 1337, 1340, 1346, 1353, 1354, 1355, 1356, 1357, 1358, 1360, 1361, 1362, 1365, 1366, 1367, 1369, 1371, 1373, 1374, 1376, 1378, 1379, 1380, 1381, 1383, 1384, 1385, 1387, 1389, 1395, 1396, 1397, 1399, 1401, 1407, 1409, 1411, 1412, 1414, 1417, 1418, 1422, 1423, 1424, 1425, 1427, 1428, 1434, 1435, 1437, 1439, 1440, 1441, 1442, 1443, 1444, 1454, 1455, 1457, 1458, 1464, 1466, 1467, 1469, 1470, 1471, 1473, 1474, 1475, 1477, 1478, 1479, 1481, 1483, 1484, 1486, 1487, 1488, 1489, 1490, 1492, 1493, 1494, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1505, 1506, 1508, 1509, 1510, 1511, 1513, 1514, 1515, 1518, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1530, 1531, 1532, 1533, 1534, 1537, 1538, 1539, 1540, 1542, 1545, 1547, 1548, 1553, 1555, 1556, 1558, 1559, 1560, 1561, 1562, 1563, 1566, 1568, 1569, 1570, 1571, 1576, 1579, 1580, 1581, 1583, 1584, 1585, 1586, 1587, 1591, 1601, 1602, 1604, 1605, 1606, 1607, 1608, 1611, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1622, 1623, 1624, 1625, 1627, 1633, 1635, 1636, 1637, 1639, 1640, 1643, 1644, 1645, 1647, 1648, 1649, 1650, 1653, 1655, 1656, 1657, 1658, 1659, 1660, 1662, 1666, 1669, 1670, 1671, 1672, 1673, 1675, 1681, 1683, 1684, 1685, 1687, 1688, 1691, 1692, 1693, 1695, 1696, 1697, 1698, 1701, 1703, 1704, 1705, 1706, 1707, 1708, 1710, 1711, 1712, 1713, 1714, 1718, 1719, 1723, 1724, 1725, 1726, 1728, 1734, 1736, 1737, 1738, 1740, 1741], "excluded_lines": []}, "nemo/collections/asr/parts/utils/transcribe_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 393, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 393, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 36, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 113, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 171, 172, 175, 187, 188, 189, 190, 191, 193, 194, 195, 196, 198, 199, 202, 203, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 230, 231, 234, 236, 237, 238, 239, 240, 243, 245, 247, 248, 249, 250, 251, 254, 257, 260, 262, 263, 268, 271, 274, 276, 277, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 298, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 326, 328, 329, 330, 331, 333, 334, 337, 352, 353, 354, 355, 358, 367, 368, 369, 370, 372, 373, 375, 377, 378, 379, 380, 381, 382, 383, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 415, 416, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 432, 434, 435, 436, 437, 440, 441, 442, 444, 445, 446, 448, 449, 450, 452, 455, 470, 471, 475, 476, 479, 481, 482, 483, 484, 486, 487, 492, 493, 495, 497, 498, 499, 501, 503, 504, 505, 506, 508, 514, 515, 517, 518, 519, 522, 524, 525, 527, 529, 530, 532, 533, 534, 536, 538, 540, 541, 542, 543, 545, 547, 548, 552, 553, 554, 555, 556, 557, 558, 559, 562, 586, 588, 589, 594, 595, 596, 601, 602, 603, 605, 607, 608, 609, 611, 612, 613, 614, 616, 618, 619, 620, 622, 623, 624, 626, 627, 628, 630, 631, 634, 635, 636, 637, 638, 640, 642, 643, 644, 645, 646, 647, 649, 652, 653, 661, 662, 663, 665, 667, 668, 669, 673, 675, 676, 678, 679, 680, 682, 685, 686, 688, 691, 694, 697], "excluded_lines": []}, "nemo/collections/asr/parts/utils/vad_utils.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 53, 58, 119, 126, 206, 236, 249, 311, 318, 319, 390, 414, 415, 438, 439, 450, 458, 479, 480, 544, 545, 558, 559, 569, 570, 631, 657, 658, 679, 708, 769, 776, 805, 823, 912, 937, 973, 1069, 1086, 1105, 1167, 1182, 1197, 1273, 1310, 1329, 1347, 1358, 1387, 1413, 1441, 1484, 1539, 1559, 1583, 1623, 1672], "summary": {"covered_lines": 84, "num_statements": 875, "percent_covered": 9.6, "percent_covered_display": "10", "missing_lines": 791, "excluded_lines": 0}, "missing_lines": [45, 46, 48, 49, 50, 63, 64, 66, 67, 70, 71, 72, 73, 74, 75, 76, 78, 82, 89, 90, 91, 92, 101, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 123, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 176, 178, 179, 180, 182, 183, 184, 186, 188, 195, 197, 199, 200, 201, 202, 203, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 240, 241, 242, 243, 245, 246, 274, 275, 276, 278, 282, 283, 285, 292, 293, 294, 295, 305, 306, 308, 315, 329, 330, 331, 332, 334, 335, 337, 338, 340, 341, 349, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 379, 380, 381, 382, 385, 387, 395, 396, 397, 399, 400, 401, 402, 404, 406, 407, 408, 409, 411, 421, 426, 428, 429, 430, 431, 432, 433, 434, 435, 447, 454, 455, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 500, 502, 503, 504, 505, 507, 508, 509, 511, 513, 515, 517, 518, 519, 522, 524, 525, 530, 531, 532, 535, 536, 537, 540, 541, 553, 554, 555, 565, 566, 588, 589, 591, 592, 593, 595, 597, 598, 600, 602, 604, 608, 611, 613, 615, 617, 621, 624, 625, 626, 628, 635, 638, 643, 644, 645, 647, 649, 650, 651, 652, 654, 663, 665, 666, 668, 669, 671, 673, 674, 676, 683, 684, 686, 687, 688, 689, 691, 692, 693, 694, 696, 698, 699, 700, 701, 703, 705, 731, 732, 734, 735, 736, 737, 739, 741, 742, 744, 749, 750, 751, 752, 753, 754, 763, 764, 766, 773, 789, 790, 791, 794, 795, 796, 799, 800, 801, 802, 809, 810, 811, 812, 813, 815, 817, 818, 819, 820, 845, 846, 847, 848, 849, 850, 852, 853, 854, 856, 857, 858, 859, 860, 863, 867, 868, 869, 870, 873, 876, 878, 879, 880, 881, 883, 886, 887, 889, 891, 892, 895, 896, 898, 899, 900, 901, 902, 904, 905, 906, 907, 909, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 931, 932, 934, 941, 942, 943, 944, 945, 946, 948, 951, 952, 953, 955, 956, 957, 958, 959, 960, 962, 965, 966, 967, 969, 970, 1003, 1005, 1008, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1135, 1136, 1137, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1161, 1162, 1163, 1164, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1214, 1215, 1216, 1217, 1218, 1219, 1223, 1224, 1225, 1226, 1227, 1229, 1231, 1232, 1233, 1239, 1240, 1241, 1242, 1243, 1245, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1258, 1263, 1264, 1265, 1267, 1270, 1281, 1282, 1283, 1284, 1285, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1296, 1297, 1299, 1301, 1302, 1303, 1304, 1305, 1307, 1314, 1315, 1316, 1317, 1319, 1320, 1321, 1323, 1324, 1326, 1333, 1334, 1335, 1338, 1339, 1343, 1344, 1352, 1353, 1354, 1355, 1369, 1370, 1371, 1372, 1373, 1374, 1377, 1378, 1382, 1383, 1384, 1400, 1401, 1402, 1403, 1404, 1405, 1407, 1408, 1410, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1437, 1438, 1453, 1455, 1456, 1458, 1459, 1460, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1497, 1498, 1499, 1500, 1502, 1504, 1505, 1506, 1510, 1511, 1512, 1513, 1514, 1515, 1517, 1518, 1519, 1520, 1521, 1523, 1524, 1525, 1527, 1528, 1531, 1532, 1533, 1534, 1536, 1548, 1549, 1550, 1551, 1552, 1553, 1555, 1556, 1568, 1569, 1570, 1571, 1572, 1573, 1575, 1576, 1577, 1578, 1579, 1580, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1609, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1619, 1620, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1645, 1646, 1648, 1650, 1653, 1654, 1655, 1656, 1662, 1663, 1664, 1665, 1666, 1667, 1669, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1706, 1707, 1709, 1711, 1714, 1716, 1717, 1718], "excluded_lines": []}, "nemo/collections/common/__init__.py": {"executed_lines": [15, 16, 17, 20, 23, 26], "summary": {"covered_lines": 6, "num_statements": 6, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/common/callbacks/__init__.py": {"executed_lines": [15, 16], "summary": {"covered_lines": 2, "num_statements": 2, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/common/callbacks/callbacks.py": {"executed_lines": [14, 16, 17, 22, 23, 26, 27, 30, 31], "summary": {"covered_lines": 8, "num_statements": 12, "percent_covered": 66.66666666666667, "percent_covered_display": "67", "missing_lines": 4, "excluded_lines": 0}, "missing_lines": [28, 32, 33, 34], "excluded_lines": []}, "nemo/collections/common/callbacks/ema.py": {"executed_lines": [14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 27, 28, 42, 52, 66, 70, 74, 78, 82, 85, 88, 93, 94, 104, 105, 115, 148, 149, 156, 163, 164, 204, 227, 230, 257, 260, 261, 279, 285, 291, 292, 311, 314, 321, 338, 348], "summary": {"covered_lines": 44, "num_statements": 169, "percent_covered": 26.035502958579883, "percent_covered_display": "26", "missing_lines": 125, "excluded_lines": 0}, "missing_lines": [45, 46, 47, 48, 49, 50, 53, 54, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 89, 90, 91, 98, 99, 100, 102, 106, 107, 108, 109, 110, 112, 113, 118, 121, 123, 125, 126, 127, 128, 133, 134, 135, 136, 138, 139, 140, 142, 150, 151, 157, 158, 160, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 224, 225, 228, 231, 233, 234, 235, 237, 239, 240, 242, 245, 247, 248, 250, 252, 253, 254, 255, 258, 262, 263, 265, 266, 270, 271, 273, 274, 277, 280, 281, 282, 283, 286, 287, 288, 289, 303, 304, 305, 306, 308, 309, 312, 315, 316, 318, 319, 322, 324, 325, 328, 329, 336, 339, 341, 342, 343, 344, 345, 346, 349, 350], "excluded_lines": []}, "nemo/collections/common/data/__init__.py": {"executed_lines": [15], "summary": {"covered_lines": 1, "num_statements": 1, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/common/data/dataset.py": {"executed_lines": [15, 16, 17, 19, 20, 21, 22, 24, 27, 28, 47, 103, 112, 153, 156, 157, 177, 178, 184, 185, 201, 202, 216, 287, 290, 295, 296, 331, 440, 454, 609, 637, 647, 661], "summary": {"covered_lines": 31, "num_statements": 331, "percent_covered": 9.365558912386707, "percent_covered_display": "9", "missing_lines": 300, "excluded_lines": 0}, "missing_lines": [59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 87, 89, 90, 91, 92, 94, 95, 97, 99, 100, 101, 104, 105, 107, 108, 109, 110, 113, 114, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 179, 180, 181, 182, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 198, 224, 225, 226, 227, 228, 229, 230, 233, 235, 237, 239, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 260, 261, 262, 263, 265, 267, 269, 271, 272, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 288, 291, 292, 353, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 385, 386, 387, 388, 389, 394, 396, 398, 399, 401, 402, 403, 405, 406, 408, 409, 414, 415, 416, 423, 424, 434, 436, 441, 443, 444, 446, 447, 448, 449, 457, 458, 459, 460, 464, 467, 471, 474, 481, 482, 483, 485, 488, 489, 491, 492, 493, 495, 496, 498, 499, 501, 502, 504, 505, 508, 509, 512, 513, 514, 518, 521, 522, 527, 532, 533, 535, 538, 542, 543, 544, 556, 563, 566, 567, 576, 586, 589, 591, 593, 594, 595, 596, 597, 598, 600, 610, 611, 612, 613, 614, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 629, 631, 638, 639, 640, 641, 642, 643, 644, 645, 650, 652, 653, 654, 656, 657, 658, 659, 662], "excluded_lines": []}, "nemo/collections/common/data/lhotse/__init__.py": {"executed_lines": [15, 16], "summary": {"covered_lines": 2, "num_statements": 2, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/common/data/lhotse/cutset.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 32, 59, 62, 140, 175, 183, 196, 202, 246, 302, 350, 437], "summary": {"covered_lines": 25, "num_statements": 181, "percent_covered": 13.812154696132596, "percent_covered_display": "14", "missing_lines": 156, "excluded_lines": 0}, "missing_lines": [39, 40, 42, 43, 44, 47, 49, 50, 52, 55, 56, 124, 132, 133, 135, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 171, 172, 176, 184, 197, 198, 199, 205, 206, 207, 208, 210, 216, 217, 218, 219, 221, 224, 225, 226, 227, 228, 230, 231, 234, 235, 242, 243, 247, 262, 263, 264, 265, 266, 267, 271, 275, 276, 277, 278, 279, 280, 281, 283, 289, 290, 291, 292, 293, 294, 297, 298, 299, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 320, 321, 324, 325, 326, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 351, 358, 359, 360, 361, 362, 372, 384, 388, 389, 390, 392, 394, 395, 396, 404, 406, 407, 409, 419, 420, 425, 426, 427, 428, 430, 431, 433, 434, 445, 446, 448, 449], "excluded_lines": []}, "nemo/collections/common/data/lhotse/dataloader.py": {"executed_lines": [15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 32, 33, 34, 35, 36, 38, 39, 42, 43, 44, 53, 54, 55, 57, 58, 62, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 95, 96, 97, 99, 101, 102, 103, 104, 105, 108, 109, 111, 112, 114, 117, 118, 121, 124, 312, 334, 335, 337, 340, 345, 351, 353, 355, 360, 366, 369, 372, 375, 383, 387, 390, 410, 411, 413, 417, 424, 428, 432], "summary": {"covered_lines": 88, "num_statements": 180, "percent_covered": 48.888888888888886, "percent_covered_display": "49", "missing_lines": 92, "excluded_lines": 0}, "missing_lines": [148, 150, 153, 154, 157, 160, 163, 165, 166, 169, 171, 172, 174, 178, 179, 180, 192, 193, 196, 197, 202, 203, 211, 213, 214, 221, 228, 233, 237, 255, 259, 270, 278, 281, 282, 283, 284, 287, 295, 304, 305, 309, 318, 321, 322, 323, 324, 325, 329, 331, 356, 361, 362, 363, 364, 367, 370, 373, 376, 377, 378, 379, 380, 384, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 414, 415, 418, 419, 421, 425, 429, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445], "excluded_lines": []}, "nemo/collections/common/data/lhotse/nemo_adapters.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 61, 73, 74, 77, 102, 105, 108, 132, 133, 166, 205, 224, 232, 233, 236, 278, 281, 285, 292], "summary": {"covered_lines": 35, "num_statements": 114, "percent_covered": 30.70175438596491, "percent_covered_display": "31", "missing_lines": 79, "excluded_lines": 0}, "missing_lines": [68, 69, 70, 71, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 99, 100, 103, 106, 109, 111, 119, 120, 129, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 207, 210, 212, 225, 226, 227, 234, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 251, 256, 257, 264, 265, 275, 276, 279, 282, 287, 289, 293], "excluded_lines": []}, "nemo/collections/common/data/lhotse/text_adapters.py": {"executed_lines": [15, 16, 17, 18, 20, 21, 22, 24, 27, 28, 29, 34, 35, 36, 37, 39, 42, 56, 57, 58, 65, 66, 67, 68, 69, 70, 72, 84], "summary": {"covered_lines": 26, "num_statements": 58, "percent_covered": 44.827586206896555, "percent_covered_display": "45", "missing_lines": 32, "excluded_lines": 0}, "missing_lines": [40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 73, 74, 75, 77, 78, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], "excluded_lines": []}, "nemo/collections/common/losses/__init__.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 21], "summary": {"covered_lines": 7, "num_statements": 7, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/common/losses/aggregator.py": {"executed_lines": [15, 17, 19, 20, 22, 25, 26, 34, 35, 44, 45, 50, 58, 59], "summary": {"covered_lines": 13, "num_statements": 30, "percent_covered": 43.333333333333336, "percent_covered_display": "43", "missing_lines": 17, "excluded_lines": 0}, "missing_lines": [38, 39, 40, 42, 48, 51, 52, 53, 54, 56, 60, 61, 62, 63, 64, 66, 67], "excluded_lines": []}, "nemo/collections/common/losses/bce_logits_loss.py": {"executed_lines": [15, 17, 18, 20, 21, 23, 26, 27, 33, 34, 43, 44, 49, 69, 70], "summary": {"covered_lines": 14, "num_statements": 23, "percent_covered": 60.869565217391305, "percent_covered_display": "61", "missing_lines": 9, "excluded_lines": 0}, "missing_lines": [37, 47, 63, 64, 66, 67, 76, 77, 79], "excluded_lines": []}, "nemo/collections/common/losses/cross_entropy.py": {"executed_lines": [15, 16, 18, 19, 20, 22, 25, 26, 30, 31, 40, 41, 46, 59, 60, 84, 85, 89, 90, 99, 100, 105, 118, 119], "summary": {"covered_lines": 22, "num_statements": 59, "percent_covered": 37.28813559322034, "percent_covered_display": "37", "missing_lines": 37, "excluded_lines": 0}, "missing_lines": [34, 44, 53, 54, 55, 56, 57, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 93, 103, 113, 114, 115, 116, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 139, 140], "excluded_lines": []}, "nemo/collections/common/losses/mse_loss.py": {"executed_lines": [15, 17, 18, 20, 23, 24, 28, 29, 37, 38, 43, 50, 51], "summary": {"covered_lines": 12, "num_statements": 16, "percent_covered": 75.0, "percent_covered_display": "75", "missing_lines": 4, "excluded_lines": 0}, "missing_lines": [32, 41, 48, 57], "excluded_lines": []}, "nemo/collections/common/losses/multi_similarity_loss.py": {"executed_lines": [15, 17, 19, 20, 21, 22, 24, 27, 28, 29, 34, 35, 40, 54, 55], "summary": {"covered_lines": 15, "num_statements": 43, "percent_covered": 34.883720930232556, "percent_covered_display": "35", "missing_lines": 28, "excluded_lines": 0}, "missing_lines": [32, 38, 47, 48, 49, 50, 51, 52, 56, 57, 59, 61, 62, 63, 65, 66, 69, 72, 74, 75, 77, 82, 87, 89, 90, 91, 93, 95], "excluded_lines": []}, "nemo/collections/common/losses/smoothed_cross_entropy.py": {"executed_lines": [15, 17, 19, 20, 22, 25, 26, 47, 48, 57, 58, 63, 78, 79, 114, 115, 119, 120, 130, 131, 136, 143, 144], "summary": {"covered_lines": 21, "num_statements": 78, "percent_covered": 26.923076923076923, "percent_covered_display": "27", "missing_lines": 57, "excluded_lines": 0}, "missing_lines": [51, 61, 71, 72, 73, 74, 75, 76, 87, 88, 89, 90, 92, 93, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 109, 111, 123, 134, 137, 138, 139, 140, 141, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 175, 176, 177, 178, 179, 180, 181, 183], "excluded_lines": []}, "nemo/collections/common/losses/spanning_loss.py": {"executed_lines": [15, 17, 18, 20, 23, 24, 28, 29, 38, 39, 48, 51, 52], "summary": {"covered_lines": 12, "num_statements": 30, "percent_covered": 40.0, "percent_covered_display": "40", "missing_lines": 18, "excluded_lines": 0}, "missing_lines": [32, 42, 49, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79], "excluded_lines": []}, "nemo/collections/common/metrics/__init__.py": {"executed_lines": [15, 16, 17, 18], "summary": {"covered_lines": 4, "num_statements": 4, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/common/metrics/classification_accuracy.py": {"executed_lines": [15, 16, 17, 18, 19, 21, 22, 24, 27, 28, 67, 69, 81, 82, 87, 106, 125, 126, 129, 130, 143, 163, 164, 174, 189, 199, 200, 206, 211, 215, 216, 218, 224, 231, 234, 246], "summary": {"covered_lines": 34, "num_statements": 138, "percent_covered": 24.63768115942029, "percent_covered_display": "25", "missing_lines": 104, "excluded_lines": 0}, "missing_lines": [70, 72, 73, 75, 76, 79, 83, 84, 85, 88, 89, 90, 91, 93, 94, 96, 97, 98, 100, 101, 103, 104, 114, 115, 117, 118, 121, 123, 127, 131, 132, 134, 135, 137, 138, 140, 153, 155, 156, 157, 158, 160, 165, 166, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 190, 191, 192, 193, 194, 195, 196, 201, 203, 204, 207, 208, 209, 212, 219, 221, 222, 225, 226, 227, 228, 229, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 249, 250, 252, 253, 255, 256, 257, 259, 260, 262], "excluded_lines": []}, "nemo/collections/common/metrics/global_average_loss_metric.py": {"executed_lines": [15, 16, 18, 21, 22, 42, 44, 50, 66], "summary": {"covered_lines": 8, "num_statements": 19, "percent_covered": 42.10526315789474, "percent_covered_display": "42", "missing_lines": 11, "excluded_lines": 0}, "missing_lines": [45, 46, 47, 48, 60, 61, 63, 64, 70, 71, 72], "excluded_lines": []}, "nemo/collections/common/metrics/metric_string_to_torchmetric.py": {"executed_lines": [15, 16, 18, 20, 24], "summary": {"covered_lines": 5, "num_statements": 5, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/common/metrics/perplexity.py": {"executed_lines": [15, 16, 17, 19, 22, 23, 43, 45, 52, 68], "summary": {"covered_lines": 9, "num_statements": 20, "percent_covered": 45.0, "percent_covered_display": "45", "missing_lines": 11, "excluded_lines": 0}, "missing_lines": [46, 47, 48, 50, 59, 64, 65, 66, 72, 73, 74], "excluded_lines": []}, "nemo/collections/common/metrics/punct_er.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 186, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 186, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 21, 22, 23, 25, 26, 27, 30, 48, 55, 57, 60, 135, 137, 139, 140, 142, 144, 145, 146, 148, 149, 151, 152, 154, 159, 164, 169, 172, 174, 187, 188, 190, 191, 192, 193, 194, 196, 206, 208, 209, 210, 212, 213, 214, 215, 217, 218, 219, 221, 222, 224, 225, 227, 228, 230, 231, 233, 234, 236, 237, 239, 240, 241, 242, 244, 245, 246, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 270, 272, 274, 275, 277, 278, 279, 280, 281, 283, 284, 286, 287, 288, 289, 291, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 315, 316, 317, 318, 321, 379, 387, 388, 389, 390, 392, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 418, 420, 421, 422, 423, 424, 426, 427, 428, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 453, 454, 456, 457, 458, 460, 464, 469, 470, 471], "excluded_lines": []}, "nemo/collections/common/parts/__init__.py": {"executed_lines": [15, 16, 17, 18, 19], "summary": {"covered_lines": 5, "num_statements": 5, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/common/parts/adapter_modules.py": {"executed_lines": [15, 16, 18, 19, 20, 22, 23, 26, 27, 31, 58, 64, 74, 76, 91, 137, 146, 156, 157, 158, 159, 160, 161, 162, 163, 166], "summary": {"covered_lines": 24, "num_statements": 61, "percent_covered": 39.34426229508197, "percent_covered_display": "39", "missing_lines": 37, "excluded_lines": 0}, "missing_lines": [42, 43, 45, 46, 47, 51, 52, 53, 54, 56, 62, 70, 71, 100, 102, 104, 105, 107, 108, 110, 111, 118, 119, 126, 127, 129, 132, 135, 139, 140, 142, 143, 144, 147, 150, 151, 153], "excluded_lines": []}, "nemo/collections/common/parts/mlm_scorer.py": {"executed_lines": [16, 18, 19, 20, 21, 23, 26, 27, 39, 45, 87], "summary": {"covered_lines": 11, "num_statements": 46, "percent_covered": 23.91304347826087, "percent_covered_display": "24", "missing_lines": 35, "excluded_lines": 0}, "missing_lines": [34, 35, 36, 37, 43, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 91, 92, 93], "excluded_lines": []}, "nemo/collections/common/parts/multi_layer_perceptron.py": {"executed_lines": [15, 18, 19, 30, 50, 51, 54], "summary": {"covered_lines": 6, "num_statements": 24, "percent_covered": 25.0, "percent_covered_display": "25", "missing_lines": 18, "excluded_lines": 0}, "missing_lines": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 55, 56, 57, 59, 60, 61], "excluded_lines": []}, "nemo/collections/common/parts/patch_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 3, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 3, "excluded_lines": 0}, "missing_lines": [15, 18, 19], "excluded_lines": []}, "nemo/collections/common/parts/preprocessing/__init__.py": {"executed_lines": [1], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/common/parts/preprocessing/cleaners.py": {"executed_lines": [15, 17, 18, 20, 22, 24, 25, 26, 27, 28, 30, 71, 90, 142, 145, 157, 162, 168, 179, 187, 188, 192, 196, 217], "summary": {"covered_lines": 24, "num_statements": 101, "percent_covered": 23.762376237623762, "percent_covered_display": "24", "missing_lines": 77, "excluded_lines": 0}, "missing_lines": [146, 147, 148, 149, 150, 151, 152, 153, 154, 158, 159, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 189, 190, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 212, 213, 215, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 238, 240, 245, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 259], "excluded_lines": []}, "nemo/collections/common/parts/preprocessing/collections.py": {"executed_lines": [15, 16, 17, 18, 19, 21, 23, 24, 27, 28, 30, 33, 34, 36, 38, 59, 60, 62, 74, 75, 91, 92, 94, 99, 202, 203, 205, 210, 310, 311, 313, 346, 347, 349, 382, 383, 385, 387, 453, 454, 456, 496, 532, 533, 535, 537, 585, 613, 614, 616, 636, 663, 664, 666, 671, 769, 770, 772, 881, 914, 939, 940, 943, 945, 1001, 1002, 1005, 1038, 1117, 1118, 1120, 1122, 1185, 1186, 1188, 1227, 1252, 1253, 1255, 1260, 1373, 1374, 1376], "summary": {"covered_lines": 64, "num_statements": 569, "percent_covered": 11.24780316344464, "percent_covered_display": "11", "missing_lines": 505, "excluded_lines": 0}, "missing_lines": [46, 47, 48, 50, 51, 52, 54, 56, 70, 72, 76, 77, 79, 80, 81, 82, 83, 85, 86, 88, 136, 137, 138, 139, 141, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 158, 159, 160, 161, 166, 168, 170, 172, 173, 174, 175, 177, 179, 180, 181, 182, 183, 184, 187, 188, 190, 191, 192, 194, 196, 197, 199, 247, 248, 249, 250, 252, 256, 257, 258, 259, 261, 262, 263, 264, 266, 267, 269, 270, 271, 272, 274, 276, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 295, 296, 298, 299, 300, 302, 304, 305, 307, 323, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 359, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 413, 414, 415, 416, 417, 418, 420, 421, 422, 424, 425, 426, 428, 429, 431, 432, 433, 436, 437, 439, 440, 441, 443, 445, 446, 447, 448, 450, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 492, 494, 497, 500, 501, 502, 503, 505, 506, 509, 510, 513, 514, 515, 516, 517, 518, 520, 522, 529, 553, 554, 558, 560, 561, 563, 565, 567, 568, 570, 571, 572, 574, 575, 576, 579, 580, 582, 583, 596, 597, 598, 600, 601, 602, 604, 605, 607, 609, 610, 629, 630, 631, 632, 634, 637, 640, 641, 642, 643, 645, 648, 651, 652, 654, 658, 660, 712, 713, 714, 715, 717, 720, 731, 732, 734, 747, 748, 749, 752, 753, 755, 756, 757, 759, 761, 764, 766, 805, 806, 807, 808, 809, 810, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 908, 909, 910, 911, 912, 916, 917, 918, 919, 920, 922, 925, 926, 927, 928, 929, 936, 969, 970, 971, 973, 975, 976, 977, 978, 980, 981, 982, 983, 985, 986, 989, 990, 992, 993, 995, 996, 998, 1015, 1016, 1018, 1020, 1021, 1024, 1027, 1030, 1031, 1032, 1033, 1034, 1036, 1049, 1054, 1056, 1057, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1072, 1074, 1077, 1080, 1081, 1083, 1086, 1088, 1089, 1092, 1093, 1095, 1097, 1098, 1101, 1102, 1105, 1106, 1109, 1110, 1112, 1142, 1143, 1144, 1145, 1146, 1148, 1149, 1151, 1153, 1154, 1155, 1157, 1158, 1159, 1161, 1162, 1163, 1165, 1166, 1167, 1170, 1171, 1173, 1174, 1175, 1177, 1179, 1180, 1181, 1182, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1217, 1218, 1220, 1221, 1222, 1223, 1225, 1228, 1231, 1232, 1233, 1234, 1235, 1236, 1239, 1242, 1243, 1245, 1247, 1249, 1299, 1300, 1301, 1302, 1304, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1327, 1328, 1330, 1331, 1332, 1333, 1335, 1337, 1339, 1341, 1342, 1343, 1344, 1346, 1348, 1351, 1352, 1353, 1354, 1355, 1358, 1359, 1361, 1362, 1363, 1365, 1367, 1368, 1370, 1386, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1407], "excluded_lines": []}, "nemo/collections/common/parts/preprocessing/manifest.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 28, 34, 35, 41, 105, 191, 204], "summary": {"covered_lines": 17, "num_statements": 124, "percent_covered": 13.709677419354838, "percent_covered_display": "14", "missing_lines": 107, "excluded_lines": 0}, "missing_lines": [29, 36, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 106, 109, 110, 111, 112, 115, 116, 117, 118, 120, 121, 129, 130, 131, 132, 135, 136, 141, 142, 143, 144, 145, 146, 147, 149, 152, 153, 154, 155, 156, 157, 159, 160, 161, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 188, 192, 194, 195, 197, 198, 200, 201, 228, 230, 239, 241, 242, 246, 247, 254, 255, 256, 257, 262, 263, 266, 268, 270, 272, 273, 275, 277, 278, 280], "excluded_lines": []}, "nemo/collections/common/parts/preprocessing/parsers.py": {"executed_lines": [15, 20, 21, 23, 26, 27, 35, 69, 81, 89, 108, 126, 127, 129, 131, 148, 161, 176, 177, 179, 181, 193, 206, 218, 221], "summary": {"covered_lines": 22, "num_statements": 103, "percent_covered": 21.359223300970875, "percent_covered_display": "21", "missing_lines": 81, "excluded_lines": 0}, "missing_lines": [59, 60, 61, 62, 63, 64, 66, 67, 70, 71, 72, 73, 75, 76, 78, 79, 82, 84, 85, 87, 90, 92, 93, 94, 96, 97, 98, 100, 101, 104, 106, 109, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 123, 141, 143, 144, 145, 146, 149, 151, 152, 154, 155, 157, 159, 163, 164, 170, 171, 173, 189, 191, 194, 196, 197, 199, 200, 202, 204, 208, 209, 212, 213, 215, 243, 244, 246, 247, 249, 250, 252], "excluded_lines": []}, "nemo/collections/common/parts/ptl_overrides.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 6, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 6, "excluded_lines": 0}, "missing_lines": [15, 16, 19, 20, 21, 23], "excluded_lines": []}, "nemo/collections/common/parts/rnn.py": {"executed_lines": [16, 17, 19, 20, 22, 25, 121, 122, 134, 138, 151, 152, 227, 238, 239, 241, 274, 283, 287, 288, 295, 336, 358, 380, 386, 387, 391, 395, 407, 439, 440, 444, 455, 456, 473, 478, 498, 505, 506, 510, 536], "summary": {"covered_lines": 37, "num_statements": 209, "percent_covered": 17.70334928229665, "percent_covered_display": "18", "missing_lines": 172, "excluded_lines": 0}, "missing_lines": [75, 76, 78, 79, 91, 92, 106, 107, 135, 136, 139, 141, 142, 143, 145, 146, 147, 148, 191, 193, 197, 199, 200, 201, 202, 203, 204, 205, 209, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 230, 232, 233, 235, 253, 255, 256, 258, 260, 272, 277, 278, 279, 280, 281, 284, 310, 311, 313, 314, 315, 317, 331, 332, 334, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 354, 355, 356, 367, 368, 370, 372, 373, 378, 381, 382, 383, 392, 393, 397, 398, 399, 400, 401, 402, 403, 404, 419, 420, 422, 423, 425, 426, 428, 429, 431, 441, 442, 447, 448, 449, 450, 451, 452, 457, 458, 459, 460, 461, 464, 465, 466, 468, 470, 471, 474, 475, 476, 481, 482, 483, 484, 485, 487, 488, 489, 490, 492, 493, 495, 501, 502, 507, 508, 513, 514, 515, 516, 517, 524, 526, 527, 528, 529, 530, 531, 532, 533, 548, 549, 550, 551, 553, 554, 556, 557, 558, 559, 561], "excluded_lines": []}, "nemo/collections/common/parts/transformer_utils.py": {"executed_lines": [15, 16, 18, 20, 23, 51, 77], "summary": {"covered_lines": 7, "num_statements": 29, "percent_covered": 24.137931034482758, "percent_covered_display": "24", "missing_lines": 22, "excluded_lines": 0}, "missing_lines": [40, 41, 42, 43, 44, 45, 46, 47, 48, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79], "excluded_lines": []}, "nemo/collections/common/parts/utils.py": {"executed_lines": [15, 16, 17, 19, 21, 23, 34, 49, 72, 89, 101], "summary": {"covered_lines": 11, "num_statements": 41, "percent_covered": 26.829268292682926, "percent_covered_display": "27", "missing_lines": 30, "excluded_lines": 0}, "missing_lines": [41, 42, 43, 44, 45, 46, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 82, 83, 84, 86, 98, 103, 104, 105], "excluded_lines": []}, "nemo/collections/common/tokenizers/__init__.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 21, 22, 23], "summary": {"covered_lines": 9, "num_statements": 9, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/common/tokenizers/aggregate_tokenizer.py": {"executed_lines": [15, 17, 19, 20, 22, 25, 26, 33, 37, 38, 49, 90, 108, 112, 119, 126, 139, 143, 154, 168, 195, 215, 227, 228, 231, 232], "summary": {"covered_lines": 25, "num_statements": 148, "percent_covered": 16.89189189189189, "percent_covered_display": "17", "missing_lines": 123, "excluded_lines": 0}, "missing_lines": [27, 28, 34, 51, 52, 56, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 71, 72, 76, 84, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 109, 110, 113, 114, 115, 117, 120, 121, 123, 124, 127, 128, 130, 131, 132, 133, 134, 135, 137, 140, 141, 144, 146, 147, 148, 149, 150, 152, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 193, 196, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 213, 216, 217, 218, 219, 221, 222, 223, 224, 225, 229, 233], "excluded_lines": []}, "nemo/collections/common/tokenizers/bytelevel_tokenizers.py": {"executed_lines": [15, 17, 19, 22, 23, 28, 31, 34, 38, 39, 55, 58, 61, 64, 69, 77, 85, 91, 97, 98, 101, 102, 105, 106, 109, 110], "summary": {"covered_lines": 25, "num_statements": 63, "percent_covered": 39.682539682539684, "percent_covered_display": "40", "missing_lines": 38, "excluded_lines": 0}, "missing_lines": [29, 32, 35, 40, 41, 42, 47, 48, 49, 50, 52, 56, 59, 62, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 86, 87, 89, 92, 93, 95, 99, 103, 107, 111], "excluded_lines": []}, "nemo/collections/common/tokenizers/canary_tokenizer.py": {"executed_lines": [14, 15, 16, 17, 19, 20, 22, 24, 27, 30, 31, 35, 45, 46, 49, 50, 53, 54, 57, 58, 61, 66, 67], "summary": {"covered_lines": 22, "num_statements": 49, "percent_covered": 44.89795918367347, "percent_covered_display": "45", "missing_lines": 27, "excluded_lines": 0}, "missing_lines": [36, 39, 40, 42, 43, 47, 51, 55, 59, 62, 63, 64, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 91, 92], "excluded_lines": []}, "nemo/collections/common/tokenizers/char_tokenizer.py": {"executed_lines": [14, 15, 16, 17, 18, 19, 20, 22, 24, 27, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 44, 47, 48, 89, 149, 150, 171, 172, 194, 195, 238, 239, 246, 247, 260, 261, 288, 307, 310, 314, 318, 321, 324, 327, 328, 336, 337, 341, 342, 346, 347, 351, 352, 356, 357, 361, 362, 366, 367, 371, 372, 405, 406, 419, 420, 437, 438], "summary": {"covered_lines": 66, "num_statements": 249, "percent_covered": 26.50602409638554, "percent_covered_display": "27", "missing_lines": 183, "excluded_lines": 0}, "missing_lines": [41, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 117, 118, 119, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 151, 152, 153, 157, 158, 162, 163, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 206, 207, 211, 212, 213, 214, 218, 219, 221, 225, 226, 231, 232, 236, 240, 241, 248, 249, 250, 254, 255, 262, 263, 264, 265, 270, 271, 277, 282, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 303, 304, 305, 308, 311, 312, 315, 316, 319, 322, 325, 329, 330, 331, 338, 339, 343, 344, 348, 349, 353, 354, 358, 359, 363, 364, 368, 369, 381, 382, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 402, 403, 407, 408, 409, 413, 414, 421, 422, 426, 427, 431, 432, 433, 485, 488, 489, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 521], "excluded_lines": []}, "nemo/collections/common/tokenizers/chinese_tokenizers.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 17, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 17, "excluded_lines": 0}, "missing_lines": [34, 35, 37, 38, 39, 42, 47, 48, 50, 51, 53, 54, 58, 59, 61, 62, 63], "excluded_lines": []}, "nemo/collections/common/tokenizers/column_coder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 208, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 208, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 22, 24, 27, 28, 33, 35, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 59, 60, 65, 68, 69, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 113, 114, 116, 117, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 186, 187, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 253, 254, 257, 260, 261, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305], "excluded_lines": []}, "nemo/collections/common/tokenizers/en_ja_tokenizers.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 40, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 40, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 31, 38, 39, 40, 41, 42, 46, 54, 56, 60, 61, 63, 66, 67, 69, 72, 77, 78, 79, 81, 83, 84, 88, 89, 91, 95, 97, 98], "excluded_lines": []}, "nemo/collections/common/tokenizers/fairseq_tokenizer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 62, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 62, "excluded_lines": 0}, "missing_lines": [22, 27, 28, 29, 30, 32, 35, 36, 37, 38, 39, 42, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 60, 61, 62, 63, 66, 67, 70, 73, 74, 75, 76, 78, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 95, 96, 99, 100, 101, 104, 107, 108, 110, 113, 114, 115, 116, 117, 118, 119, 120, 126], "excluded_lines": []}, "nemo/collections/common/tokenizers/huggingface/__init__.py": {"executed_lines": [15], "summary": {"covered_lines": 1, "num_statements": 1, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/common/tokenizers/huggingface/auto_tokenizer.py": {"executed_lines": [15, 16, 18, 20, 21, 23, 28, 29, 33, 162, 163, 166, 186, 187, 191, 195, 199, 202, 206, 210, 215, 221, 222, 226, 227, 232, 233, 238, 239, 244, 245, 249, 250, 255, 256, 261, 262, 267, 268, 273, 274, 277], "summary": {"covered_lines": 41, "num_statements": 131, "percent_covered": 31.297709923664122, "percent_covered_display": "31", "missing_lines": 90, "excluded_lines": 0}, "missing_lines": [65, 67, 68, 73, 74, 81, 88, 89, 93, 94, 98, 99, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 154, 159, 160, 164, 178, 180, 181, 182, 183, 184, 189, 192, 193, 196, 197, 200, 203, 204, 207, 208, 211, 212, 213, 216, 217, 218, 219, 223, 224, 228, 229, 230, 234, 235, 236, 240, 241, 242, 247, 251, 252, 253, 257, 258, 259, 263, 264, 265, 269, 270, 271, 275, 279], "excluded_lines": []}, "nemo/collections/common/tokenizers/indic_tokenizers.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 15, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 15, "excluded_lines": 0}, "missing_lines": [15, 17, 20, 26, 27, 28, 29, 30, 31, 33, 41, 43, 44, 46, 47], "excluded_lines": []}, "nemo/collections/common/tokenizers/moses_tokenizers.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 13, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 13, "excluded_lines": 0}, "missing_lines": [15, 17, 20, 25, 26, 27, 28, 30, 38, 40, 44, 46, 47], "excluded_lines": []}, "nemo/collections/common/tokenizers/regex_tokenizer.py": {"executed_lines": [16, 17, 18, 20, 22, 23, 25, 27, 28, 29, 30, 31, 32, 35, 36, 42, 89, 94, 100, 101, 104, 109, 125, 131, 141, 164, 169, 173, 174, 177, 178, 181, 182, 185, 186, 189, 190, 193, 194, 197, 215, 230, 264, 290], "summary": {"covered_lines": 43, "num_statements": 178, "percent_covered": 24.15730337078652, "percent_covered_display": "24", "missing_lines": 135, "excluded_lines": 0}, "missing_lines": [63, 64, 65, 66, 67, 68, 69, 72, 73, 76, 84, 87, 91, 92, 95, 96, 97, 98, 102, 105, 107, 110, 111, 112, 113, 116, 117, 118, 120, 122, 123, 126, 127, 128, 129, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 160, 162, 165, 166, 167, 170, 171, 175, 179, 183, 187, 191, 195, 201, 202, 203, 205, 207, 208, 210, 211, 213, 219, 221, 222, 223, 224, 226, 227, 228, 234, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 253, 254, 255, 257, 259, 260, 262, 268, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 294, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 313, 314], "excluded_lines": []}, "nemo/collections/common/tokenizers/sentencepiece_tokenizer.py": {"executed_lines": [15, 16, 18, 19, 21, 22, 23, 25, 28, 29, 39, 60, 90, 120, 126, 145, 151, 160, 168, 192, 193, 200, 201, 208, 209, 216, 217, 223, 224, 230, 231, 237, 238, 241, 242, 249, 250, 259], "summary": {"covered_lines": 37, "num_statements": 229, "percent_covered": 16.157205240174672, "percent_covered_display": "16", "missing_lines": 192, "excluded_lines": 0}, "missing_lines": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 85, 86, 88, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 105, 106, 108, 109, 111, 112, 113, 115, 116, 118, 121, 122, 124, 127, 128, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 149, 152, 153, 154, 155, 157, 158, 161, 162, 163, 164, 165, 166, 169, 170, 172, 173, 174, 178, 179, 180, 181, 182, 183, 184, 188, 189, 190, 194, 195, 197, 198, 202, 203, 205, 206, 210, 211, 213, 214, 218, 219, 221, 225, 226, 228, 232, 233, 235, 239, 244, 247, 251, 252, 256, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 328, 329, 330, 331, 333, 334, 335, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 366, 368, 369, 371, 372, 374, 377, 381, 383, 384, 385, 387, 388, 390, 391, 393, 395, 398, 399, 400, 401, 402], "excluded_lines": []}, "nemo/collections/common/tokenizers/tabular_tokenizer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 144, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 144, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 20, 21, 23, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 71, 72, 73, 75, 81, 82, 83, 84, 85, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199], "excluded_lines": []}, "nemo/collections/common/tokenizers/text_to_speech/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/common/tokenizers/text_to_speech/ipa_lexicon.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 43, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 43, "excluded_lines": 0}, "missing_lines": [18, 20, 26, 33, 66, 109, 114, 115, 116, 119, 120, 121, 126, 127, 129, 130, 131, 132, 133, 135, 139, 142, 143, 144, 147, 148, 151, 152, 153, 155, 157, 160, 162, 163, 165, 176, 178, 204, 206, 207, 208, 222, 223], "excluded_lines": []}, "nemo/collections/common/tokenizers/text_to_speech/tokenizer_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 61, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 61, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 21, 35, 39, 50, 51, 52, 53, 56, 61, 62, 63, 64, 66, 67, 69, 72, 81, 82, 83, 84, 86, 88, 91, 112, 113, 115, 118, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 175, 177, 180, 181, 182, 185, 186, 187, 190, 191, 194, 195, 198, 199, 202, 203], "excluded_lines": []}, "nemo/collections/common/tokenizers/text_to_speech/tokenizer_wrapper.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 30, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 30, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 22, 23, 24, 25, 28, 30, 31, 33, 34, 36, 37, 39, 40, 42, 43, 45, 46, 48, 49, 50, 52, 53, 54, 56, 57, 58], "excluded_lines": []}, "nemo/collections/common/tokenizers/text_to_speech/tts_tokenizers.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 328, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 328, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 20, 22, 27, 35, 36, 39, 40, 42, 53, 55, 59, 61, 62, 65, 67, 69, 70, 71, 73, 74, 76, 77, 78, 80, 81, 83, 84, 86, 88, 90, 93, 96, 103, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 138, 139, 141, 143, 145, 147, 148, 150, 151, 153, 154, 156, 157, 159, 160, 163, 164, 165, 167, 168, 170, 173, 174, 194, 205, 207, 208, 209, 211, 232, 243, 245, 247, 260, 261, 272, 274, 276, 289, 290, 301, 302, 304, 317, 318, 329, 331, 338, 359, 360, 361, 371, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 391, 392, 394, 395, 397, 400, 402, 410, 431, 432, 442, 444, 446, 447, 449, 450, 452, 453, 455, 456, 458, 459, 462, 463, 465, 466, 468, 471, 473, 478, 483, 491, 528, 529, 530, 531, 532, 534, 535, 537, 538, 540, 541, 542, 544, 545, 546, 550, 552, 553, 555, 556, 557, 558, 560, 562, 563, 564, 565, 567, 568, 570, 573, 574, 575, 577, 587, 588, 590, 591, 594, 595, 597, 598, 600, 601, 603, 604, 605, 606, 607, 610, 611, 612, 614, 615, 617, 619, 620, 621, 622, 623, 624, 626, 627, 630, 631, 632, 671, 672, 677, 679, 680, 682, 683, 684, 686, 687, 689, 692, 693, 694, 696, 697, 700, 702, 704, 705, 707, 708, 710, 711, 712, 714, 716, 719, 721, 722, 724, 726, 727, 729, 731, 733, 734, 736, 738, 741, 744, 746, 748, 765, 766, 767, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 783, 784, 785, 787, 788, 791, 793, 794, 795, 796, 797, 798, 800, 801, 804, 806, 811, 813, 845, 846, 848, 849, 851, 852, 853, 855, 856, 857, 859, 861, 862, 864, 865, 866, 868, 869, 871, 873, 874, 875, 877, 879, 880, 881, 883, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 906, 907, 908, 911, 912, 913, 915, 916, 918], "excluded_lines": []}, "nemo/collections/common/tokenizers/tokenizer_spec.py": {"executed_lines": [15, 16, 17, 19, 22, 23, 27, 28, 31, 32, 35, 36, 39, 40, 43, 44, 47, 48, 51, 54, 55, 58, 59, 63, 64, 70, 71, 77, 78, 84, 85, 94, 95, 101, 102, 108, 109], "summary": {"covered_lines": 36, "num_statements": 68, "percent_covered": 52.94117647058823, "percent_covered_display": "53", "missing_lines": 32, "excluded_lines": 0}, "missing_lines": [29, 33, 37, 41, 45, 49, 52, 56, 61, 66, 67, 68, 73, 74, 75, 80, 81, 82, 87, 88, 89, 91, 92, 97, 98, 99, 104, 105, 106, 111, 112, 113], "excluded_lines": []}, "nemo/collections/common/tokenizers/word_tokenizer.py": {"executed_lines": [15, 17, 19, 22, 23, 25, 60, 70], "summary": {"covered_lines": 7, "num_statements": 17, "percent_covered": 41.1764705882353, "percent_covered_display": "41", "missing_lines": 10, "excluded_lines": 0}, "missing_lines": [49, 61, 62, 63, 64, 65, 67, 68, 71, 72], "excluded_lines": []}, "nemo/collections/common/tokenizers/youtokentome_tokenizer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 43, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 43, "excluded_lines": 0}, "missing_lines": [15, 17, 19, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 40, 42, 43, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 77], "excluded_lines": []}, "nemo/collections/multimodal/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/data/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/data/clip/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/data/clip/augmentations/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/data/clip/augmentations/augmentations.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 82, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 82, "excluded_lines": 0}, "missing_lines": [14, 19, 20, 22, 23, 25, 26, 27, 37, 38, 39, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 88, 97, 98, 99, 100, 102, 103, 104, 106, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 125, 127, 128, 129, 139, 149, 150, 153, 155, 156, 158, 162, 165], "excluded_lines": []}, "nemo/collections/multimodal/data/clip/clip_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 86, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 86, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 20, 21, 22, 23, 24, 26, 27, 29, 31, 33, 36, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 74, 76, 77, 78, 79, 80, 81, 82, 85, 89, 90, 91, 92, 93, 94, 97, 98, 99, 102, 105, 107, 108, 116, 117, 118, 119, 127, 131, 132, 133, 135, 137, 138, 139, 141, 143, 153, 154, 155, 157, 159, 168, 169, 177, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192], "excluded_lines": []}, "nemo/collections/multimodal/data/clip/imagenet_zeroshot_data.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 2, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [16, 1019], "excluded_lines": []}, "nemo/collections/multimodal/data/common/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/data/common/data_samplers.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 69, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 69, "excluded_lines": 0}, "missing_lines": [14, 16, 18, 20, 21, 23, 24, 26, 29, 30, 31, 33, 34, 36, 37, 40, 41, 66, 67, 68, 69, 71, 72, 73, 76, 78, 79, 80, 81, 82, 84, 86, 87, 88, 90, 92, 93, 94, 95, 96, 98, 105, 106, 108, 110, 111, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 141], "excluded_lines": []}, "nemo/collections/multimodal/data/common/utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 12, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 12, "excluded_lines": 0}, "missing_lines": [15, 16, 19, 20, 21, 22, 23, 24, 26, 27, 31, 33], "excluded_lines": []}, "nemo/collections/multimodal/data/common/webdataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 186, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 186, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 47, 49, 50, 52, 54, 56, 58, 59, 62, 70, 71, 72, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 88, 91, 96, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 123, 124, 125, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 174, 175, 181, 182, 184, 185, 186, 187, 190, 192, 195, 196, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 224, 225, 227, 229, 230, 231, 232, 233, 234, 236, 237, 238, 241, 252, 254, 255, 264, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 284, 286, 287, 290, 291, 292, 293, 295, 296, 297, 301, 302, 303, 305, 306, 308, 309, 310, 315, 316, 317, 318], "excluded_lines": []}, "nemo/collections/multimodal/data/common/webdataset_s3.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 113, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 113, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 17, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 37, 39, 42, 44, 46, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 82, 84, 86, 87, 88, 89, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 144, 166, 174, 175, 176, 178, 180, 183, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 255, 256, 265, 266, 267, 268], "excluded_lines": []}, "nemo/collections/multimodal/data/controlnet/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/data/controlnet/controlnet_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 60, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 60, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 21, 24, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 57, 60, 63, 64, 65, 66, 67, 68, 69, 71, 73, 75, 76, 77, 79, 80, 81, 91, 99, 100, 101, 108, 111, 114, 117, 118, 119, 120, 121, 122, 124, 125, 127, 135, 136, 137, 145], "excluded_lines": []}, "nemo/collections/multimodal/data/dreambooth/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/data/dreambooth/dreambooth_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 89, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 89, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 31, 47, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 86, 87, 96, 97, 100, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 133, 134, 136, 137, 138, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164], "excluded_lines": []}, "nemo/collections/multimodal/data/imagen/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/data/imagen/augmentations/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/data/imagen/augmentations/augmentations.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 35, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 35, "excluded_lines": 0}, "missing_lines": [14, 16, 18, 21, 28, 29, 30, 31, 33, 34, 37, 43, 44, 45, 46, 47, 49, 52, 53, 55, 58, 59, 61, 62, 63, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76], "excluded_lines": []}, "nemo/collections/multimodal/data/imagen/augmentations/corruption.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 15, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 15, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 19, 22, 27, 28, 30, 31, 33, 34, 35, 38, 39], "excluded_lines": []}, "nemo/collections/multimodal/data/imagen/imagen_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 85, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 85, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 21, 22, 26, 27, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 58, 59, 62, 63, 64, 65, 66, 69, 71, 72, 74, 75, 76, 77, 82, 83, 85, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 105, 108, 109, 111, 112, 113, 119, 121, 122, 124, 126, 129, 130, 131, 132, 134, 138, 139, 140, 141, 142, 144, 145, 146, 148, 156], "excluded_lines": []}, "nemo/collections/multimodal/data/instruct_pix2pix/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/data/instruct_pix2pix/edit_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 78, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 78, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 35, 36, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 84, 85, 87, 88, 89, 90, 92, 95, 96, 99, 100, 101, 102, 104, 105, 107, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 135, 137], "excluded_lines": []}, "nemo/collections/multimodal/data/nerf/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/data/nerf/cameras.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 43, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 43, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 22, 27, 36, 37, 38, 40, 41, 45, 47, 48, 52, 55, 60, 67, 72, 75, 80, 91, 92, 93, 95, 106, 107, 108, 109, 111, 122, 137, 140, 145, 158, 159, 160, 161, 162, 164, 172, 179, 187], "excluded_lines": []}, "nemo/collections/multimodal/data/nerf/circle_poses.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 50, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 50, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 21, 22, 30, 57, 58, 59, 60, 63, 73, 76, 80, 82, 85, 90, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 143, 147, 149, 151, 168, 169, 170, 173, 184, 187, 188, 191, 196, 197, 199, 209, 211, 220], "excluded_lines": []}, "nemo/collections/multimodal/data/nerf/random_poses.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 112, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 112, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 23, 24, 32, 44, 47, 90, 91, 92, 93, 96, 99, 100, 102, 107, 110, 111, 112, 115, 120, 125, 128, 130, 133, 151, 164, 166, 167, 168, 170, 173, 192, 193, 194, 196, 197, 198, 200, 202, 205, 210, 265, 266, 267, 268, 271, 272, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 302, 303, 305, 308, 312, 321, 322, 324, 332, 335, 339, 343, 347, 352, 360, 362, 363, 365, 375, 388, 405, 406, 407, 409, 410, 411, 412, 415, 418, 419, 422, 427, 428, 430, 432, 442], "excluded_lines": []}, "nemo/collections/multimodal/data/nerf/utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 63, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 63, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 22, 45, 46, 49, 52, 53, 54, 55, 58, 59, 61, 64, 79, 80, 81, 82, 83, 85, 88, 109, 110, 111, 113, 116, 117, 146, 147, 149, 154, 155, 157, 159, 160, 162, 163, 164, 166, 169, 171, 172, 173, 175, 177, 178, 179, 180, 182, 183, 185, 186, 188, 191, 209, 210, 211, 213, 214, 215, 217], "excluded_lines": []}, "nemo/collections/multimodal/data/neva/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/data/neva/conversation.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 192, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 192, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 34, 35, 36, 37, 38, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 133, 135, 136, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 234, 235, 236, 244, 255, 266, 277, 310, 322, 335, 348, 352, 362, 374, 386, 399, 400, 419, 420], "excluded_lines": []}, "nemo/collections/multimodal/data/neva/neva_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 435, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 435, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 47, 49, 50, 53, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 97, 120, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 134, 135, 136, 137, 138, 141, 160, 161, 162, 163, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 183, 184, 185, 186, 187, 189, 192, 208, 209, 212, 213, 214, 215, 217, 219, 220, 221, 222, 223, 224, 226, 229, 237, 238, 239, 240, 243, 244, 245, 246, 247, 249, 250, 252, 253, 254, 255, 257, 258, 259, 260, 261, 263, 264, 269, 270, 271, 273, 274, 276, 279, 294, 295, 298, 299, 300, 301, 303, 305, 306, 307, 308, 309, 310, 312, 314, 322, 323, 324, 325, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 352, 353, 354, 356, 357, 359, 362, 384, 386, 389, 390, 391, 392, 394, 395, 397, 398, 399, 400, 403, 404, 405, 406, 410, 411, 412, 413, 414, 415, 417, 419, 426, 429, 430, 431, 432, 433, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 450, 451, 452, 454, 455, 457, 458, 459, 461, 462, 464, 467, 489, 491, 494, 495, 496, 497, 499, 500, 502, 503, 504, 505, 506, 510, 511, 512, 513, 514, 515, 516, 518, 520, 527, 530, 531, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 550, 551, 556, 557, 558, 560, 561, 563, 566, 586, 587, 588, 589, 591, 592, 594, 595, 601, 602, 603, 604, 605, 607, 608, 609, 611, 612, 614, 617, 620, 621, 622, 623, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 636, 638, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 667, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 682, 683, 685, 687, 690, 691, 692, 693, 694, 695, 698, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 721, 722, 725, 726, 727, 729, 731, 734, 735, 736, 739, 742, 744, 745, 747, 748, 749, 750, 751, 752, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 773, 776, 777, 780, 781, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 795, 796, 797, 799, 807, 808, 809, 811, 812, 814, 816, 824, 827, 829, 830, 831, 832, 833, 834, 835, 836, 841, 843, 861], "excluded_lines": []}, "nemo/collections/multimodal/data/nsfw/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/data/nsfw/nsfw_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 30, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 30, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 19, 21, 24, 30, 31, 33, 34, 36, 37, 38, 40, 42, 44, 45, 47, 49, 50, 52, 53, 54, 57, 61, 69, 70, 72, 74], "excluded_lines": []}, "nemo/collections/multimodal/data/stable_diffusion/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/data/stable_diffusion/augmentation/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/data/stable_diffusion/augmentation/augmentations.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 40, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 40, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 69, 70, 71, 72, 73, 76, 77], "excluded_lines": []}, "nemo/collections/multimodal/data/stable_diffusion/stable_diffusion_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 206, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 206, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 18, 20, 21, 25, 26, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 61, 62, 65, 68, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 93, 94, 95, 105, 106, 107, 116, 117, 118, 119, 127, 136, 139, 142, 143, 146, 147, 148, 149, 150, 151, 153, 154, 156, 157, 159, 160, 161, 169, 177, 178, 179, 180, 181, 189, 197, 200, 201, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 217, 219, 220, 221, 230, 238, 239, 240, 241, 242, 251, 259, 262, 265, 267, 268, 269, 270, 271, 272, 273, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 302, 303, 305, 306, 308, 309, 310, 312, 313, 316, 318, 320, 321, 322, 331, 332, 333, 342, 345, 348, 350, 351, 352, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 381, 382, 383, 386, 387, 389, 390, 391, 392, 394, 395, 396, 405, 406, 407, 416], "excluded_lines": []}, "nemo/collections/multimodal/losses/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/losses/clip_loss.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 62, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 62, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 17, 18, 20, 22, 23, 25, 27, 29, 32, 57, 58, 59, 61, 64, 65, 68, 69, 70, 71, 73, 76, 77, 78, 79, 81, 84, 111, 114, 115, 116, 117, 120, 121, 123, 124, 126, 127, 128, 129, 130, 134, 135, 136, 138, 139, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 159, 160], "excluded_lines": []}, "nemo/collections/multimodal/models/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/models/multimodal_llm/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/models/multimodal_llm/neva/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/models/multimodal_llm/neva/neva_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 485, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 485, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 29, 33, 37, 38, 39, 40, 41, 42, 46, 47, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 67, 69, 71, 72, 73, 75, 77, 79, 82, 85, 86, 89, 90, 92, 93, 94, 96, 97, 99, 100, 101, 103, 105, 106, 107, 109, 110, 113, 122, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 148, 150, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 189, 190, 191, 193, 196, 199, 200, 201, 202, 204, 205, 209, 210, 213, 216, 217, 220, 223, 225, 228, 230, 233, 241, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 259, 260, 263, 264, 265, 266, 267, 269, 272, 273, 274, 275, 278, 279, 280, 289, 290, 292, 296, 297, 298, 299, 301, 303, 304, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 331, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 354, 358, 362, 363, 367, 370, 373, 381, 384, 385, 387, 388, 389, 391, 394, 395, 396, 399, 407, 410, 411, 413, 414, 415, 417, 420, 421, 422, 425, 430, 431, 432, 434, 435, 436, 437, 443, 444, 451, 452, 453, 455, 457, 458, 460, 461, 463, 464, 466, 467, 468, 470, 489, 554, 558, 560, 562, 563, 565, 568, 569, 570, 573, 574, 575, 577, 583, 584, 585, 586, 587, 589, 591, 592, 594, 599, 600, 607, 608, 610, 611, 613, 614, 616, 622, 624, 625, 626, 627, 628, 630, 631, 633, 634, 635, 636, 637, 638, 640, 642, 644, 645, 646, 650, 655, 657, 658, 659, 661, 668, 670, 677, 678, 679, 680, 682, 684, 686, 688, 689, 690, 691, 692, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 713, 715, 716, 718, 725, 726, 727, 730, 732, 733, 735, 737, 738, 740, 742, 744, 745, 747, 748, 749, 751, 753, 754, 760, 762, 765, 766, 767, 769, 771, 772, 774, 775, 777, 778, 779, 781, 782, 783, 785, 786, 788, 795, 797, 804, 805, 806, 808, 809, 810, 812, 813, 814, 815, 816, 818, 824, 825, 826, 827, 829, 835, 836, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 854, 855, 857, 858, 860, 861, 862, 863, 864, 866, 868, 873, 875, 876, 877, 887, 888, 899, 901, 903, 904, 913, 914, 920, 922, 923, 925, 927, 929, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 944, 945, 946, 947, 949, 950, 951, 952, 954, 955, 960, 961, 965, 966, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 991, 996, 998, 999, 1001, 1002, 1003, 1007, 1008, 1012, 1013, 1016, 1018], "excluded_lines": []}, "nemo/collections/multimodal/models/nerf/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/models/nerf/base.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 16, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 16, "excluded_lines": 0}, "missing_lines": [15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 29, 30, 32, 33, 35, 36], "excluded_lines": []}, "nemo/collections/multimodal/models/nerf/dreamfusion.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 153, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 153, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 30, 31, 32, 34, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 58, 59, 61, 64, 67, 68, 69, 70, 72, 73, 74, 77, 78, 79, 80, 82, 84, 86, 87, 88, 89, 90, 91, 106, 107, 111, 114, 115, 116, 117, 118, 119, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 135, 138, 141, 144, 145, 146, 149, 150, 151, 152, 153, 155, 156, 157, 160, 163, 164, 167, 168, 170, 171, 172, 174, 175, 178, 180, 181, 182, 184, 186, 187, 190, 191, 193, 195, 197, 199, 201, 202, 203, 205, 213, 221, 223, 224, 225, 227, 228, 229, 231, 232, 240, 241, 249, 250, 252, 253, 255, 270, 284, 286, 287, 302, 303, 305, 306, 307, 309, 312, 313, 314, 315, 317, 319, 321, 323, 324, 325], "excluded_lines": []}, "nemo/collections/multimodal/models/nerf/txt2nerf_base.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 53, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 53, "excluded_lines": 0}, "missing_lines": [15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 52, 60, 61, 62, 64, 65, 66, 68, 69, 71, 72, 74, 75, 77, 78, 80, 81, 82, 84, 85, 87, 91, 92, 93], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/controlnet/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/controlnet/controlnet.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 514, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 514, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 37, 43, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 63, 65, 67, 68, 70, 71, 72, 75, 80, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 105, 106, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 124, 125, 126, 127, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 146, 147, 148, 151, 153, 154, 158, 159, 160, 163, 165, 166, 167, 169, 170, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 225, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 251, 252, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 284, 285, 318, 319, 320, 324, 325, 328, 330, 331, 333, 334, 336, 337, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 354, 355, 357, 358, 359, 360, 363, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 386, 389, 391, 409, 410, 411, 412, 413, 414, 415, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 439, 441, 442, 463, 464, 465, 466, 467, 468, 469, 485, 486, 487, 488, 489, 491, 492, 494, 495, 496, 498, 499, 536, 537, 539, 540, 542, 543, 544, 546, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 568, 573, 574, 575, 576, 577, 578, 580, 581, 582, 584, 586, 587, 590, 591, 592, 594, 596, 597, 599, 600, 601, 603, 604, 606, 607, 608, 609, 610, 611, 613, 614, 616, 617, 619, 622, 623, 624, 625, 629, 630, 635, 636, 638, 641, 643, 645, 647, 648, 649, 650, 651, 652, 654, 656, 657, 658, 659, 660, 662, 664, 666, 667, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 681, 682, 685, 686, 687, 690, 691, 695, 697, 710, 711, 712, 714, 715, 716, 717, 718, 720, 722, 723, 725, 727, 729, 739, 741, 743, 744, 746, 748, 749, 754, 758, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 777, 779, 784, 786, 790, 792, 795, 796, 797, 798, 799, 801, 802, 804, 805, 810, 811, 813, 816, 819, 821, 822, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 842, 843, 846, 848, 850, 851, 852, 854, 856, 857, 858, 859, 861, 873, 874, 876, 877, 878, 879, 881, 883, 890, 893, 894, 898, 901, 903, 905, 912, 913, 914, 916, 917, 918, 921, 924, 925, 927, 928, 929, 931, 932, 933, 934, 936, 937, 941, 944, 946, 947, 948, 949, 950, 951, 952, 953, 955, 956, 957, 958, 961, 970, 971, 972, 973, 976, 985, 986, 987, 988, 991, 995, 1001, 1003, 1007, 1008, 1012, 1013, 1014, 1016, 1017, 1019, 1020, 1021, 1023], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/controlnet/util.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 58, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 58, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 21, 22, 25, 26, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 73, 75, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 94, 95, 97, 98, 100, 101, 102], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/dreambooth/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/dreambooth/dreambooth.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 364, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 364, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 19, 20, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 47, 48, 49, 51, 53, 55, 58, 61, 64, 65, 66, 67, 69, 70, 72, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 97, 98, 99, 100, 102, 103, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 134, 135, 137, 138, 139, 140, 142, 143, 144, 146, 148, 149, 150, 151, 153, 154, 156, 157, 158, 165, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 182, 183, 185, 186, 187, 189, 190, 192, 194, 197, 198, 199, 200, 203, 204, 209, 210, 212, 215, 216, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 233, 235, 237, 238, 240, 241, 242, 244, 245, 248, 249, 250, 253, 254, 258, 260, 273, 274, 275, 277, 278, 279, 280, 281, 282, 284, 286, 287, 289, 291, 293, 304, 306, 308, 311, 312, 314, 316, 317, 322, 323, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 345, 347, 348, 350, 352, 354, 359, 361, 365, 367, 370, 371, 372, 373, 374, 376, 377, 379, 380, 382, 384, 387, 389, 390, 391, 392, 394, 396, 397, 398, 399, 400, 402, 403, 405, 407, 409, 410, 411, 413, 415, 422, 425, 426, 430, 433, 435, 437, 444, 445, 446, 448, 449, 450, 453, 454, 456, 457, 459, 460, 461, 462, 463, 464, 466, 483, 493, 502, 503, 505, 506, 508, 514, 516, 520, 521, 525, 526, 527, 529, 530, 531, 533, 535, 536, 548, 549, 550, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 565, 567, 570, 573, 574, 576, 578, 579, 580, 581, 584, 585, 586, 587, 588, 590, 591, 593, 594, 595, 596, 599, 600, 602, 603, 604, 605, 606, 607, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 637, 638, 640, 643, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/dreambooth/util.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 85, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 85, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 18, 20, 24, 25, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 72, 73, 84, 85, 86, 87, 96, 105, 106, 108, 111, 112, 113, 115, 116, 117, 118, 119, 121, 123, 124, 125, 128, 129, 130, 131, 132, 135, 139, 141, 142, 145, 149, 150, 153, 154, 156, 158, 159, 160, 162, 163, 164], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/imagen/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/imagen/imagen.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 320, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 320, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 43, 44, 45, 47, 49, 50, 52, 53, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 83, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 110, 113, 114, 115, 116, 117, 119, 120, 121, 123, 125, 127, 128, 129, 130, 132, 134, 135, 136, 137, 140, 142, 144, 152, 154, 155, 165, 169, 172, 175, 176, 177, 178, 182, 183, 185, 186, 188, 190, 192, 194, 195, 196, 197, 198, 199, 201, 203, 204, 206, 207, 208, 209, 210, 212, 214, 216, 217, 219, 220, 228, 229, 232, 233, 234, 235, 237, 239, 240, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 256, 257, 260, 262, 264, 265, 266, 268, 270, 271, 272, 273, 274, 278, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 295, 304, 305, 306, 307, 310, 319, 320, 321, 322, 325, 329, 330, 333, 334, 335, 338, 339, 343, 346, 359, 360, 361, 363, 364, 365, 366, 367, 370, 373, 374, 376, 378, 380, 391, 393, 395, 398, 399, 401, 405, 406, 411, 412, 415, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 434, 436, 441, 443, 447, 449, 452, 453, 454, 455, 456, 458, 459, 461, 468, 470, 471, 473, 482, 483, 487, 490, 492, 494, 501, 502, 503, 505, 506, 507, 510, 513, 514, 516, 517, 518, 520, 522, 528, 530, 534, 535, 539, 540, 541, 543, 544, 545, 547, 549, 550, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 585, 586, 590, 593, 596, 597, 598], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/imagen/imagen_pipeline.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 250, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 250, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 135, 136, 137, 140, 142, 143, 144, 147, 148, 150, 151, 154, 155, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 181, 182, 184, 186, 187, 188, 189, 190, 191, 193, 194, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 241, 242, 243, 245, 246, 247, 249, 250, 251, 253, 254, 255, 257, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 277, 280, 281, 283, 285, 286, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 305, 307, 308, 309, 310, 311, 312, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 348, 349, 350, 351, 353, 354, 356], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/imagen/precond.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 114, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 114, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 54, 55, 64, 65, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 86, 88, 89, 90, 92, 93, 94, 95, 97, 98, 100, 101, 102, 105, 106, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 174], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/instruct_pix2pix/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/instruct_pix2pix/ldm/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/instruct_pix2pix/ldm/ddpm_edit.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 135, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 135, "excluded_lines": 0}, "missing_lines": [14, 18, 19, 21, 22, 26, 30, 32, 33, 35, 37, 39, 42, 43, 46, 47, 48, 49, 51, 54, 55, 58, 59, 60, 61, 65, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 95, 96, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 125, 126, 129, 131, 132, 133, 134, 135, 136, 137, 140, 141, 143, 144, 146, 153, 156, 157, 161, 164, 166, 168, 175, 176, 177, 179, 180, 181, 183, 184, 185, 186, 188, 190, 191, 192, 193, 195, 196, 197, 198, 201, 203, 204, 205, 206, 209, 210, 211, 212, 213, 215, 216, 217, 218, 221, 222, 223, 224, 225, 227, 230, 231, 232, 234, 236, 237, 246, 247, 257, 259, 262], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/stable_diffusion/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/stable_diffusion/diffusion_engine.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 423, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 423, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 37, 38, 39, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 68, 70, 72, 74, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 115, 116, 118, 119, 120, 122, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 182, 183, 185, 187, 191, 192, 193, 195, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 239, 240, 248, 250, 251, 252, 254, 255, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 276, 277, 278, 280, 282, 284, 285, 286, 288, 291, 293, 294, 295, 296, 297, 302, 303, 305, 307, 311, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 332, 335, 336, 337, 340, 341, 346, 347, 349, 352, 353, 355, 357, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 372, 374, 376, 378, 379, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 397, 398, 401, 402, 403, 406, 407, 408, 410, 420, 421, 422, 424, 425, 426, 427, 428, 430, 432, 433, 435, 437, 439, 448, 450, 452, 455, 456, 458, 459, 460, 462, 463, 468, 469, 472, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 491, 493, 498, 500, 504, 506, 509, 510, 511, 512, 513, 515, 516, 518, 519, 524, 527, 528, 529, 530, 532, 534, 535, 536, 538, 539, 540, 542, 544, 546, 547, 548, 550, 552, 553, 556, 558, 560, 561, 563, 565, 567, 574, 577, 578, 582, 585, 587, 589, 596, 597, 598, 600, 601, 602, 605, 608, 609, 611, 612, 613, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 633, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 650, 659, 660, 661, 662, 665, 674, 675, 676, 677, 680, 684, 690, 692, 696, 697, 701, 702, 703, 705, 706, 707, 709, 711, 712, 713, 714, 716, 717, 718], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/stable_diffusion/diffusion_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 25, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 25, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 18, 20, 21, 24, 25, 26, 40, 42, 43, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 72, 73, 80], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/stable_diffusion/ldm/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/stable_diffusion/ldm/autoencoder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 377, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 377, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 18, 20, 21, 22, 23, 25, 26, 29, 32, 33, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 149, 150, 151, 153, 156, 157, 159, 161, 172, 173, 175, 177, 180, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 203, 213, 214, 217, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 240, 242, 243, 245, 246, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 293, 294, 295, 296, 298, 300, 301, 303, 304, 305, 306, 309, 310, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 343, 345, 346, 347, 348, 349, 350, 353, 354, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 407, 410, 411, 412, 413, 415, 419, 422, 423, 425, 428, 438, 440, 442, 445, 446, 448, 451, 452, 456, 457, 458, 460, 461, 462, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 488, 492, 493, 494, 496, 497, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 512, 513, 514, 516, 518, 527, 528, 529, 531, 533, 543, 544, 545, 547, 548, 549, 550, 554, 558, 559, 560, 561, 563, 564, 565, 573, 574, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 610, 611, 612, 613, 615, 616, 618, 619, 621, 622, 623, 624, 626, 627], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/stable_diffusion/ldm/ddpm.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1350, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1350, "excluded_lines": 0}, "missing_linesexcluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/stable_diffusion/ldm_config.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 110, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 110, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 46, 47, 48, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/stable_diffusion/samplers/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 2, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [14, 16], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/stable_diffusion/samplers/base_sampler.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 164, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 164, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 18, 20, 21, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 50, 51, 52, 53, 54, 55, 57, 58, 61, 62, 63, 67, 70, 71, 72, 73, 74, 75, 80, 82, 83, 84, 86, 87, 89, 90, 92, 93, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 135, 136, 137, 138, 140, 141, 150, 151, 168, 186, 188, 189, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 224, 225, 227, 228, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 301, 302, 304, 321, 322, 324, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 349, 364, 365, 366, 369, 372, 373, 374, 375, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/stable_diffusion/samplers/ddim.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 46, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 46, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 30, 31, 49, 50, 53, 67, 69, 87, 88, 91, 105, 107, 108, 111, 112, 113, 115, 116, 118, 119, 120, 125, 126, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 157], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/stable_diffusion/samplers/dpmsolver.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 258, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 258, "excluded_lines": 0}, "missing_lines": [14, 16, 18, 21, 22, 27, 28, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 58, 59, 60, 61, 63, 65, 69, 70, 73, 74, 75, 77, 78, 80, 81, 83, 87, 89, 93, 95, 99, 100, 101, 103, 107, 108, 109, 110, 111, 112, 113, 118, 120, 122, 123, 131, 132, 135, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 170, 171, 172, 173, 177, 178, 180, 184, 185, 186, 187, 189, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 216, 219, 220, 224, 225, 226, 227, 228, 230, 234, 236, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 254, 258, 259, 261, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 281, 285, 287, 291, 292, 293, 294, 295, 299, 300, 302, 303, 304, 305, 306, 307, 308, 310, 312, 313, 314, 315, 319, 320, 322, 324, 328, 329, 330, 331, 332, 333, 334, 339, 343, 344, 346, 347, 348, 349, 350, 351, 352, 357, 358, 364, 365, 370, 371, 376, 378, 382, 383, 384, 385, 386, 392, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 415, 421, 423, 427, 428, 429, 430, 431, 432, 434, 436, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 472, 473, 475, 476, 477, 478, 480, 481, 484, 485, 486, 487, 489, 490, 491, 492, 493], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/stable_diffusion/samplers/k_diffusion.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 522, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 522, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 18, 19, 20, 21, 24, 25, 28, 30, 31, 32, 33, 36, 38, 39, 40, 41, 42, 45, 47, 48, 51, 53, 54, 55, 58, 60, 61, 62, 65, 67, 70, 73, 74, 75, 76, 77, 80, 81, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107, 108, 111, 126, 127, 128, 129, 131, 132, 133, 136, 137, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 190, 191, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 222, 223, 224, 225, 226, 227, 230, 231, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 345, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 364, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 394, 397, 398, 399, 400, 401, 402, 404, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 449, 450, 451, 453, 454, 455, 456, 458, 459, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 478, 479, 481, 482, 483, 484, 486, 488, 490, 492, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 532, 534, 535, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 556, 557, 570, 573, 574, 588, 589, 590, 591, 592, 593, 596, 607, 608, 630, 631, 632, 633, 634, 635, 638, 654, 655, 656, 659, 660, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 695, 696, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 713, 714, 715, 718, 719, 720, 721, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 739, 740, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 765, 769, 770, 771, 772, 773, 775, 776, 777, 779, 780, 781, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 811, 815, 816, 817, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/stable_diffusion/samplers/para_ddim.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 91, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 91, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 22, 23, 24, 27, 44, 45, 47, 48, 49, 51, 52, 69, 75, 76, 77, 78, 81, 82, 83, 86, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 104, 105, 108, 109, 110, 111, 116, 117, 118, 119, 122, 132, 135, 149, 150, 151, 154, 162, 164, 165, 168, 169, 170, 173, 174, 178, 179, 180, 182, 183, 185, 198, 199, 200, 201, 202, 204, 205, 206, 207, 211, 212, 213, 214, 215, 216, 219, 220, 221, 224, 226, 227, 228, 230, 231], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/stable_diffusion/samplers/plms.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 27, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 27, "excluded_lines": 0}, "missing_lines": [14, 16, 18, 19, 22, 23, 24, 26, 27, 28, 29, 31, 32, 50, 51, 54, 56, 70, 79, 80, 82, 83, 85, 86, 88, 90, 105], "excluded_lines": []}, "nemo/collections/multimodal/models/text_to_image/stable_diffusion/samplers/sampler_dpm.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 30, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 30, "excluded_lines": 0}, "missing_lines": [14, 16, 18, 19, 20, 22, 25, 26, 28, 30, 31, 32, 33, 34, 35, 37, 39, 40, 41, 43, 44, 54, 55, 56, 58, 60, 62, 71, 72, 76], "excluded_lines": []}, "nemo/collections/multimodal/models/vision_language_foundation/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/models/vision_language_foundation/clip/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/models/vision_language_foundation/clip/megatron_clip_models.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 456, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 456, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 31, 32, 33, 34, 35, 36, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 64, 67, 70, 71, 73, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 101, 102, 103, 105, 107, 109, 110, 112, 113, 114, 116, 117, 119, 122, 125, 126, 128, 129, 130, 131, 132, 133, 135, 140, 190, 197, 198, 199, 201, 202, 203, 205, 207, 209, 211, 213, 214, 215, 216, 217, 219, 226, 239, 242, 243, 245, 248, 251, 252, 254, 255, 256, 257, 260, 268, 270, 273, 275, 276, 277, 279, 280, 282, 285, 288, 289, 290, 293, 294, 299, 300, 301, 303, 305, 307, 308, 311, 312, 319, 326, 327, 329, 331, 333, 334, 335, 337, 341, 342, 343, 344, 347, 349, 353, 354, 358, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 378, 380, 387, 389, 391, 392, 393, 395, 398, 400, 402, 406, 407, 408, 409, 414, 415, 417, 418, 419, 420, 421, 425, 428, 431, 432, 433, 434, 435, 439, 442, 443, 444, 445, 446, 447, 449, 451, 452, 453, 455, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 474, 477, 488, 489, 491, 492, 493, 496, 499, 500, 502, 504, 506, 507, 508, 509, 513, 518, 524, 526, 536, 537, 540, 542, 551, 552, 553, 554, 555, 556, 557, 558, 560, 563, 564, 566, 570, 571, 575, 579, 584, 586, 587, 588, 589, 591, 592, 593, 594, 595, 603, 605, 610, 612, 616, 618, 621, 622, 623, 624, 625, 627, 628, 630, 636, 637, 638, 639, 641, 643, 644, 645, 646, 648, 649, 651, 652, 653, 654, 655, 658, 660, 661, 664, 666, 667, 669, 671, 672, 673, 675, 677, 678, 679, 681, 683, 684, 685, 686, 688, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 704, 706, 707, 709, 711, 712, 714, 715, 716, 717, 718, 719, 721, 722, 724, 727, 728, 729, 732, 733, 734, 735, 737, 738, 739, 740, 742, 749, 750, 752, 753, 755, 757, 759, 760, 763, 764, 765, 766, 767, 768, 770, 771, 775, 778, 779, 781, 782, 783, 785, 787, 788, 790, 791, 792, 794, 795, 796, 797, 799, 802, 804, 805, 806, 807, 808, 809, 810, 812, 814, 823, 824, 828, 831, 833, 835, 842, 843, 844, 846, 847, 848, 851, 854, 855, 857, 858, 859, 861, 862, 865, 866, 867, 868, 869, 871, 872, 873, 874, 877, 886, 887, 888, 889, 892, 901, 902, 903, 904, 907, 911, 912, 914, 920, 922, 926, 927, 931, 932, 933, 935, 939, 940, 941, 942, 943, 945, 949, 950, 951, 952, 953, 955, 956, 957, 959], "excluded_lines": []}, "nemo/collections/multimodal/models/vision_language_foundation/megatron_nsfw_clip_models.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 196, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 196, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 35, 36, 37, 38, 39, 40, 43, 46, 47, 48, 49, 50, 52, 53, 55, 59, 60, 64, 66, 72, 78, 80, 81, 82, 84, 85, 86, 88, 93, 94, 95, 96, 98, 100, 102, 110, 111, 113, 115, 124, 126, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 142, 145, 146, 147, 149, 155, 157, 158, 159, 160, 165, 169, 170, 172, 173, 174, 176, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 192, 193, 195, 196, 204, 206, 208, 209, 211, 215, 216, 218, 220, 222, 224, 226, 227, 228, 229, 230, 232, 234, 235, 236, 246, 247, 248, 249, 250, 252, 254, 256, 257, 259, 261, 262, 264, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 284, 286, 287, 288, 289, 291, 293, 294, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 310, 312, 313, 315, 316, 318, 319, 321, 322, 323, 324, 334, 335, 336, 338, 339, 340, 343, 344, 346, 347, 348, 350, 354, 364, 365, 366, 368, 372, 382, 383, 385, 386, 387, 389, 390, 391], "excluded_lines": []}, "nemo/collections/multimodal/modules/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/modules/imagen/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 4, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 4, "excluded_lines": 0}, "missing_lines": [15, 18, 21, 24], "excluded_lines": []}, "nemo/collections/multimodal/modules/imagen/diffusionmodules/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 4, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 4, "excluded_lines": 0}, "missing_lines": [15, 18, 21, 24], "excluded_lines": []}, "nemo/collections/multimodal/modules/imagen/diffusionmodules/attention.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 135, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 135, "excluded_lines": 0}, "missing_lines": [14, 18, 20, 21, 22, 23, 26, 37, 38, 42, 43, 47, 53, 54, 55, 56, 57, 59, 60, 61, 63, 64, 68, 69, 71, 72, 74, 77, 82, 83, 84, 86, 93, 94, 95, 96, 103, 104, 106, 107, 108, 110, 111, 112, 115, 120, 121, 122, 124, 131, 132, 133, 134, 135, 136, 141, 142, 143, 145, 146, 147, 150, 152, 153, 154, 155, 156, 157, 158, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 183, 185, 188, 194, 195, 196, 198, 211, 212, 214, 215, 217, 218, 225, 226, 227, 228, 230, 234, 235, 237, 239, 240, 241, 244, 250, 251, 252, 254, 267, 268, 270, 271, 273, 274, 277, 279, 281, 283, 285, 286, 287, 290, 298, 299, 300, 302, 313, 314, 315, 317], "excluded_lines": []}, "nemo/collections/multimodal/modules/imagen/diffusionmodules/attention_alt.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 134, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 134, "excluded_lines": 0}, "missing_lines": [14, 18, 20, 21, 22, 23, 25, 28, 39, 40, 44, 45, 49, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 70, 71, 73, 74, 76, 79, 84, 85, 86, 88, 95, 96, 97, 98, 105, 106, 108, 109, 110, 112, 113, 114, 117, 122, 123, 124, 126, 133, 134, 135, 136, 137, 138, 143, 144, 145, 147, 148, 149, 152, 154, 155, 156, 157, 158, 159, 160, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 178, 180, 181, 182, 185, 187, 190, 196, 197, 198, 200, 213, 214, 216, 217, 219, 220, 228, 229, 230, 231, 233, 238, 240, 242, 243, 244, 247, 253, 254, 255, 257, 270, 271, 273, 274, 276, 277, 281, 283, 285, 287, 289, 290, 291, 294, 302, 303, 304, 306, 317, 318, 319, 321], "excluded_lines": []}, "nemo/collections/multimodal/modules/imagen/diffusionmodules/blocks.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 393, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 393, "excluded_lines": 0}, "missing_lines": [14, 18, 19, 21, 22, 23, 24, 25, 27, 29, 30, 37, 43, 54, 55, 56, 57, 58, 60, 61, 62, 64, 67, 68, 70, 71, 72, 75, 80, 81, 87, 92, 93, 99, 105, 106, 107, 108, 109, 110, 112, 113, 116, 133, 147, 148, 149, 150, 151, 152, 153, 154, 156, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 173, 175, 178, 185, 186, 187, 188, 190, 192, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 228, 244, 254, 256, 258, 259, 261, 265, 269, 275, 276, 278, 286, 287, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 305, 308, 309, 326, 328, 330, 331, 333, 345, 358, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 379, 389, 390, 391, 394, 395, 414, 431, 432, 434, 436, 437, 438, 440, 441, 443, 444, 445, 446, 448, 451, 452, 471, 488, 489, 490, 492, 493, 494, 496, 497, 498, 499, 501, 502, 504, 507, 513, 523, 524, 525, 526, 528, 531, 532, 533, 534, 535, 536, 539, 542, 545, 547, 548, 549, 551, 552, 554, 556, 558, 559, 560, 562, 564, 566, 567, 569, 572, 573, 574, 575, 578, 579, 580, 581, 582, 583, 586, 587, 589, 591, 592, 593, 595, 596, 597, 599, 600, 601, 603, 604, 607, 609, 612, 613, 614, 616, 619, 622, 625, 626, 629, 630, 632, 634, 635, 638, 646, 655, 656, 657, 658, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 676, 678, 679, 680, 682, 684, 686, 687, 688, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 714, 720, 730, 731, 732, 733, 735, 738, 739, 740, 741, 742, 744, 747, 749, 750, 751, 752, 753, 755, 757, 759, 760, 761, 763, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 795, 798, 801, 802, 803, 805, 806, 807, 810, 811, 812, 813, 815, 816, 817, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 833, 837, 839, 842, 844, 847, 853, 863, 864, 865, 866, 868, 877, 887, 888, 890, 891, 892, 894, 896, 898, 899, 901, 902, 903, 905, 906], "excluded_lines": []}, "nemo/collections/multimodal/modules/imagen/diffusionmodules/embs.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 35, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 35, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 18, 21, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 40, 41, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69], "excluded_lines": []}, "nemo/collections/multimodal/modules/imagen/diffusionmodules/layers.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 96, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 96, "excluded_lines": 0}, "missing_lines": [34, 41, 43, 44, 45, 46, 49, 53, 54, 55, 56, 57, 58, 59, 62, 66, 69, 73, 74, 75, 76, 77, 78, 79, 82, 91, 92, 95, 99, 100, 101, 104, 108, 109, 110, 113, 117, 120, 127, 130, 140, 141, 144, 145, 146, 147, 148, 149, 153, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 177, 178, 179, 180, 183, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 207, 209, 210, 211, 212, 215, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240], "excluded_lines": []}, "nemo/collections/multimodal/modules/imagen/diffusionmodules/nets.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 261, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 261, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 18, 19, 27, 31, 32, 33, 36, 66, 93, 96, 97, 98, 99, 101, 104, 105, 106, 107, 108, 109, 117, 118, 123, 124, 125, 126, 133, 134, 142, 143, 144, 147, 148, 149, 150, 151, 153, 155, 156, 157, 160, 161, 162, 164, 165, 166, 174, 175, 176, 180, 181, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 208, 209, 210, 221, 222, 223, 224, 226, 243, 244, 247, 281, 282, 283, 284, 285, 286, 287, 299, 301, 302, 313, 314, 315, 330, 331, 333, 339, 342, 343, 345, 346, 347, 349, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 368, 370, 371, 372, 374, 378, 380, 381, 382, 384, 385, 389, 390, 391, 392, 393, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 417, 444, 481, 483, 484, 486, 487, 488, 489, 490, 491, 499, 500, 504, 505, 506, 507, 508, 510, 511, 512, 518, 520, 521, 522, 523, 530, 531, 538, 539, 540, 544, 545, 546, 548, 549, 550, 551, 553, 555, 556, 558, 559, 576, 593, 594, 596, 599, 600, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 615, 617, 619, 621, 622, 623, 626, 627, 628, 631, 633, 634, 635, 637, 638, 642, 643, 644, 645, 646, 647, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 673, 674, 676, 677, 679, 680, 681, 682, 684, 686, 688, 689, 690, 691, 698], "excluded_lines": []}, "nemo/collections/multimodal/modules/imagen/encoder/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 4, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 4, "excluded_lines": 0}, "missing_lines": [15, 18, 21, 24], "excluded_lines": []}, "nemo/collections/multimodal/modules/imagen/encoder/t5encoder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 28, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 28, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 20, 21, 28, 29, 31, 33, 35, 36, 38, 39, 40, 41, 47, 51, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 68], "excluded_lines": []}, "nemo/collections/multimodal/modules/imagen/sampler/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 4, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 4, "excluded_lines": 0}, "missing_lines": [15, 18, 21, 24], "excluded_lines": []}, "nemo/collections/multimodal/modules/imagen/sampler/batch_ops.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 23, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 23, "excluded_lines": 0}, "missing_lines": [24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 37, 40, 41, 42, 45, 46, 47, 50, 51, 52, 55, 56, 57], "excluded_lines": []}, "nemo/collections/multimodal/modules/imagen/sampler/continuous_ddpm.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 105, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 105, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 19, 20, 22, 25, 26, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 42, 45, 46, 49, 50, 51, 52, 53, 56, 57, 58, 61, 62, 63, 68, 69, 72, 73, 74, 76, 77, 78, 79, 81, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 110, 111, 114, 115, 118, 119, 120, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 136, 137, 138, 140, 141, 143, 144, 146, 148, 149, 150, 152, 153, 154, 156, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168], "excluded_lines": []}, "nemo/collections/multimodal/modules/imagen/sampler/sampler.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 121, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 121, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 17, 19, 20, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 65, 66, 67, 68, 69, 70, 72, 76, 77, 80, 81, 85, 86, 87, 88, 89, 90, 92, 94, 95, 96, 98, 99, 102, 113, 115, 116, 119, 120, 121, 123, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 154, 155, 158, 159, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 206, 210, 213, 214, 217, 220, 221, 222, 225, 233, 234, 235, 238, 239, 247, 248, 249, 250], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/background/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/background/nerf_background_base.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 14, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 14, "excluded_lines": 0}, "missing_lines": [14, 15, 18, 19, 20, 22, 26, 28, 29, 31, 32, 33, 34, 35], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/background/random_background.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 14, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 14, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/background/static_background.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 10, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 10, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 20, 21, 22, 23, 25, 26, 27], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/background/tcnn_background.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 17, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 17, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 18, 20, 23, 24, 32, 33, 34, 35, 36, 37, 41, 42, 44, 45], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/background/torchngp_background.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 14, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 14, "excluded_lines": 0}, "missing_lines": [14, 16, 18, 19, 20, 23, 24, 27, 29, 32, 40, 41, 43, 44], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/geometry/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/geometry/dmtet.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 48, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 48, "excluded_lines": 0}, "missing_lines": [14, 17, 28, 34, 35, 36, 37, 39, 45, 68, 74, 76, 82, 84, 93, 94, 95, 96, 97, 98, 101, 113, 114, 115, 116, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 131, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 147, 163], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/geometry/layers.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 41, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 41, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 19, 22, 35, 44, 47, 50, 51, 54, 55, 58, 61, 63, 73, 74, 75, 77, 78, 93, 94, 96, 99, 109, 110, 112, 113, 114, 116, 117, 119, 121, 131, 133, 134, 136, 137, 139, 140, 142], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/geometry/nerf_base.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 142, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 142, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 32, 33, 34, 35, 36, 40, 53, 62, 63, 64, 65, 66, 67, 68, 70, 72, 74, 76, 78, 80, 82, 96, 97, 98, 99, 100, 101, 102, 107, 108, 110, 112, 113, 115, 116, 118, 120, 137, 138, 139, 140, 143, 146, 149, 151, 153, 169, 170, 171, 174, 175, 178, 181, 182, 183, 184, 186, 188, 190, 206, 207, 208, 211, 212, 215, 218, 220, 222, 223, 238, 241, 242, 243, 244, 246, 248, 250, 262, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 285, 286, 287, 288, 290, 291, 292, 293, 295, 297, 303, 304, 319, 320, 321, 322, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 338, 339, 342, 345, 348, 349, 350, 353, 354, 357, 358, 359, 360, 362], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/geometry/tcnn_nerf.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 22, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 22, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 18, 20, 26, 44, 58, 68, 69, 71, 74, 75, 80, 81, 82, 86, 97, 99, 109, 111, 121], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/geometry/torchngp_nerf.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 21, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 21, "excluded_lines": 0}, "missing_lines": [14, 16, 18, 19, 20, 26, 45, 59, 69, 70, 73, 74, 83, 84, 85, 93, 103, 105, 115, 117, 127], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/guidance/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/guidance/stablediffusion_huggingface_pipeline.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 57, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 57, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 18, 20, 23, 24, 40, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 64, 74, 75, 77, 78, 88, 91, 92, 95, 114, 115, 117, 118, 120, 122, 124, 125, 127, 128, 129, 131, 132, 134, 135, 136, 138, 139, 140, 142, 152, 153, 154, 155], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/guidance/stablediffusion_nemo_pipeline.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 82, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 82, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 19, 21, 22, 23, 26, 29, 30, 33, 35, 36, 37, 39, 41, 42, 43, 44, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 66, 67, 69, 70, 73, 75, 78, 80, 81, 82, 83, 84, 85, 87, 88, 91, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 105, 108, 110, 111, 115, 117, 118, 119, 121, 122, 123, 125, 126, 127, 130, 131, 132, 134, 135, 139, 141], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/guidance/stablediffusion_trt_pipeline.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 142, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 142, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 33, 34, 35, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 51, 53, 55, 56, 57, 59, 60, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 89, 90, 91, 92, 93, 95, 96, 105, 106, 107, 108, 109, 111, 112, 113, 115, 117, 118, 120, 121, 123, 124, 131, 132, 134, 136, 137, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 151, 153, 155, 156, 157, 159, 160, 161, 163, 164, 165, 168, 169, 170, 172, 173, 177, 179, 182, 183, 184, 185, 187, 188, 189, 191, 193, 194, 195, 196, 198, 200, 201, 202, 204, 206, 207, 210, 212, 215, 217, 218, 219, 220, 221, 222, 224, 225, 228, 229, 230, 232, 233, 234], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/guidance/txt2img_guidance_base.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 4, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 4, "excluded_lines": 0}, "missing_lines": [14, 17, 18, 19], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/loss/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/loss/laplacian_smooth_loss.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 24, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 24, "excluded_lines": 0}, "missing_lines": [14, 15, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 37, 38, 39, 40, 43, 46, 47, 51], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/loss/normal_consistency_loss.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 25, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 25, "excluded_lines": 0}, "missing_lines": [14, 15, 18, 19, 20, 23, 24, 27, 28, 31, 32, 34, 37, 38, 41, 51, 52, 57, 59, 61, 64, 65, 66, 67, 69], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/materials/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/materials/basic_shading.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 25, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 25, "excluded_lines": 0}, "missing_lines": [14, 16, 18, 21, 26, 27, 28, 29, 31, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 67, 68, 70, 77, 79], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/materials/materials_base.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 10, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 10, "excluded_lines": 0}, "missing_lines": [14, 16, 19, 20, 21, 22, 23, 35, 40, 41], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/renderers/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/renderers/base_renderer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 14, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 14, "excluded_lines": 0}, "missing_lines": [14, 15, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/renderers/base_sdf_renderer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 12, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 12, "excluded_lines": 0}, "missing_lines": [14, 16, 19, 20, 21, 24, 25, 26, 28, 30, 31, 33], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/renderers/base_volume_renderer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 4, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 4, "excluded_lines": 0}, "missing_lines": [14, 17, 18, 19], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/renderers/nerfacc_volume_renderer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 132, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 132, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 19, 20, 22, 24, 27, 29, 32, 48, 49, 50, 51, 52, 54, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 71, 73, 74, 76, 77, 78, 89, 98, 99, 101, 102, 104, 108, 118, 119, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 150, 152, 153, 154, 155, 157, 160, 162, 164, 165, 167, 168, 170, 172, 174, 175, 177, 178, 180, 182, 184, 185, 186, 189, 190, 193, 213, 214, 215, 216, 219, 221, 229, 230, 231, 239, 242, 245, 249, 251, 257, 259, 260, 262, 264, 274, 275, 286, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 309, 310, 311, 313, 322, 323, 325, 339, 340, 342, 344, 346, 347, 358, 370, 371, 372, 373, 374, 376], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/renderers/nvdiffrast_renderer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 108, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 108, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 18, 19, 21, 22, 23, 28, 29, 31, 33, 34, 35, 37, 38, 39, 42, 43, 44, 45, 49, 50, 51, 52, 53, 56, 57, 58, 59, 61, 64, 65, 66, 68, 70, 73, 74, 75, 78, 79, 80, 82, 83, 88, 89, 91, 92, 95, 96, 97, 98, 101, 104, 105, 107, 121, 122, 123, 124, 138, 153, 157, 159, 160, 162, 165, 167, 170, 171, 173, 175, 176, 178, 179, 180, 181, 183, 190, 194, 196, 197, 198, 199, 201, 202, 205, 206, 207, 208, 209, 210, 214, 215, 218, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/renderers/torchngp_volume_renderer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 112, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 112, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 19, 20, 21, 24, 25, 27, 29, 30, 31, 32, 33, 37, 38, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 57, 59, 60, 61, 63, 64, 65, 68, 69, 72, 73, 76, 77, 78, 80, 82, 84, 86, 88, 89, 90, 91, 94, 95, 97, 108, 120, 135, 138, 139, 140, 143, 147, 149, 150, 152, 153, 154, 156, 157, 170, 172, 173, 174, 176, 177, 179, 183, 187, 188, 192, 193, 194, 198, 199, 200, 202, 203, 204, 206, 208, 210, 213, 214, 217, 219, 236, 238, 239, 241, 248, 265, 267, 270, 271, 273, 279, 280, 281, 282, 283, 284, 285, 286, 288], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/utils/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/utils/activation.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 15, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 15, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 33], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/utils/torch_ngp/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/utils/torch_ngp/encoding.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 51, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 51, "excluded_lines": 0}, "missing_lines": [14, 15, 18, 19, 29, 31, 32, 33, 34, 36, 37, 38, 40, 42, 43, 45, 47, 49, 51, 52, 54, 56, 57, 58, 60, 61, 62, 63, 66, 67, 76, 78, 81, 96, 97, 99, 100, 104, 105, 107, 109, 110, 112, 114, 115, 117, 129, 130, 132, 145, 149], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/utils/torch_ngp/freqencoder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 42, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 42, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 17, 18, 21, 22, 23, 24, 28, 29, 30, 32, 34, 36, 38, 39, 41, 43, 45, 46, 49, 50, 51, 53, 54, 56, 59, 62, 63, 64, 66, 67, 68, 70, 71, 73, 77, 78, 80, 82, 84], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/utils/torch_ngp/gridencoder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 119, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 119, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 18, 19, 20, 21, 23, 28, 34, 35, 36, 37, 55, 57, 58, 59, 60, 61, 63, 67, 68, 71, 74, 75, 77, 78, 79, 80, 82, 84, 103, 105, 106, 107, 109, 111, 113, 114, 116, 117, 118, 121, 123, 125, 126, 128, 130, 150, 151, 153, 156, 159, 160, 173, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 209, 211, 213, 214, 215, 217, 218, 220, 225, 229, 230, 232, 244, 248, 251, 252, 255, 256, 257, 258, 259, 261, 263, 265, 266, 267, 269, 270, 272, 288, 289, 292, 293, 294, 296, 297, 299], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/utils/torch_ngp/raymarching.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 175, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 175, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 22, 25, 28, 29, 30, 31, 32, 34, 36, 44, 45, 46, 47, 59, 60, 61, 62, 64, 65, 67, 69, 70, 72, 74, 77, 80, 81, 82, 83, 94, 95, 96, 97, 99, 100, 102, 104, 106, 108, 111, 114, 115, 116, 125, 126, 128, 130, 132, 134, 137, 140, 141, 142, 150, 151, 153, 155, 157, 159, 162, 165, 166, 167, 168, 177, 178, 179, 181, 182, 183, 185, 186, 188, 190, 193, 196, 197, 198, 206, 207, 208, 210, 212, 214, 216, 219, 226, 227, 228, 229, 266, 267, 268, 269, 270, 271, 273, 274, 275, 277, 279, 281, 282, 284, 287, 288, 310, 314, 315, 316, 319, 340, 343, 346, 347, 348, 349, 363, 364, 366, 367, 369, 370, 372, 373, 375, 379, 380, 382, 384, 385, 386, 388, 389, 390, 391, 393, 394, 396, 397, 399, 419, 422, 429, 430, 431, 432, 473, 474, 475, 476, 478, 479, 481, 483, 484, 485, 487, 489, 491, 493, 515, 518, 521, 522, 523, 524, 553, 554, 555, 558, 561], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/utils/torch_ngp/shencoder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 49, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 49, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 17, 18, 21, 22, 23, 24, 28, 29, 30, 32, 34, 35, 37, 39, 41, 42, 44, 46, 48, 49, 52, 54, 55, 56, 57, 58, 59, 61, 64, 67, 68, 69, 71, 72, 73, 75, 76, 78, 79, 81, 85, 87, 88, 90, 91, 93], "excluded_lines": []}, "nemo/collections/multimodal/modules/nerf/utils/trt_engine.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 103, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 103, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 28, 40, 41, 43, 46, 49, 50, 53, 54, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 134, 135, 136, 137, 138, 139, 141, 145, 146, 147, 148, 151, 153, 154, 157, 158, 159, 160, 164, 167, 168, 169, 170], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/attention.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 278, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 278, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 29, 30, 33, 34, 35, 36, 37, 39, 40, 41, 43, 46, 47, 48, 50, 51, 54, 55, 56, 57, 60, 61, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 80, 81, 82, 83, 84, 88, 89, 90, 91, 93, 94, 95, 98, 99, 100, 101, 102, 103, 105, 107, 108, 111, 115, 116, 117, 120, 121, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 167, 168, 171, 172, 173, 174, 175, 177, 181, 182, 183, 187, 188, 189, 190, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 206, 207, 209, 210, 212, 213, 214, 215, 218, 219, 229, 231, 232, 234, 235, 236, 238, 239, 241, 242, 243, 245, 248, 250, 251, 252, 254, 256, 257, 259, 261, 263, 265, 266, 267, 268, 270, 272, 273, 274, 275, 277, 279, 281, 282, 284, 293, 294, 295, 297, 299, 301, 302, 303, 304, 307, 309, 312, 313, 315, 316, 317, 318, 320, 321, 324, 326, 327, 328, 330, 331, 333, 334, 335, 337, 338, 341, 342, 355, 356, 357, 366, 367, 376, 377, 378, 379, 381, 382, 384, 385, 386, 387, 389, 390, 392, 393, 395, 397, 398, 407, 408, 409, 412, 421, 435, 436, 439, 441, 442, 443, 444, 445, 450, 453, 454, 455, 456, 457, 458, 460, 461, 463, 464, 481, 482, 484, 487, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/diffusionmodules/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/diffusionmodules/denoiser.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 38, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 38, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 21, 22, 23, 24, 25, 27, 28, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 45, 46, 56, 57, 58, 59, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 75], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/diffusionmodules/denoiser_scaling.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 24, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 24, "excluded_lines": 0}, "missing_lines": [15, 18, 19, 20, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/diffusionmodules/denoiser_weighting.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 15, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 15, "excluded_lines": 0}, "missing_lines": [15, 18, 19, 20, 23, 24, 25, 27, 28, 31, 32, 33, 36, 37, 38], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/diffusionmodules/discretizer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 45, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 45, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 21, 22, 25, 26, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 54, 55, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/diffusionmodules/guiders.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 29, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 29, "excluded_lines": 0}, "missing_lines": [15, 17, 19, 22, 27, 28, 29, 30, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 50, 51, 54, 55, 56, 58, 59, 61, 62, 64], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/diffusionmodules/loss.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 37, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 37, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 21, 22, 25, 26, 33, 35, 37, 39, 40, 42, 43, 45, 46, 48, 49, 51, 53, 54, 55, 57, 60, 61, 62, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/diffusionmodules/model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 500, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 500, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 21, 23, 24, 27, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 53, 54, 57, 58, 59, 60, 61, 62, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 93, 94, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 119, 120, 121, 123, 124, 126, 127, 128, 130, 131, 132, 134, 136, 139, 144, 145, 148, 149, 150, 151, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 181, 183, 186, 187, 188, 189, 190, 191, 192, 194, 197, 198, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 227, 228, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 265, 266, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 303, 305, 307, 308, 310, 311, 312, 313, 314, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 350, 351, 354, 355, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 417, 418, 423, 424, 428, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 444, 445, 446, 447, 450, 451, 452, 453, 456, 457, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 496, 499, 500, 503, 504, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 533, 535, 537, 540, 543, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 560, 561, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 585, 586, 588, 589, 590, 591, 593, 595, 596, 597, 598, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 621, 622, 623, 624, 625, 628, 629, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 649, 650, 651, 657, 658, 665, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 681, 682, 696, 697, 698, 711, 719, 720, 721, 722, 725, 726, 740, 741, 742, 754, 762, 763, 764, 765, 768, 769, 770, 771, 772, 773, 774, 777, 780, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 809, 810, 811, 813, 814, 817, 818, 828, 829, 830, 831, 833, 834, 836, 838, 839, 841, 842, 844, 845, 846, 847, 848, 849, 850, 852, 853, 855, 856, 857, 859, 860, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 875, 876, 877, 879, 880, 881], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/diffusionmodules/openaimodel.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 639, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 639, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 40, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 57, 58, 61, 62, 65, 70, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 96, 97, 103, 109, 110, 111, 112, 113, 114, 116, 117, 120, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 166, 169, 170, 171, 172, 174, 176, 177, 180, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 209, 210, 213, 232, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 262, 264, 269, 271, 272, 273, 274, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 295, 296, 297, 298, 300, 302, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 327, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 348, 355, 358, 359, 360, 361, 363, 366, 367, 368, 369, 370, 372, 375, 377, 379, 380, 382, 383, 384, 385, 386, 387, 388, 391, 402, 403, 407, 408, 411, 416, 417, 418, 420, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 441, 446, 447, 448, 450, 463, 464, 465, 466, 467, 468, 473, 474, 475, 477, 478, 479, 482, 483, 484, 485, 487, 488, 491, 516, 557, 558, 560, 561, 565, 566, 570, 571, 573, 574, 576, 577, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 595, 596, 600, 602, 604, 605, 606, 607, 610, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 649, 650, 651, 652, 658, 659, 662, 663, 664, 665, 666, 667, 668, 680, 681, 682, 683, 685, 686, 687, 689, 690, 691, 693, 695, 696, 718, 719, 720, 721, 722, 723, 740, 741, 742, 743, 745, 746, 748, 749, 750, 752, 753, 793, 795, 796, 797, 798, 799, 811, 812, 813, 814, 816, 817, 818, 820, 821, 822, 824, 826, 827, 849, 850, 851, 866, 867, 868, 870, 874, 875, 881, 882, 883, 885, 887, 888, 889, 890, 891, 892, 895, 896, 898, 899, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 912, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 947, 948, 949, 950, 952, 953, 954, 955, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1023, 1025, 1026, 1027, 1028, 1029, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1058, 1059, 1060, 1062, 1063, 1064, 1066, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1084, 1087, 1088, 1089, 1090, 1092, 1096, 1099, 1100, 1102, 1104, 1107, 1108, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1128, 1131, 1132, 1136, 1137, 1138, 1140, 1141, 1142, 1144, 1146, 1148, 1152, 1154, 1169, 1172, 1174, 1175, 1176, 1177, 1179, 1182, 1183, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1198, 1201, 1207, 1232, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1255, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1276, 1277, 1278, 1287, 1288, 1289, 1290, 1291, 1292, 1309, 1310, 1311, 1312, 1314, 1341, 1342, 1343, 1344, 1351, 1352, 1353, 1356, 1357, 1360, 1361, 1368, 1370, 1374, 1375, 1377, 1384, 1387, 1388, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1402, 1403], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/diffusionmodules/sampling.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 181, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 181, "excluded_lines": 0}, "missing_lines": [15, 19, 21, 22, 23, 25, 32, 34, 39, 40, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 61, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 82, 85, 86, 87, 89, 90, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 119, 120, 123, 125, 128, 129, 130, 132, 133, 134, 136, 137, 138, 140, 142, 143, 148, 150, 151, 153, 154, 156, 159, 160, 163, 165, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 192, 193, 194, 196, 198, 199, 200, 203, 204, 207, 208, 209, 210, 211, 212, 214, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 232, 233, 234, 235, 237, 239, 241, 242, 244, 245, 246, 249, 251, 252, 255, 256, 257, 258, 260, 261, 262, 263, 265, 267, 268, 269, 271, 272, 273, 274, 276, 278, 281, 283, 284, 286, 287, 289, 291, 292, 295, 297, 299, 300, 302, 303, 304, 315], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/diffusionmodules/sampling_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 29, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 29, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 21, 22, 23, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 38, 41, 42, 43, 44, 47, 48, 51, 52, 55, 56, 59, 60], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/diffusionmodules/sigma_sampling.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 18, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 18, "excluded_lines": 0}, "missing_lines": [15, 17, 20, 21, 22, 23, 25, 26, 27, 30, 31, 32, 33, 35, 36, 38, 39, 40], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/diffusionmodules/util.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 174, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 174, "excluded_lines": 0}, "missing_lines": [15, 26, 27, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 59, 60, 61, 62, 63, 64, 66, 70, 71, 72, 73, 76, 78, 79, 82, 83, 84, 85, 86, 90, 93, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 119, 135, 136, 137, 139, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 157, 158, 162, 163, 164, 167, 168, 169, 170, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 224, 228, 229, 230, 233, 237, 238, 239, 242, 246, 249, 250, 254, 255, 256, 259, 260, 261, 264, 268, 269, 270, 271, 272, 273, 274, 277, 281, 284, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 307, 308, 309, 310, 311, 312, 317, 318, 319, 320, 325, 326, 327, 328, 329, 332, 336, 339, 340, 343, 344, 345, 346], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/diffusionmodules/wrappers.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 16, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 16, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 22, 23, 24, 25, 30, 32, 33, 36, 37, 38, 39, 40], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/distributions/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/distributions/distributions.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 49, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 49, "excluded_lines": 0}, "missing_lines": [14, 15, 18, 19, 20, 22, 23, 26, 27, 28, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 57, 59, 68, 69, 70, 71, 72, 74, 75, 78, 85, 86, 87, 88, 89, 90, 94, 96], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/encoders/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/encoders/modules.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 563, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 563, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 40, 44, 45, 46, 47, 49, 50, 52, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 114, 115, 116, 118, 119, 120, 122, 123, 124, 126, 127, 128, 130, 131, 132, 134, 135, 136, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 164, 167, 168, 169, 171, 172, 173, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 192, 193, 194, 195, 197, 199, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 243, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 266, 267, 268, 269, 270, 272, 273, 274, 276, 277, 278, 281, 284, 285, 286, 287, 291, 292, 293, 294, 296, 297, 300, 303, 304, 305, 307, 308, 309, 310, 312, 313, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 336, 339, 349, 350, 351, 352, 353, 354, 361, 362, 363, 365, 366, 367, 369, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 391, 392, 393, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 415, 417, 418, 420, 422, 423, 425, 427, 429, 430, 431, 432, 433, 434, 435, 438, 441, 443, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 475, 476, 485, 486, 488, 489, 490, 491, 493, 496, 497, 498, 499, 500, 502, 503, 506, 511, 517, 528, 529, 530, 531, 532, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 547, 549, 550, 551, 552, 554, 555, 556, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 579, 580, 582, 583, 586, 587, 597, 602, 603, 604, 605, 607, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 625, 626, 627, 629, 630, 631, 632, 634, 635, 636, 638, 639, 640, 642, 643, 644, 647, 648, 649, 651, 652, 656, 658, 660, 661, 662, 672, 673, 675, 676, 681, 689, 690, 691, 692, 693, 694, 696, 697, 699, 700, 701, 702, 703, 704, 706, 710, 711, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 733, 734, 736, 737, 738, 739, 740, 741, 743, 744, 747, 752, 754, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 822, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 839, 840, 843, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 870, 871, 872, 873, 876, 877, 879, 880], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/encoders/x_transformer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 369, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 369, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 22, 23, 27, 29, 31, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 64, 65, 68, 69, 70, 71, 74, 75, 76, 78, 81, 82, 83, 85, 88, 89, 90, 92, 95, 96, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 116, 117, 120, 121, 124, 125, 126, 127, 131, 132, 133, 134, 135, 137, 138, 139, 142, 143, 144, 145, 146, 148, 149, 150, 153, 154, 155, 156, 157, 158, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 173, 174, 177, 178, 179, 182, 183, 184, 185, 187, 188, 190, 196, 197, 198, 199, 201, 202, 203, 206, 207, 208, 209, 210, 211, 213, 215, 216, 220, 221, 235, 236, 237, 238, 239, 240, 241, 243, 245, 246, 247, 248, 251, 252, 253, 254, 257, 261, 264, 265, 266, 267, 270, 271, 273, 284, 285, 287, 288, 289, 291, 292, 293, 295, 297, 298, 299, 301, 302, 303, 305, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 323, 324, 326, 327, 329, 331, 332, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 359, 361, 362, 364, 365, 367, 369, 372, 373, 397, 398, 399, 401, 403, 404, 405, 407, 408, 409, 411, 414, 416, 418, 419, 421, 422, 423, 425, 426, 428, 429, 430, 431, 433, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 471, 472, 474, 475, 477, 479, 481, 482, 483, 484, 485, 487, 489, 490, 492, 493, 494, 496, 498, 499, 501, 502, 510, 511, 512, 513, 515, 517, 518, 520, 521, 522, 523, 525, 526, 528, 529, 531, 533, 536, 537, 538, 539, 542, 543, 556, 557, 559, 560, 562, 563, 564, 566, 567, 572, 574, 575, 576, 578, 580, 583, 584, 585, 586, 589, 590, 592, 593, 595, 598, 599, 600, 601, 603, 605, 606, 607, 610, 611, 613, 614, 616, 618, 620, 621, 622, 623, 624, 626, 627, 628, 630], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/quantization_utils/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/quantization_utils/plugin_calib.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 45, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 45, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 30, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/quantization_utils/trt_engine.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 95, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 95, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 21, 31, 34, 48, 49, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 69, 71, 72, 73, 76, 77, 78, 79, 82, 85, 90, 91, 93, 94, 95, 96, 98, 100, 111, 112, 113, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 138, 140, 141, 142, 144, 145, 146, 147, 149, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 166, 167, 169, 170, 172, 173, 174, 175, 178, 179, 180, 182, 185, 186, 187, 189, 190, 191, 193], "excluded_lines": []}, "nemo/collections/multimodal/modules/stable_diffusion/quantization_utils/utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 52, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 52, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 23, 24, 25, 28, 29, 32, 42, 43, 44, 45, 48, 51, 52, 54, 56, 59, 60, 61, 62, 65, 66, 74, 75, 76, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 107, 110, 116, 117, 118, 119, 120, 121, 126, 127, 129, 130], "excluded_lines": []}, "nemo/collections/multimodal/parts/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/parts/imagen/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/parts/imagen/utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 7, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 7, "excluded_lines": 0}, "missing_lines": [14, 17, 25, 26, 27, 28, 29], "excluded_lines": []}, "nemo/collections/multimodal/parts/stable_diffusion/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/parts/stable_diffusion/lr_scheduler.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 73, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 73, "excluded_lines": 0}, "missing_lines": [14, 17, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 50, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 91, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 111, 112], "excluded_lines": []}, "nemo/collections/multimodal/parts/stable_diffusion/pipeline.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 134, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 134, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 27, 30, 31, 32, 33, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 56, 58, 61, 65, 66, 67, 68, 70, 73, 74, 75, 78, 79, 80, 81, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 116, 117, 118, 119, 120, 121, 123, 125, 129, 131, 133, 134, 136, 137, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 156, 158, 159, 172, 173, 175, 176, 178, 179, 180, 182, 183, 184, 186, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 220, 221, 222, 223, 224], "excluded_lines": []}, "nemo/collections/multimodal/parts/stable_diffusion/sdxl_helpers.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 135, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 135, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 45, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 85, 86, 87, 88, 90, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 105, 106, 110, 111, 112, 114, 115, 116, 118, 119, 121, 122, 124, 125, 126, 128, 129, 131, 132, 133, 136, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 157, 158, 159, 163, 164, 168, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 202, 204, 205, 206, 207, 210, 214, 215, 217, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 234, 235, 237, 238, 239, 241, 242, 244, 245, 246], "excluded_lines": []}, "nemo/collections/multimodal/parts/stable_diffusion/sdxl_pipeline.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 74, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 74, "excluded_lines": 0}, "missing_lines": [15, 17, 19, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 53, 54, 55, 56, 57, 58, 59, 74, 84, 86, 87, 90, 91, 92, 93, 94, 95, 96, 108, 118, 119, 120, 123, 136, 149, 150, 151, 154, 155, 157, 159, 160, 164, 166, 171, 172, 175, 176, 177, 180, 181, 186, 187, 190, 191, 192, 193, 194, 195, 205, 206, 216, 217, 225, 226, 234, 235, 241, 242, 250], "excluded_lines": []}, "nemo/collections/multimodal/parts/stable_diffusion/utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 143, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 143, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 17, 18, 19, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 36, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 55, 56, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 75, 76, 77, 78, 81, 86, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 115, 119, 120, 122, 123, 124, 127, 130, 131, 132, 133, 134, 137, 138, 139, 141, 143, 147, 148, 149, 151, 152, 154, 155, 157, 158, 162, 163, 164, 165, 168, 169, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 184, 186, 187, 188, 189, 191, 193, 194, 195, 197, 198, 199, 202, 203, 204, 205, 206, 207, 209, 212, 215, 218, 220, 221, 222, 223, 226, 227, 228, 229, 232, 233], "excluded_lines": []}, "nemo/collections/multimodal/parts/utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 221, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 221, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 34, 36, 38, 41, 45, 46, 47, 48, 50, 53, 54, 57, 59, 60, 61, 66, 71, 72, 73, 74, 75, 77, 80, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 101, 105, 106, 108, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 127, 129, 132, 133, 134, 135, 136, 137, 138, 141, 144, 146, 149, 167, 168, 169, 173, 176, 179, 181, 182, 183, 184, 185, 186, 188, 189, 192, 198, 199, 202, 209, 211, 212, 216, 219, 222, 225, 226, 228, 229, 230, 232, 233, 234, 237, 240, 258, 259, 263, 266, 269, 271, 273, 274, 277, 283, 284, 287, 295, 296, 300, 305, 308, 309, 311, 312, 313, 315, 316, 319, 322, 323, 325, 326, 327, 329, 331, 336, 340, 341, 342, 343, 345, 350, 351, 352, 353, 355, 361, 362, 363, 364, 365, 366, 367, 368, 371, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 402, 404, 406, 408, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 424, 426, 427, 431, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 456, 457, 459, 461, 462, 463, 464, 466, 468, 470], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 5, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 5, "excluded_lines": 0}, "missing_lines": [15, 16, 19, 22, 25], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/data/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/data/video_to_text.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 249, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 249, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 40, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 57, 59, 60, 62, 63, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 85, 87, 90, 91, 94, 95, 97, 98, 101, 124, 125, 128, 136, 151, 152, 155, 157, 167, 168, 169, 170, 172, 173, 175, 178, 181, 182, 183, 186, 187, 190, 192, 193, 195, 197, 199, 200, 202, 203, 206, 225, 237, 239, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 271, 274, 308, 309, 312, 320, 333, 334, 336, 338, 339, 341, 343, 344, 346, 348, 349, 350, 351, 353, 354, 356, 357, 358, 359, 360, 361, 363, 364, 366, 382, 412, 413, 416, 424, 443, 445, 449, 465, 553, 572, 574, 586, 587, 588, 589, 590, 591, 593, 601, 614, 622, 623, 624, 625, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 643, 647, 648, 649, 650, 651, 652, 653, 655, 656, 658, 659, 660, 661, 663, 664, 665, 666, 668, 670, 672, 674, 675, 677, 680, 683, 684, 685, 687, 688, 689, 692, 695, 698, 700, 702, 703, 704, 705, 706, 707, 709, 710, 712, 714, 715, 717, 718, 720, 721, 724, 801, 817, 818, 820, 822, 823, 825, 827, 828, 830, 832, 833, 834, 835, 837, 838, 840, 841, 842, 843, 844, 845, 847, 848, 850], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/data/video_to_text_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 97, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 97, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 20, 21, 22, 25, 47, 48, 49, 50, 51, 53, 54, 57, 59, 60, 61, 63, 66, 67, 70, 74, 76, 77, 78, 80, 84, 85, 86, 87, 88, 90, 91, 94, 110, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 126, 129, 130, 133, 137, 139, 140, 141, 143, 147, 148, 149, 150, 151, 153, 154, 157, 168, 180, 183, 193, 194, 196, 211, 214, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 244, 245, 249, 250, 252, 253, 255, 258, 259, 260, 261, 263, 278, 279, 281, 283], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/models/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 6, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 6, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 23, 24, 27], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/models/visual_ctc_bpe_models.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 114, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 114, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 34, 37, 39, 40, 42, 43, 46, 49, 52, 54, 55, 57, 60, 62, 63, 68, 70, 73, 76, 77, 78, 79, 81, 84, 91, 92, 101, 102, 104, 105, 106, 108, 109, 111, 113, 124, 142, 143, 144, 146, 147, 149, 159, 160, 162, 163, 165, 187, 188, 189, 191, 195, 197, 198, 200, 201, 206, 207, 209, 212, 215, 218, 220, 221, 223, 225, 228, 234, 236, 237, 238, 239, 245, 247, 250, 251, 252, 254, 256, 264, 265, 267, 268, 270, 272, 280, 282, 283, 286, 287, 288, 290, 292, 300, 301, 303, 305, 306, 313, 315], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/models/visual_ctc_models.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 278, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 278, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 43, 46, 50, 51, 52, 55, 58, 61, 64, 67, 69, 70, 73, 74, 75, 77, 78, 83, 86, 89, 96, 99, 100, 101, 102, 105, 108, 116, 119, 122, 124, 125, 154, 155, 157, 158, 163, 164, 167, 168, 171, 172, 174, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 198, 199, 201, 202, 203, 206, 208, 209, 210, 212, 216, 218, 219, 220, 221, 223, 224, 226, 228, 229, 230, 233, 234, 235, 236, 237, 238, 240, 242, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 278, 280, 283, 284, 285, 287, 289, 297, 298, 300, 301, 303, 304, 305, 306, 307, 309, 311, 319, 321, 322, 325, 326, 327, 329, 331, 339, 340, 342, 344, 346, 347, 348, 356, 357, 359, 360, 361, 363, 364, 366, 368, 378, 391, 392, 395, 397, 402, 406, 407, 411, 412, 417, 430, 431, 434, 436, 438, 451, 452, 455, 457, 459, 460, 461, 467, 468, 469, 475, 476, 494, 499, 504, 509, 511, 512, 514, 521, 523, 524, 526, 527, 529, 530, 534, 535, 537, 539, 544, 546, 551, 552, 554, 562, 563, 569, 570, 571, 573, 575, 576, 577, 581, 585, 586, 588, 589, 590, 592, 593, 597, 600, 604, 607, 608, 609, 611, 614, 615, 617, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 635, 636, 638, 639, 640, 642, 660, 661, 662, 664, 665, 667, 677, 678, 680, 681, 683, 684, 691, 693, 695, 696, 697, 699, 700, 701], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/models/visual_hybrid_rnnt_ctc_bpe_models.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 187, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 187, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 38, 40, 41, 44, 45, 47, 48, 51, 54, 57, 58, 60, 61, 63, 64, 65, 66, 67, 70, 71, 75, 76, 77, 79, 81, 82, 87, 89, 92, 97, 106, 107, 108, 111, 112, 113, 114, 115, 116, 119, 127, 129, 130, 139, 140, 142, 143, 144, 146, 147, 149, 151, 161, 180, 181, 182, 184, 185, 187, 197, 198, 200, 201, 203, 226, 227, 228, 230, 234, 236, 237, 239, 240, 244, 245, 247, 250, 253, 255, 256, 257, 258, 260, 262, 263, 264, 266, 267, 268, 269, 270, 272, 273, 275, 277, 280, 281, 282, 284, 288, 297, 300, 301, 304, 305, 307, 308, 310, 311, 313, 316, 317, 319, 320, 322, 324, 326, 331, 333, 334, 335, 336, 342, 344, 347, 348, 349, 351, 353, 361, 362, 364, 365, 367, 369, 379, 380, 382, 383, 386, 387, 388, 390, 394, 403, 406, 407, 410, 411, 413, 414, 415, 416, 417, 419, 420, 423, 424, 425, 427, 429, 437, 438, 440, 441, 445, 447, 448, 455, 456], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/models/visual_hybrid_rnnt_ctc_models.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 300, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 300, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 40, 41, 42, 43, 45, 46, 49, 50, 53, 54, 55, 57, 58, 63, 65, 66, 68, 74, 75, 76, 77, 78, 80, 81, 89, 92, 94, 95, 122, 123, 132, 133, 135, 136, 138, 139, 141, 142, 144, 147, 149, 150, 151, 152, 153, 154, 156, 157, 159, 160, 161, 162, 163, 165, 173, 174, 175, 179, 180, 183, 185, 186, 187, 188, 189, 191, 192, 193, 195, 197, 198, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 235, 238, 239, 240, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 260, 262, 263, 266, 267, 268, 270, 272, 280, 281, 283, 284, 286, 287, 288, 289, 290, 292, 294, 305, 306, 307, 309, 310, 312, 313, 316, 317, 318, 320, 322, 330, 331, 333, 334, 337, 339, 340, 342, 343, 345, 348, 349, 352, 354, 355, 356, 358, 359, 362, 364, 365, 370, 376, 382, 383, 389, 390, 391, 395, 396, 398, 401, 411, 417, 423, 424, 426, 427, 428, 433, 436, 438, 439, 440, 441, 442, 443, 449, 450, 451, 454, 455, 458, 461, 462, 464, 466, 468, 471, 472, 474, 478, 479, 481, 482, 483, 485, 488, 489, 491, 494, 495, 496, 497, 499, 503, 505, 511, 512, 514, 515, 516, 520, 522, 523, 525, 526, 529, 538, 539, 541, 542, 543, 545, 546, 547, 552, 555, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 570, 573, 574, 576, 578, 579, 580, 581, 582, 584, 585, 587, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 642, 643, 644, 646, 647, 654, 655], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/models/visual_rnnt_bpe_models.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 127, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 127, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 36, 38, 39, 42, 43, 45, 46, 49, 52, 55, 56, 58, 59, 61, 62, 63, 64, 65, 67, 70, 75, 84, 85, 86, 88, 109, 110, 111, 113, 117, 119, 120, 122, 123, 127, 128, 130, 133, 136, 138, 139, 140, 141, 143, 145, 146, 147, 149, 150, 151, 152, 153, 155, 156, 158, 160, 163, 164, 165, 167, 171, 180, 183, 184, 187, 188, 190, 191, 193, 194, 196, 198, 206, 208, 209, 212, 213, 214, 216, 220, 229, 232, 233, 236, 237, 239, 241, 242, 251, 252, 254, 255, 256, 258, 259, 261, 263, 273, 289, 290, 291, 293, 294, 296, 306, 307, 309, 310, 312, 313, 320, 322], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/models/visual_rnnt_models.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 378, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 378, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 46, 49, 50, 51, 53, 56, 59, 62, 65, 68, 69, 71, 72, 73, 74, 75, 77, 78, 81, 83, 91, 95, 104, 105, 107, 110, 113, 114, 117, 120, 123, 125, 156, 157, 158, 160, 161, 164, 165, 168, 171, 174, 176, 200, 201, 203, 205, 206, 208, 210, 212, 214, 215, 243, 244, 246, 247, 249, 250, 252, 253, 255, 258, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 273, 281, 282, 284, 285, 286, 289, 296, 297, 298, 300, 302, 303, 306, 308, 309, 310, 311, 312, 313, 314, 316, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 357, 359, 362, 363, 364, 366, 370, 379, 382, 383, 386, 387, 389, 390, 392, 393, 395, 396, 397, 398, 399, 401, 403, 411, 413, 414, 417, 418, 419, 421, 425, 434, 437, 438, 441, 442, 444, 446, 448, 449, 450, 458, 459, 461, 462, 463, 465, 466, 468, 470, 480, 493, 494, 497, 499, 504, 508, 509, 513, 514, 519, 532, 533, 536, 538, 540, 553, 554, 557, 559, 561, 562, 564, 569, 570, 571, 576, 577, 603, 608, 613, 618, 620, 623, 625, 626, 628, 631, 632, 635, 637, 638, 639, 641, 642, 645, 647, 648, 653, 656, 657, 659, 665, 666, 672, 673, 674, 678, 679, 681, 684, 694, 697, 698, 700, 706, 707, 710, 713, 714, 716, 718, 719, 722, 723, 725, 729, 730, 732, 733, 736, 737, 739, 742, 743, 744, 745, 747, 751, 753, 759, 760, 762, 763, 764, 768, 770, 771, 773, 774, 777, 786, 787, 789, 790, 791, 793, 795, 797, 798, 799, 804, 805, 806, 808, 809, 810, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 824, 825, 826, 827, 828, 830, 846, 847, 848, 850, 851, 853, 863, 864, 866, 867, 869, 870, 871, 872, 873, 874, 881, 883, 884, 885, 886, 887, 888, 890, 891, 892, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 913, 914, 917, 918, 919, 921, 922, 929, 931, 933, 934, 935, 937, 938, 939], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/modules/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 4, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 4, "excluded_lines": 0}, "missing_lines": [15, 18, 19, 20], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/modules/linear_projection_video_front_end.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 47, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 47, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 21, 24, 44, 54, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 71, 73, 74, 76, 83, 84, 86, 93, 98, 99, 102, 103, 106, 109, 111, 113, 116, 119, 122, 125, 128, 132, 135, 138, 139, 141, 143], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/modules/resnet_video_front_end.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 21, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 21, "excluded_lines": 0}, "missing_lines": [15, 17, 19, 20, 21, 24, 39, 40, 42, 52, 54, 55, 57, 64, 65, 67, 74, 77, 80, 81, 83], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/modules/video_augment.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 91, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 91, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 21, 22, 24, 25, 27, 28, 29, 32, 36, 46, 49, 50, 51, 52, 53, 55, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 78, 79, 81, 82, 84, 86, 87, 89, 91, 92, 94, 95, 97, 99, 101, 102, 103, 105, 107, 110, 125, 126, 128, 129, 130, 131, 132, 133, 135, 138, 141, 144, 147, 150, 153, 156, 159, 162, 165, 168, 170, 173, 189, 190, 192, 193, 194, 195, 196, 198, 201, 204, 207, 210, 213, 216, 219, 222, 224], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/modules/video_preprocessing.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 61, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 61, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 21, 22, 24, 25, 26, 29, 43, 44, 47, 48, 49, 50, 51, 52, 54, 57, 58, 60, 63, 66, 67, 70, 71, 72, 80, 83, 84, 86, 87, 88, 90, 91, 93, 96, 97, 98, 100, 103, 107, 109, 111, 114, 115, 116, 118, 119, 120, 122, 124, 127, 129, 130, 131, 132, 135, 136, 138], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/parts/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/parts/submodules/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/parts/submodules/conv2d.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 14, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 14, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 22, 32, 49, 64, 65, 66, 69, 70, 71, 72], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/parts/submodules/global_avg_pool2d.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 9, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 9, "excluded_lines": 0}, "missing_lines": [15, 18, 19, 20, 21, 22, 24, 26, 28], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/parts/submodules/permute.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 11, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 11, "excluded_lines": 0}, "missing_lines": [15, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/parts/submodules/resnet.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 69, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 69, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 23, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 86, 87, 89, 92, 93, 94, 95, 96, 98, 99, 100, 103, 104, 105, 107, 108, 118, 128, 139, 142, 144, 145, 146, 149, 152, 155, 158, 159, 162, 165, 168, 169, 173, 175], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/parts/submodules/resnet_block.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 16, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 16, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 22, 29, 30, 33, 36, 62, 63, 76, 79, 81, 84, 86], "excluded_lines": []}, "nemo/collections/multimodal/speech_cv/parts/submodules/resnet_bottleneck_block.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 17, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 17, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 22, 29, 39, 42, 45, 48, 83, 86, 87, 100, 102, 105, 107], "excluded_lines": []}, "nemo/collections/nlp/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 5, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 5, "excluded_lines": 0}, "missing_lines": [15, 16, 19, 22, 25], "excluded_lines": []}, "nemo/collections/nlp/data/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 14, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 14, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 20, 24, 28, 29, 33, 34, 35, 36, 37, 38, 42], "excluded_lines": []}, "nemo/collections/nlp/data/common/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [15], "excluded_lines": []}, "nemo/collections/nlp/data/common/sequence_to_sequence_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 165, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 165, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 21, 25, 26, 27, 29, 32, 35, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 96, 97, 98, 99, 100, 102, 104, 105, 106, 107, 109, 110, 112, 113, 115, 116, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 135, 145, 150, 175, 183, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 197, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 231, 232, 234, 235, 237, 238, 240, 241, 243, 245, 246, 248, 249, 253, 265, 268, 271, 298, 299, 300, 314, 315, 318, 322, 325, 328, 331, 358, 359, 360, 361, 362, 376, 377, 380, 381, 384, 386, 387, 390, 393, 394, 396, 397, 398], "excluded_lines": []}, "nemo/collections/nlp/data/data_utils/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [15], "excluded_lines": []}, "nemo/collections/nlp/data/data_utils/data_preprocessing.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 317, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 317, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 31, 68, 69, 72, 75, 77, 79, 81, 83, 85, 87, 88, 90, 91, 92, 93, 96, 97, 100, 132, 134, 135, 137, 140, 143, 144, 145, 147, 148, 149, 150, 151, 153, 156, 159, 160, 162, 163, 165, 166, 167, 169, 170, 172, 175, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 201, 216, 217, 218, 221, 222, 223, 224, 226, 227, 228, 230, 232, 233, 235, 236, 237, 239, 240, 244, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 261, 262, 263, 266, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 309, 311, 312, 313, 315, 316, 319, 320, 321, 322, 323, 325, 326, 327, 329, 330, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 345, 348, 349, 350, 351, 352, 353, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 412, 413, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 456, 457, 458, 459, 462, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 507, 508, 509, 512, 518, 519, 520, 521, 523, 526, 537, 539, 540, 541, 543, 544, 547, 549, 552, 563, 564, 565, 566, 568, 569, 570, 571, 572, 575, 576, 577, 578, 579, 582, 586, 588, 589, 591, 592, 599, 600, 602, 604, 605, 608, 612, 613, 614, 616, 618, 619, 621, 623], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 3, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 3, "excluded_lines": 0}, "missing_lines": [15, 16, 22], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/data_processor/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/data_processor/assistant_data_processor.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 90, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 90, "excluded_lines": 0}, "missing_lines": [16, 18, 19, 21, 24, 27, 34, 35, 36, 37, 38, 39, 42, 43, 47, 49, 50, 51, 53, 54, 55, 56, 57, 59, 61, 65, 66, 67, 68, 70, 71, 87, 88, 89, 90, 92, 94, 95, 96, 97, 99, 105, 107, 108, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 134, 136, 138, 140, 141, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 168, 171, 175, 195, 196, 197, 199, 201, 203, 205, 207, 209], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/data_processor/data_processor.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 26, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 26, "excluded_lines": 0}, "missing_lines": [17, 19, 21, 24, 42, 43, 45, 47, 49, 51, 53, 55, 57, 58, 70, 71, 72, 73, 74, 76, 77, 78, 80, 81, 84, 86], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/data_processor/design_data_processor.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 54, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 54, "excluded_lines": 0}, "missing_lines": [16, 18, 20, 21, 23, 26, 29, 37, 38, 39, 41, 45, 46, 47, 48, 50, 59, 61, 63, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 94, 95, 96, 97, 119, 120, 121, 123, 125, 127, 129, 131, 133], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/data_processor/mellon_qa_data_processor.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 37, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 37, "excluded_lines": 0}, "missing_lines": [16, 18, 20, 21, 23, 26, 30, 38, 39, 40, 42, 46, 47, 48, 49, 51, 62, 64, 65, 67, 74, 75, 77, 78, 79, 80, 81, 82, 87, 88, 89, 91, 93, 95, 97, 99, 101], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/data_processor/ms_marco_data_processor.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 46, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 46, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 20, 21, 23, 26, 33, 42, 43, 44, 46, 50, 51, 52, 53, 55, 65, 67, 69, 71, 73, 75, 76, 78, 79, 82, 83, 85, 86, 89, 90, 91, 92, 97, 99, 101, 115, 116, 117, 119, 121, 123, 125, 127, 129], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/data_processor/sgd_data_processor.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 218, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 218, "excluded_lines": 0}, "missing_lines": [16, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 35, 45, 96, 107, 108, 110, 111, 113, 114, 115, 116, 118, 127, 128, 129, 131, 137, 143, 145, 147, 152, 155, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 170, 176, 177, 178, 179, 180, 181, 182, 186, 187, 189, 190, 191, 192, 194, 195, 198, 200, 202, 204, 206, 208, 210, 212, 214, 222, 225, 228, 229, 231, 232, 233, 234, 235, 238, 239, 240, 241, 245, 247, 255, 256, 258, 268, 269, 273, 275, 276, 277, 278, 279, 280, 284, 285, 286, 287, 290, 294, 296, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 327, 328, 329, 331, 332, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 367, 368, 369, 371, 372, 374, 375, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 391, 395, 421, 422, 424, 425, 427, 429, 430, 431, 432, 433, 434, 435, 436, 442, 443, 444, 445, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 547, 548, 549, 550, 551, 552, 554, 555, 565], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/dataset/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 4, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 4, "excluded_lines": 0}, "missing_lines": [15, 16, 19, 20], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/dataset/dialogue_bert_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 143, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 143, "excluded_lines": 0}, "missing_lines": [16, 18, 20, 21, 22, 23, 25, 28, 38, 39, 42, 52, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 107, 108, 110, 111, 121, 122, 137, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 152, 153, 154, 155, 156, 157, 159, 160, 162, 164, 165, 175, 176, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 208, 209, 212, 213, 215, 218, 219, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 281, 297, 298, 302, 310, 311, 312, 314, 316, 317, 318, 319, 320, 322, 323, 325, 326], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/dataset/dialogue_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 9, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 9, "excluded_lines": 0}, "missing_lines": [16, 18, 21, 30, 31, 33, 34, 36, 37], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/dataset/dialogue_gpt_classification_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 153, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 153, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 20, 22, 23, 26, 37, 45, 47, 48, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 81, 82, 83, 85, 86, 88, 89, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 117, 118, 119, 121, 122, 131, 132, 133, 137, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 193, 194, 195, 196, 197, 202, 204, 208, 210, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 224, 225, 228, 229, 231, 247, 249, 250, 252, 253, 255, 257, 259, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 281, 283, 288, 289, 291, 292, 294, 296, 298, 302], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/dataset/dialogue_gpt_generation_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 57, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 57, "excluded_lines": 0}, "missing_lines": [16, 18, 20, 23, 24, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 68, 69, 71, 72, 75, 76, 77, 79, 88, 89, 90, 91, 93, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 130], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/dataset/dialogue_nearest_neighbour_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 44, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 44, "excluded_lines": 0}, "missing_lines": [17, 19, 21, 24, 29, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 73, 80, 81, 83, 84, 86, 87], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/dataset/dialogue_s2s_generation_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 78, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 78, "excluded_lines": 0}, "missing_lines": [16, 18, 21, 22, 32, 33, 34, 35, 36, 37, 39, 40, 42, 43, 45, 46, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 78, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 103, 106, 107, 109, 110, 113, 114, 115, 117, 126, 127, 128, 130, 142, 143, 144, 145, 147, 148, 152, 153, 155, 157, 159, 161], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/dataset/dialogue_sgd_bert_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 193, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 193, "excluded_lines": 0}, "missing_lines": [16, 21, 22, 23, 25, 27, 28, 30, 33, 42, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 82, 106, 109, 110, 111, 115, 116, 117, 118, 119, 122, 123, 124, 126, 127, 128, 129, 130, 131, 133, 134, 144, 145, 147, 148, 150, 151, 153, 171, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 253, 254, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 277, 279, 280, 282, 283, 284, 286, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 307, 308, 309, 311, 312, 313, 317, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 340, 349, 350, 359, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 374, 376, 377, 378, 382, 384, 385, 387, 408, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/dataset/dialogue_zero_shot_intent_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 127, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 127, "excluded_lines": 0}, "missing_lines": [17, 19, 21, 22, 23, 24, 25, 27, 30, 37, 38, 41, 48, 58, 59, 60, 61, 62, 67, 77, 78, 79, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 162, 164, 165, 166, 167, 168, 169, 171, 172, 174, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 224, 225, 226, 227, 229, 233, 236, 238, 239, 241, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 270, 271, 273, 277, 280, 290, 294, 295, 296, 297], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/input_example/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 3, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 3, "excluded_lines": 0}, "missing_lines": [15, 16, 17], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/input_example/assistant_input_example.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 2, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [16, 19], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/input_example/design_input_example.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 2, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [16, 19], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/input_example/input_example.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 8, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 8, "excluded_lines": 0}, "missing_lines": [16, 19, 34, 35, 37, 38, 40, 41], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/input_example/mellon_qa_input_example.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 2, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [15, 18], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/input_example/ms_marco_input_example.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 2, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [16, 19], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/input_example/sgd_input_example.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 191, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 191, "excluded_lines": 0}, "missing_lines": [16, 21, 23, 24, 26, 35, 109, 113, 114, 115, 118, 121, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 155, 157, 159, 168, 169, 172, 174, 176, 178, 180, 184, 187, 190, 192, 194, 196, 199, 201, 203, 204, 206, 207, 208, 209, 212, 213, 214, 219, 220, 223, 224, 225, 226, 232, 233, 234, 235, 236, 238, 248, 250, 269, 273, 274, 275, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 342, 349, 351, 353, 355, 356, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 381, 382, 383, 384, 385, 387, 388, 389, 390, 392, 393, 397, 405, 406, 408, 409, 410, 411, 412, 414, 418, 419, 420, 421, 427, 430, 431, 432, 433, 435, 440, 441, 442, 443, 445, 450, 451, 452, 453, 458, 467, 472, 473, 474, 475, 476, 477, 478, 480, 481], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/sgd/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 2, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [15, 16], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/sgd/evaluate.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 126, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 126, "excluded_lines": 0}, "missing_lines": [16, 22, 23, 24, 25, 27, 29, 46, 48, 50, 51, 52, 55, 58, 66, 67, 68, 69, 70, 71, 72, 75, 83, 84, 87, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 142, 145, 146, 149, 151, 152, 154, 155, 160, 161, 162, 163, 164, 167, 168, 170, 171, 172, 173, 175, 178, 179, 180, 181, 184, 185, 187, 188, 189, 190, 194, 200, 201, 202, 203, 204, 206, 207, 209, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 225, 226, 229, 230, 231, 233, 234, 235, 236, 237, 239, 241, 242, 243, 246, 269, 270, 271, 272, 273, 274, 276, 277, 280, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/sgd/prediction_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 101, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 101, "excluded_lines": 0}, "missing_lines": [16, 22, 23, 24, 25, 27, 32, 34, 37, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 99, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 134, 135, 139, 142, 146, 150, 155, 156, 159, 166, 167, 170, 171, 172, 175, 184, 185, 186, 187, 190, 199, 200, 201, 204, 226, 229, 230, 231, 234, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251], "excluded_lines": []}, "nemo/collections/nlp/data/dialogue/sgd/schema.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 134, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 134, "excluded_lines": 0}, "missing_lines": [16, 22, 23, 25, 27, 30, 33, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 77, 78, 80, 81, 83, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 102, 103, 104, 106, 107, 108, 110, 111, 112, 114, 115, 116, 118, 119, 120, 122, 123, 124, 126, 127, 128, 130, 131, 132, 134, 135, 137, 138, 140, 141, 143, 144, 146, 147, 149, 150, 151, 153, 154, 156, 157, 159, 160, 163, 166, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 205, 206, 208, 209, 211, 212, 213, 215, 221, 222], "excluded_lines": []}, "nemo/collections/nlp/data/entity_linking/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [15], "excluded_lines": []}, "nemo/collections/nlp/data/entity_linking/entity_linking_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 51, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 51, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 21, 22, 23, 25, 28, 45, 54, 57, 60, 61, 63, 64, 65, 66, 69, 70, 72, 73, 74, 75, 76, 78, 80, 81, 83, 85, 87, 89, 90, 91, 93, 94, 95, 98, 99, 101, 107, 108, 109, 110, 113, 114, 115, 116, 117, 119, 130], "excluded_lines": []}, "nemo/collections/nlp/data/glue_benchmark/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [15], "excluded_lines": []}, "nemo/collections/nlp/data/glue_benchmark/data_processors.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 255, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 255, "excluded_lines": 0}, "missing_lines": [17, 19, 20, 22, 37, 40, 42, 43, 45, 47, 49, 50, 52, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 72, 73, 76, 79, 81, 83, 85, 87, 88, 90, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 114, 117, 118, 120, 122, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 141, 144, 147, 149, 151, 152, 155, 158, 160, 162, 164, 166, 167, 169, 171, 173, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 191, 194, 196, 198, 200, 202, 203, 205, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 229, 232, 234, 236, 238, 240, 241, 243, 245, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 263, 264, 267, 270, 272, 274, 276, 278, 279, 281, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 304, 305, 308, 311, 313, 315, 317, 319, 320, 322, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 346, 349, 351, 353, 355, 357, 358, 360, 362, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 380, 381, 384, 387, 389, 391, 393, 395, 396, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 418, 419, 422, 435, 437, 438, 439, 440, 442, 443], "excluded_lines": []}, "nemo/collections/nlp/data/glue_benchmark/glue_benchmark_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 236, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 236, "excluded_lines": 0}, "missing_lines": [20, 21, 22, 24, 25, 27, 28, 41, 42, 43, 45, 47, 60, 73, 86, 87, 88, 91, 100, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 131, 133, 134, 135, 138, 139, 140, 141, 143, 146, 147, 148, 149, 156, 157, 158, 159, 161, 169, 172, 173, 174, 175, 176, 178, 179, 181, 182, 183, 190, 249, 251, 252, 253, 254, 255, 256, 258, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 284, 285, 286, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 305, 306, 307, 311, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 346, 349, 351, 359, 360, 361, 362, 363, 364, 366, 369, 372, 373, 374, 376, 398, 399, 400, 401, 402, 403, 404, 406, 407, 409, 410, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 434, 435, 436, 437, 439, 440, 442, 451, 452, 453, 454, 457, 458, 460, 465, 466, 467, 468, 470, 471, 472, 473, 474, 480, 481, 483, 485, 488, 491, 503, 504, 514, 515, 516, 518, 519, 520, 522, 523, 524, 525, 527, 532, 533, 534, 535, 536, 537, 538, 540, 541, 544, 554, 558, 559, 560, 561], "excluded_lines": []}, "nemo/collections/nlp/data/information_retrieval/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [15], "excluded_lines": []}, "nemo/collections/nlp/data/information_retrieval/bert_embedding_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 154, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 154, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 30, 33, 34, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 86, 87, 88, 90, 98, 99, 101, 102, 103, 116, 118, 119, 120, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 158, 159, 160, 161, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 179, 180, 181, 183, 186, 187, 188, 190, 191, 192, 193, 196, 197, 198, 200, 201, 202, 203, 205, 211, 213, 214, 215, 216, 218, 219, 221, 222, 225, 226, 228, 229, 236, 237, 238, 240, 241, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 282, 284, 285, 286, 287, 288, 289, 291, 297], "excluded_lines": []}, "nemo/collections/nlp/data/information_retrieval/gpt_embedding_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 146, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 146, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 22, 24, 25, 26, 27, 28, 30, 33, 34, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 86, 88, 97, 98, 100, 101, 102, 115, 117, 118, 119, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 134, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 173, 174, 175, 177, 180, 181, 182, 184, 185, 186, 187, 190, 191, 192, 194, 195, 196, 197, 199, 206, 208, 209, 210, 211, 213, 214, 216, 217, 220, 221, 223, 224, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 261, 262, 264, 265, 266, 267, 268, 271, 273, 281], "excluded_lines": []}, "nemo/collections/nlp/data/information_retrieval/information_retrieval_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 122, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 122, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 21, 22, 24, 26, 29, 39, 42, 43, 44, 46, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 84, 85, 86, 88, 89, 90, 92, 96, 97, 98, 99, 100, 102, 106, 107, 108, 109, 110, 112, 123, 124, 125, 126, 127, 129, 131, 133, 134, 135, 136, 137, 139, 141, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 162, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 190, 194, 196, 200, 201, 203, 207, 210, 211, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 256, 257, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "excluded_lines": []}, "nemo/collections/nlp/data/intent_slot_classification/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 4, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 4, "excluded_lines": 0}, "missing_lines": [16, 20, 23, 26], "excluded_lines": []}, "nemo/collections/nlp/data/intent_slot_classification/intent_slot_classification_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 138, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 138, "excluded_lines": 0}, "missing_lines": [17, 19, 21, 22, 23, 24, 25, 27, 30, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 64, 65, 67, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 112, 113, 114, 116, 117, 119, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 137, 161, 162, 165, 175, 187, 188, 190, 191, 193, 194, 196, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 245, 261, 262, 266, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 287, 288, 290, 291], "excluded_lines": []}, "nemo/collections/nlp/data/intent_slot_classification/intent_slot_classification_descriptor.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 72, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 72, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 24, 27, 59, 66, 67, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 103, 105, 106, 107, 108, 109, 110, 112, 113, 117, 118, 119, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 154, 155, 157, 158, 160, 161, 163], "excluded_lines": []}, "nemo/collections/nlp/data/intent_slot_classification/multi_label_intent_slot_classification_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 41, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 41, "excluded_lines": 0}, "missing_lines": [17, 19, 20, 21, 22, 24, 27, 49, 50, 53, 63, 76, 77, 79, 80, 82, 83, 85, 87, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 115, 116, 117, 118, 119, 120, 121], "excluded_lines": []}, "nemo/collections/nlp/data/intent_slot_classification/multi_label_intent_slot_classification_descriptor.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 59, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 59, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 27, 30, 63, 70, 71, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 107, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 141, 142, 144, 145, 146], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 3, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 3, "excluded_lines": 0}, "missing_lines": [15, 16, 20], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/l2r_lm_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 88, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 88, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 29, 32, 48, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 74, 131, 143, 145, 146, 147, 149, 150, 151, 157, 158, 160, 162, 164, 165, 166, 167, 170, 171, 172, 173, 175, 177, 179, 180, 182, 183, 188, 189, 190, 191, 195, 196, 199, 201, 204, 214, 216, 217, 218, 219, 222, 225, 226, 227, 230, 231, 232, 233, 235, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/lm_bert_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 184, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 184, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 29, 32, 33, 36, 41, 61, 70, 75, 76, 77, 79, 80, 81, 82, 84, 87, 90, 93, 94, 96, 97, 101, 102, 103, 105, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 126, 128, 129, 130, 132, 135, 136, 138, 140, 141, 143, 144, 145, 146, 148, 150, 155, 157, 158, 160, 163, 164, 166, 167, 169, 172, 173, 174, 175, 176, 180, 182, 184, 189, 190, 191, 192, 193, 196, 197, 199, 200, 202, 204, 205, 207, 208, 209, 210, 214, 216, 218, 219, 221, 223, 224, 231, 232, 234, 236, 238, 242, 244, 245, 247, 248, 250, 251, 252, 253, 254, 257, 266, 282, 283, 284, 285, 286, 288, 290, 292, 293, 295, 296, 297, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 312, 313, 316, 318, 321, 326, 332, 333, 334, 335, 343, 344, 346, 348, 350, 351, 355, 356, 358, 359, 360, 361, 363, 364, 368, 371, 376, 384, 385, 386, 387, 392, 393, 394, 395, 398, 402, 405, 406], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 5, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 5, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/bart_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 58, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 58, "excluded_lines": 0}, "missing_lines": [15, 17, 19, 23, 26, 28, 30, 54, 79, 81, 85, 87, 88, 90, 93, 96, 97, 100, 102, 122, 123, 124, 126, 129, 138, 147, 149, 153, 154, 156, 158, 159, 160, 161, 162, 164, 165, 168, 171, 173, 177, 178, 179, 180, 183, 184, 187, 188, 189, 190, 191, 194, 195, 198, 199, 202, 203, 205], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/base_dataset_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 44, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 44, "excluded_lines": 0}, "missing_lines": [15, 18, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 40, 41, 43, 44, 46, 48, 51, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/base_prompt_learning_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 101, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 101, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 21, 24, 30, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 63, 64, 67, 68, 69, 70, 72, 74, 76, 78, 79, 80, 81, 82, 83, 85, 87, 89, 94, 95, 96, 97, 100, 101, 104, 105, 107, 110, 115, 117, 119, 120, 121, 122, 124, 126, 127, 129, 130, 132, 144, 149, 154, 159, 160, 165, 166, 167, 168, 170, 171, 172, 173, 175, 177, 178, 179, 180, 183, 184, 186, 189, 196, 198, 199, 200, 202, 203, 204, 205, 207, 208, 209, 211, 212, 214, 215, 216, 218], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/bert_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 73, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 73, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 21, 23, 30, 33, 34, 51, 52, 53, 54, 55, 58, 61, 64, 65, 66, 67, 68, 71, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 101, 102, 118, 154, 156, 157, 160, 161, 163, 164, 165, 166, 167, 170, 171, 174, 177, 178, 193, 197, 206, 209, 213, 214, 215, 216, 217, 220, 221, 222, 225, 228, 229, 230, 231, 232, 233, 234, 235, 237], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/blendable_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 100, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 100, "excluded_lines": 0}, "missing_lines": [15, 17, 19, 20, 22, 23, 26, 27, 29, 30, 31, 33, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 59, 67, 71, 72, 74, 75, 76, 77, 79, 80, 81, 84, 92, 93, 94, 95, 97, 99, 100, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 126, 128, 130, 133, 134, 135, 139, 141, 142, 144, 145, 147, 149, 150, 153, 155, 157, 158, 159, 160, 162, 163, 165, 166, 168, 169, 173, 174, 175, 177, 178, 179, 180, 181, 182], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/data_samplers.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 104, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 104, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 21, 23, 26, 27, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 59, 60, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 80, 81, 82, 83, 84, 86, 89, 91, 93, 94, 95, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 121, 122, 125, 126, 129, 130, 142, 152, 155, 156, 160, 161, 163, 164, 165, 166, 167, 168, 170, 173, 175, 176, 178, 180, 181, 182, 183, 184, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 206, 207], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/dataset_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 574, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 574, "excluded_lines": 0}, "missing_lines": [33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 62, 64, 67, 68, 69, 70, 71, 72, 74, 77, 81, 82, 83, 84, 85, 87, 90, 94, 96, 100, 101, 103, 104, 105, 106, 109, 110, 111, 114, 115, 116, 117, 119, 122, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 142, 145, 146, 148, 149, 151, 152, 153, 155, 156, 158, 159, 160, 161, 163, 164, 166, 169, 172, 178, 181, 203, 204, 206, 210, 211, 212, 213, 214, 215, 216, 217, 224, 225, 227, 228, 229, 231, 233, 234, 236, 237, 239, 240, 241, 242, 243, 247, 248, 251, 252, 253, 254, 256, 257, 258, 259, 262, 263, 264, 265, 267, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 283, 285, 287, 288, 295, 296, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 332, 333, 336, 337, 338, 339, 340, 342, 344, 345, 347, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 364, 365, 366, 368, 372, 373, 375, 376, 377, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 400, 401, 402, 404, 406, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 421, 424, 438, 440, 441, 443, 445, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 459, 461, 462, 463, 464, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 488, 489, 490, 491, 492, 498, 499, 502, 503, 504, 505, 507, 508, 509, 510, 511, 513, 514, 518, 519, 520, 521, 522, 523, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 543, 544, 546, 548, 550, 551, 552, 553, 556, 560, 561, 562, 563, 564, 567, 568, 569, 572, 575, 576, 577, 578, 579, 580, 581, 582, 584, 587, 611, 612, 615, 616, 617, 618, 619, 621, 622, 633, 634, 635, 636, 637, 655, 656, 657, 666, 667, 668, 669, 680, 681, 682, 683, 684, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 724, 749, 750, 753, 779, 780, 783, 785, 786, 787, 788, 789, 791, 800, 825, 826, 828, 829, 830, 832, 833, 836, 837, 838, 839, 840, 841, 842, 845, 872, 873, 874, 875, 878, 880, 882, 883, 887, 888, 889, 891, 892, 893, 895, 897, 898, 907, 916, 919, 921, 923, 924, 929, 930, 931, 957, 983, 1009, 1013, 1014, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1077, 1078, 1079, 1080, 1081, 1082, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1098, 1126, 1134, 1135, 1138, 1140, 1141, 1142, 1146, 1147, 1148, 1153, 1154, 1155, 1157, 1159, 1160, 1161, 1162, 1163, 1165, 1166, 1168, 1169, 1171, 1173, 1175, 1176, 1178, 1187, 1212, 1213, 1215, 1216, 1217, 1219, 1221, 1222, 1223, 1225, 1228, 1230, 1232, 1233, 1234, 1236, 1238, 1239, 1241, 1242, 1243, 1245, 1248, 1263, 1264, 1265, 1266, 1267, 1268, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1286, 1288, 1289, 1291, 1297, 1298, 1301, 1302, 1303, 1305, 1306, 1307, 1308, 1309, 1310, 1313, 1324, 1325, 1326, 1328, 1331, 1332, 1333, 1334, 1335, 1340, 1341, 1342, 1343, 1344, 1345, 1348, 1349, 1351], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/gpt_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 391, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 391, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 21, 22, 24, 28, 29, 30, 31, 32, 34, 35, 37, 39, 41, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 68, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 95, 96, 97, 99, 100, 102, 103, 104, 105, 106, 108, 109, 114, 115, 116, 128, 140, 152, 156, 157, 172, 173, 176, 177, 178, 179, 180, 192, 193, 194, 195, 196, 197, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 215, 230, 231, 233, 234, 237, 239, 240, 241, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 270, 272, 273, 274, 276, 279, 281, 283, 284, 285, 286, 288, 291, 292, 306, 307, 311, 312, 313, 314, 315, 316, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 339, 340, 341, 342, 343, 346, 360, 362, 363, 365, 368, 370, 373, 375, 376, 377, 378, 380, 381, 386, 388, 389, 391, 394, 395, 396, 399, 400, 403, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 433, 434, 435, 437, 438, 445, 454, 455, 458, 459, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 479, 480, 481, 483, 485, 486, 487, 489, 490, 497, 506, 507, 524, 525, 527, 528, 529, 530, 532, 533, 534, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 555, 576, 577, 579, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 595, 596, 597, 602, 603, 610, 611, 612, 616, 619, 620, 621, 622, 629, 630, 631, 637, 642, 645, 646, 647, 648, 653, 656, 657, 658, 659, 661, 662, 663, 664, 668, 673, 674, 679, 682, 683, 685, 686, 687, 688, 693, 694, 695, 696, 697, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 719, 720, 721, 723, 726, 728, 731, 734, 735, 736, 737, 738, 742, 743, 746, 749, 750, 751, 752, 753, 754, 755, 757, 758, 760, 761, 762, 765, 772, 773, 775, 776, 779, 781, 783, 785, 786, 787, 788, 790, 791, 793, 794, 796, 801, 802, 803, 806, 807, 810, 811, 812, 813, 815, 816, 817, 819, 822, 824, 830, 831, 832, 834, 835, 836, 837, 839, 840, 842], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/gpt_fim_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 123, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 123, "excluded_lines": 0}, "missing_lines": [15, 17, 19, 21, 22, 23, 24, 26, 28, 30, 32, 33, 36, 43, 44, 45, 47, 48, 51, 67, 76, 77, 79, 81, 83, 93, 96, 97, 99, 100, 103, 105, 108, 118, 120, 123, 124, 125, 127, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 149, 150, 151, 153, 154, 155, 156, 158, 160, 161, 163, 165, 166, 168, 170, 172, 173, 174, 175, 176, 178, 180, 185, 186, 200, 205, 206, 210, 211, 213, 214, 216, 218, 219, 220, 221, 222, 225, 226, 228, 229, 231, 233, 251, 253, 256, 257, 259, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 275, 276, 281, 283, 284, 285, 286, 289, 290, 291, 292, 294, 296, 299, 305, 307], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/gpt_prompt_learning_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 200, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 200, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 22, 23, 24, 25, 27, 30, 49, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 83, 85, 87, 89, 90, 91, 94, 95, 98, 99, 100, 101, 103, 104, 106, 107, 108, 109, 110, 112, 123, 125, 128, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 142, 144, 156, 157, 158, 161, 162, 163, 164, 167, 168, 179, 180, 181, 182, 183, 185, 188, 189, 190, 192, 194, 196, 198, 210, 215, 220, 225, 226, 231, 232, 233, 236, 238, 239, 240, 241, 243, 245, 246, 247, 248, 253, 255, 257, 259, 261, 262, 263, 264, 265, 266, 268, 270, 274, 279, 280, 281, 284, 285, 286, 287, 290, 291, 292, 295, 297, 299, 303, 304, 305, 306, 308, 309, 311, 313, 315, 317, 318, 319, 320, 322, 324, 325, 327, 328, 330, 331, 333, 335, 338, 339, 340, 341, 344, 345, 348, 350, 352, 354, 355, 356, 360, 361, 363, 364, 365, 368, 371, 372, 377, 378, 380, 382, 384, 385, 386, 387, 389, 392, 395, 396, 397, 398, 399, 402, 403, 406, 407, 409, 411, 415, 416, 417, 418, 419, 421, 422, 423, 425], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/gpt_sft_chat_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 182, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 182, "excluded_lines": 0}, "missing_lines": [15, 17, 19, 20, 21, 23, 26, 30, 31, 33, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 71, 72, 75, 83, 84, 85, 86, 89, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 135, 137, 139, 142, 145, 146, 148, 149, 151, 153, 154, 157, 158, 159, 160, 162, 163, 164, 166, 167, 169, 170, 172, 173, 175, 178, 179, 182, 183, 184, 185, 186, 188, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 221, 222, 236, 239, 241, 242, 243, 246, 261, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 298, 299, 301, 302, 303, 304, 307, 308, 309, 311, 312, 313, 314, 315, 317, 318, 319, 321, 322, 323, 325, 326, 327, 329, 335, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 363, 364, 365, 366, 367, 370, 371, 373, 374, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 389, 401], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/gpt_sft_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 283, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 283, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 23, 24, 26, 27, 28, 29, 30, 32, 35, 36, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 123, 126, 129, 131, 132, 133, 141, 149, 150, 154, 155, 157, 158, 163, 164, 166, 170, 171, 172, 173, 187, 189, 190, 191, 193, 195, 196, 197, 199, 200, 201, 202, 203, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 244, 247, 249, 255, 256, 261, 262, 267, 268, 269, 270, 271, 272, 274, 276, 288, 289, 290, 299, 300, 301, 307, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 326, 327, 329, 330, 331, 333, 339, 340, 341, 342, 343, 344, 346, 348, 350, 351, 352, 354, 357, 359, 360, 363, 364, 365, 366, 369, 370, 371, 372, 374, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 391, 401, 403, 404, 405, 406, 408, 409, 411, 412, 415, 416, 418, 420, 421, 422, 423, 425, 427, 429, 430, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 454, 456, 457, 459, 460, 461, 462, 463, 466, 467, 468, 469, 471, 484, 487, 488, 489, 490, 491, 494, 496, 497, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 516, 518, 519, 523, 524, 525, 526, 527, 529, 531, 532, 533, 534, 540, 542, 543, 545, 546, 555, 565, 567, 569, 570, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 587, 588, 590, 592, 596, 597, 598, 599, 601, 609, 610, 613, 614, 615, 616, 618, 629, 630, 634], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/indexed_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 429, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 429, "excluded_lines": 0}, "missing_lines": [30, 31, 32, 33, 34, 36, 37, 39, 43, 44, 47, 48, 49, 51, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 76, 77, 78, 79, 80, 89, 92, 94, 95, 97, 98, 100, 103, 105, 107, 109, 110, 113, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 147, 148, 149, 150, 153, 154, 157, 160, 161, 162, 163, 164, 167, 168, 171, 172, 175, 176, 177, 178, 179, 180, 183, 186, 188, 189, 190, 191, 192, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 216, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 250, 251, 253, 254, 256, 257, 258, 260, 261, 262, 265, 266, 267, 268, 269, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377, 380, 381, 382, 384, 385, 386, 387, 388, 390, 391, 392, 394, 396, 397, 398, 399, 400, 402, 403, 404, 406, 408, 409, 411, 412, 414, 415, 416, 418, 419, 420, 422, 423, 425, 426, 428, 430, 431, 432, 433, 437, 438, 440, 441, 442, 444, 445, 446, 448, 449, 450, 452, 453, 454, 455, 456, 457, 460, 461, 468, 469, 470, 472, 473, 474, 476, 477, 478, 480, 481, 482, 484, 485, 486, 488, 489, 491, 492, 494, 495, 496, 497, 498, 500, 502, 503, 505, 506, 508, 509, 510, 512, 513, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 575, 576, 577, 579, 580, 582, 583, 585, 586, 587, 589, 590, 591, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 609, 611, 612, 614, 615, 618, 619, 621, 622, 624, 625], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/indexed_retrieval_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 349, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 349, "excluded_lines": 0}, "missing_lines": [20, 21, 22, 23, 24, 25, 27, 28, 30, 32, 35, 38, 39, 40, 41, 42, 45, 46, 49, 50, 53, 54, 55, 56, 59, 70, 72, 73, 80, 81, 82, 83, 84, 85, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 137, 140, 141, 142, 144, 145, 146, 148, 152, 155, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 245, 246, 247, 249, 250, 252, 253, 254, 255, 257, 258, 259, 261, 262, 263, 265, 266, 267, 269, 270, 272, 273, 275, 277, 278, 279, 280, 284, 285, 287, 289, 290, 292, 293, 294, 296, 297, 298, 299, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 316, 317, 323, 324, 331, 334, 336, 339, 340, 341, 342, 343, 345, 348, 349, 350, 351, 353, 354, 355, 357, 358, 362, 364, 365, 369, 371, 372, 376, 378, 379, 381, 382, 384, 385, 386, 388, 390, 391, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 413, 417, 420, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 438, 440, 441, 442, 443, 444, 446, 447, 449, 456, 457, 458, 459, 460, 461, 463, 467, 468, 470, 473, 475, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 511, 513, 514, 518, 520, 521, 525, 527, 528, 529, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 552, 553, 554, 555, 557, 558, 559, 560, 562, 566, 568, 570, 571, 573, 574, 577, 578, 580, 586, 588, 589], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/length_distribution_type.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 5, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 5, "excluded_lines": 0}, "missing_lines": [15, 18, 19, 20, 21], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/lm_adapted_t5_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 41, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 41, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 20, 26, 41, 42, 43, 44, 45, 60, 61, 73, 74, 80, 82, 83, 84, 85, 86, 88, 91, 96, 97, 100, 101, 102, 105, 106, 111, 112, 115, 116, 118, 120, 128, 130, 131, 132, 133, 141], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/megatron_batch_samplers.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 105, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 105, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 18, 20, 22, 28, 49, 50, 51, 53, 77, 78, 79, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 103, 104, 105, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 129, 130, 131, 133, 135, 136, 137, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 153, 156, 157, 159, 162, 164, 165, 166, 167, 168, 171, 172, 185, 197, 207, 210, 211, 215, 216, 218, 225, 226, 227, 228, 230, 232, 233, 234, 235, 236, 239, 240, 241, 243, 244, 245, 246, 248, 250, 251, 252, 253, 254, 255, 257, 258], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/request_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 53, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 53, "excluded_lines": 0}, "missing_lines": [16, 18, 19, 22, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 55, 57, 58, 66, 72, 73, 75, 76, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/retro_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 71, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 71, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 21, 22, 24, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 42, 43, 45, 47, 49, 51, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 72, 75, 77, 80, 82, 85, 86, 87, 88, 89, 90, 94, 97, 100, 103, 104, 107, 111, 123, 128, 130, 136, 140, 151, 162, 174, 177, 185, 186, 190, 204, 206, 210, 212], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/retro_dataset_legacy.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 201, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 201, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 21, 23, 27, 28, 32, 36, 37, 39, 40, 42, 44, 46, 48, 56, 66, 81, 82, 86, 87, 88, 89, 90, 91, 94, 96, 97, 99, 100, 102, 103, 106, 107, 109, 111, 112, 113, 114, 115, 118, 128, 129, 130, 132, 134, 135, 137, 143, 145, 146, 147, 151, 153, 156, 158, 164, 165, 166, 167, 169, 171, 172, 174, 176, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 235, 254, 257, 258, 275, 276, 277, 280, 281, 282, 283, 284, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 319, 336, 337, 338, 340, 341, 344, 346, 347, 348, 353, 354, 355, 357, 358, 359, 360, 361, 375, 377, 378, 379, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 397, 398, 400, 401, 402, 403, 404, 406, 410, 411, 413, 424, 426, 428, 438, 443, 446, 448, 449, 450, 455, 456, 457, 459, 460, 461, 462, 463, 465, 466, 467, 469], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/retro_fine_tune_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 115, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 115, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 21, 22, 23, 25, 28, 45, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 72, 74, 76, 77, 78, 90, 92, 93, 94, 96, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 110, 112, 116, 117, 119, 121, 122, 124, 126, 127, 128, 129, 130, 132, 135, 136, 137, 139, 140, 141, 143, 144, 146, 149, 150, 151, 152, 154, 155, 156, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 175, 177, 180, 182, 184, 186, 187, 188, 190, 191, 192, 195, 197, 198, 202, 211, 213, 214, 215, 216, 218, 221, 223, 224, 225, 226, 229, 230, 233, 234, 236], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/t5_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 171, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 171, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 21, 23, 24, 28, 29, 32, 34, 36, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 80, 83, 84, 85, 86, 87, 90, 92, 93, 94, 96, 107, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 132, 134, 138, 139, 141, 142, 143, 145, 147, 148, 149, 150, 151, 152, 155, 157, 158, 159, 160, 162, 163, 168, 170, 171, 173, 174, 175, 176, 177, 179, 181, 182, 185, 186, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 225, 227, 228, 282, 285, 288, 289, 292, 293, 314, 315, 316, 318, 321, 334, 342, 344, 345, 359, 360, 361, 362, 363, 364, 365, 368, 369, 370, 371, 373, 374, 375, 378, 381, 384, 392, 393, 394, 395, 398, 399, 402, 403, 404, 405, 406, 409, 410, 413, 414, 417, 418, 420, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 439, 440, 441, 443, 445, 446, 447, 448, 449, 450, 451, 453, 461], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/t5_prompt_learning_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 101, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 101, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 21, 22, 23, 24, 26, 29, 34, 53, 54, 55, 56, 57, 71, 82, 83, 86, 87, 89, 91, 92, 93, 94, 95, 96, 97, 99, 101, 112, 113, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 135, 136, 138, 139, 141, 143, 144, 145, 146, 147, 149, 152, 153, 154, 155, 158, 160, 162, 163, 165, 166, 167, 169, 171, 173, 175, 177, 181, 182, 185, 186, 188, 190, 193, 195, 197, 201, 203, 205, 209, 210, 211, 213, 214, 215, 217, 218, 219, 221, 225, 228, 229, 230, 232, 234], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/t5_sft_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 87, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 87, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 30, 35, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 69, 70, 74, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 98, 99, 100, 102, 103, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 121, 122, 124, 125, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 144, 154, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/ul2_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 76, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 76, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 22, 25, 33, 64, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 120, 145, 146, 148, 149, 160, 161, 171, 172, 174, 175, 195, 217, 218, 220, 221, 224, 225, 226, 228, 248, 249, 268, 269, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 342, 345, 348, 349, 355, 356, 358, 364, 366, 374, 382, 384, 397, 398, 399, 401, 404, 417, 426], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/megatron/xlm_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 189, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 189, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 20, 21, 25, 28, 29, 30, 33, 36, 48, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 80, 82, 83, 84, 85, 86, 88, 106, 107, 110, 111, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 180, 181, 183, 184, 185, 186, 188, 189, 191, 193, 225, 226, 229, 230, 259, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 306, 310, 311, 312, 314, 315, 349, 352, 354, 355, 358, 359, 360, 362, 364, 365, 366, 368, 370, 371, 372, 373, 375, 376, 377, 378, 380, 381, 400, 401, 411, 412, 433, 434, 435, 436, 472, 473, 502, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 549, 553, 554, 555, 557, 558, 559, 560], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/sentence_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 126, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 126, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 32, 35, 36, 47, 48, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 70, 71, 72, 73, 74, 75, 76, 78, 87, 88, 89, 90, 91, 93, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 133, 134, 135, 136, 137, 138, 139, 142, 190, 200, 202, 203, 205, 206, 207, 213, 214, 216, 218, 220, 221, 222, 223, 226, 227, 228, 229, 231, 233, 235, 236, 237, 238, 243, 244, 245, 246, 247, 248, 249, 252, 254, 255, 256, 259, 261, 264, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/t0_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 111, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 111, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 19, 20, 23, 24, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 62, 63, 65, 66, 70, 82, 84, 85, 86, 88, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 104, 108, 109, 110, 111, 112, 113, 114, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 129, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 153, 155, 156, 159, 161, 162, 165, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 181, 182, 183, 185, 186, 187, 190, 192, 193, 195, 205, 206, 207, 209, 210, 211, 213, 214, 215, 217, 218, 219, 221], "excluded_lines": []}, "nemo/collections/nlp/data/language_modeling/text_memmap_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 277, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 277, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 30, 31, 32, 35, 43, 45, 46, 48, 50, 51, 54, 55, 56, 59, 60, 62, 65, 70, 95, 96, 99, 100, 102, 103, 105, 107, 108, 109, 110, 111, 113, 114, 116, 118, 120, 122, 130, 131, 133, 147, 155, 156, 158, 159, 160, 161, 165, 166, 168, 169, 172, 174, 175, 176, 177, 179, 180, 182, 186, 187, 190, 191, 192, 193, 195, 196, 197, 199, 200, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 218, 219, 221, 223, 226, 228, 230, 233, 234, 236, 238, 240, 249, 250, 253, 255, 257, 259, 260, 263, 265, 266, 267, 268, 273, 274, 275, 279, 283, 286, 291, 316, 325, 326, 328, 331, 333, 336, 342, 367, 377, 378, 380, 384, 385, 386, 387, 388, 390, 393, 398, 419, 429, 431, 432, 433, 434, 435, 436, 437, 440, 442, 443, 445, 448, 472, 474, 475, 476, 477, 478, 479, 481, 483, 484, 487, 489, 492, 493, 495, 497, 499, 500, 501, 504, 507, 508, 509, 510, 512, 515, 519, 520, 522, 523, 525, 527, 528, 529, 530, 535, 540, 565, 566, 567, 568, 569, 572, 582, 603, 604, 605, 606, 607, 608, 609, 612, 614, 616, 618, 621, 623, 624, 627, 628, 629, 632, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 647, 648, 649, 652, 654, 655, 657, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 676, 677, 680, 681, 683, 684, 687, 688, 690, 691, 694, 695, 697, 699, 700, 702, 705, 718, 720, 722, 727, 728, 731, 732, 733, 736, 737, 738, 741, 743], "excluded_lines": []}, "nemo/collections/nlp/data/machine_translation/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [15], "excluded_lines": []}, "nemo/collections/nlp/data/machine_translation/machine_translation_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 235, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 235, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 109, 110, 119, 127, 128, 136, 137, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 185, 186, 187, 188, 189, 191, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 224, 225, 226, 228, 229, 231, 233, 234, 236, 237, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 252, 253, 255, 256, 258, 260, 280, 281, 282, 283, 284, 285, 291, 292, 293, 294, 295, 296, 297, 298, 301, 350, 363, 365, 366, 367, 368, 369, 370, 372, 373, 374, 380, 381, 383, 385, 387, 388, 389, 390, 393, 394, 395, 396, 398, 400, 402, 403, 404, 405, 410, 411, 412, 413, 414, 415, 416, 419, 421, 422, 423, 426, 428, 431, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 462, 463], "excluded_lines": []}, "nemo/collections/nlp/data/machine_translation/preproc_mt_data.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 372, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 372, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 30, 31, 32, 35, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 72, 74, 78, 82, 85, 88, 94, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 136, 159, 160, 162, 164, 165, 167, 183, 184, 185, 186, 187, 188, 192, 193, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 218, 219, 220, 247, 251, 252, 254, 256, 260, 261, 262, 263, 264, 266, 268, 269, 270, 271, 272, 274, 276, 277, 278, 282, 291, 292, 293, 294, 295, 297, 298, 313, 314, 316, 317, 319, 327, 336, 338, 339, 342, 343, 345, 346, 347, 348, 350, 353, 354, 399, 401, 403, 404, 405, 406, 410, 413, 416, 417, 420, 421, 424, 453, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 480, 481, 482, 485, 486, 489, 490, 493, 494, 495, 500, 501, 502, 504, 506, 507, 508, 518, 520, 521, 522, 523, 524, 525, 527, 528, 530, 531, 532, 534, 535, 536, 539, 541, 542, 566, 567, 570, 571, 573, 574, 575, 576, 577, 578, 580, 581, 583, 607, 608, 610, 612, 613, 642, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 659, 660, 661, 682, 683, 684, 685, 687, 688, 708, 709, 711, 712, 715, 716, 718, 720, 722, 723, 724, 734, 736, 737, 760, 761, 762, 764, 766, 767, 768, 769, 771, 772, 773, 775, 776, 777, 780, 781, 782, 783, 787, 790, 791, 792, 793, 810, 814, 815, 818, 819, 820, 824, 827, 828, 845, 847, 848, 851, 852, 853, 857, 860, 861, 878, 880, 882, 883, 913, 926, 942, 946, 947, 948, 949, 950, 951, 952, 953, 959, 961, 962, 963, 965, 967, 969, 970, 971, 973, 975, 977, 978, 979, 981, 983, 985, 987, 988, 991, 992, 993, 994, 995, 996, 997, 1001, 1002, 1004, 1005, 1006, 1007, 1010, 1011, 1014, 1015, 1017, 1019, 1020, 1042, 1052, 1053, 1054, 1055, 1059, 1060, 1061, 1062, 1066, 1068, 1069, 1070, 1071, 1073, 1074, 1075], "excluded_lines": []}, "nemo/collections/nlp/data/question_answering/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 3, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 3, "excluded_lines": 0}, "missing_lines": [15, 16, 17], "excluded_lines": []}, "nemo/collections/nlp/data/question_answering/data_processor/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [15], "excluded_lines": []}, "nemo/collections/nlp/data/question_answering/data_processor/qa_processing.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 56, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 56, "excluded_lines": 0}, "missing_lines": [16, 17, 19, 20, 21, 23, 24, 25, 28, 38, 39, 40, 43, 44, 45, 47, 50, 51, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 92, 104, 106, 107, 109], "excluded_lines": []}, "nemo/collections/nlp/data/question_answering/dataset/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 4, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 4, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18], "excluded_lines": []}, "nemo/collections/nlp/data/question_answering/dataset/qa_bert_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 169, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 169, "excluded_lines": 0}, "missing_lines": [16, 18, 19, 21, 22, 23, 24, 27, 30, 44, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 62, 63, 64, 66, 67, 68, 69, 70, 71, 79, 80, 81, 88, 90, 91, 92, 94, 97, 98, 112, 115, 117, 118, 119, 120, 122, 124, 125, 127, 128, 129, 132, 135, 138, 141, 144, 158, 159, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 193, 194, 195, 200, 202, 204, 205, 207, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 226, 229, 230, 231, 232, 234, 235, 236, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 260, 261, 263, 264, 265, 266, 267, 268, 269, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 292, 293, 294, 295, 297, 298, 299, 301, 302, 303, 304, 306, 307, 316, 331, 332, 335, 336, 337, 339, 340, 341, 342, 349], "excluded_lines": []}, "nemo/collections/nlp/data/question_answering/dataset/qa_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 135, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 135, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 23, 24, 29, 30, 33, 36, 39, 40, 41, 42, 43, 45, 46, 51, 52, 53, 56, 57, 59, 60, 62, 63, 65, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 89, 90, 91, 93, 94, 95, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 119, 140, 142, 144, 145, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 187, 188, 189, 191, 193, 194, 212, 213, 214, 215, 216, 218, 224, 225, 226, 227, 229, 234, 236, 238, 239, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 262, 264, 265, 268, 269, 270, 273, 276, 277, 281, 283, 284, 289, 291, 292, 293, 294, 295, 297], "excluded_lines": []}, "nemo/collections/nlp/data/question_answering/dataset/qa_gpt_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 110, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 110, "excluded_lines": 0}, "missing_lines": [16, 17, 19, 20, 21, 23, 24, 25, 26, 29, 32, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 78, 81, 82, 96, 102, 104, 105, 107, 108, 109, 111, 112, 114, 115, 116, 118, 120, 121, 122, 126, 139, 140, 141, 143, 150, 152, 154, 163, 164, 165, 166, 168, 170, 172, 181, 182, 190, 191, 193, 195, 217, 218, 219, 221, 222, 224, 230, 231, 232, 233, 235, 237, 244, 245, 247, 250, 261, 262, 264, 266, 267, 268, 269, 270, 271, 273, 275, 276, 283, 284, 285, 292, 294, 295, 296, 297, 304], "excluded_lines": []}, "nemo/collections/nlp/data/question_answering/dataset/qa_s2s_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 88, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 88, "excluded_lines": 0}, "missing_lines": [16, 18, 19, 20, 22, 23, 24, 25, 28, 31, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 80, 81, 95, 103, 105, 106, 107, 108, 110, 111, 112, 114, 116, 117, 119, 124, 125, 126, 128, 133, 134, 136, 138, 145, 146, 152, 153, 155, 157, 167, 170, 171, 172, 175, 178, 179, 182, 185, 195, 196, 198, 200, 210, 216, 221, 223, 225, 228, 229, 231, 233, 234, 235, 236, 242], "excluded_lines": []}, "nemo/collections/nlp/data/question_answering/input_example/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 4, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 4, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18], "excluded_lines": []}, "nemo/collections/nlp/data/question_answering/input_example/qa_bert_input_example.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 16, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 16, "excluded_lines": 0}, "missing_lines": [15, 16, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "excluded_lines": []}, "nemo/collections/nlp/data/question_answering/input_example/qa_gpt_input_example.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 12, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 12, "excluded_lines": 0}, "missing_lines": [15, 16, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30], "excluded_lines": []}, "nemo/collections/nlp/data/question_answering/input_example/qa_input_example.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 13, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 13, "excluded_lines": 0}, "missing_lines": [15, 16, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 33], "excluded_lines": []}, "nemo/collections/nlp/data/question_answering/input_example/qa_s2s_input_example.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 11, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 11, "excluded_lines": 0}, "missing_lines": [15, 16, 19, 20, 23, 24, 25, 26, 27, 28, 29], "excluded_lines": []}, "nemo/collections/nlp/data/question_answering_squad/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/nlp/data/question_answering_squad/qa_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 437, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 437, "excluded_lines": 0}, "missing_lines": [18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 47, 48, 50, 53, 56, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 104, 105, 108, 109, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 155, 168, 169, 170, 171, 172, 175, 176, 177, 179, 180, 181, 183, 184, 187, 189, 190, 205, 206, 209, 210, 212, 213, 215, 216, 217, 219, 220, 221, 228, 229, 232, 234, 243, 244, 245, 246, 247, 248, 255, 258, 259, 260, 262, 263, 264, 266, 267, 270, 271, 272, 275, 277, 278, 282, 284, 285, 293, 294, 295, 296, 297, 298, 300, 301, 303, 304, 305, 306, 308, 309, 311, 313, 314, 315, 322, 331, 332, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 364, 365, 366, 368, 369, 382, 383, 384, 385, 387, 388, 405, 406, 407, 408, 409, 411, 417, 418, 419, 420, 422, 427, 429, 431, 442, 443, 444, 446, 448, 449, 451, 452, 453, 456, 459, 461, 463, 465, 479, 480, 481, 482, 484, 485, 486, 487, 488, 490, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 507, 513, 515, 517, 522, 524, 526, 527, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 547, 550, 551, 552, 553, 555, 556, 557, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 581, 582, 584, 585, 586, 587, 588, 589, 590, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 613, 614, 615, 616, 618, 619, 620, 622, 623, 624, 625, 628, 629, 638, 653, 654, 655, 657, 668, 670, 671, 672, 674, 675, 677, 681, 682, 683, 684, 687, 688, 690, 692, 699, 702, 704, 706, 708, 709, 710, 711, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 752, 753, 762, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 781, 784, 785, 786, 788, 789, 790, 792, 794, 795, 797, 800, 801, 802, 807, 808, 812, 813, 815, 817, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 838, 843, 845, 846, 847, 851, 852, 853, 854, 856, 857, 859, 861, 867, 870, 871, 872, 873, 875, 877, 880, 884, 886, 887, 888, 890, 891, 892, 894, 895, 897, 899, 904, 905, 907, 908, 909, 911, 914, 916, 917, 918, 920, 921, 922, 924, 926, 937, 948, 950], "excluded_lines": []}, "nemo/collections/nlp/data/question_answering_squad/qa_squad_processing.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 209, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 209, "excluded_lines": 0}, "missing_lines": [17, 18, 20, 21, 22, 24, 30, 32, 38, 39, 40, 43, 45, 46, 49, 50, 51, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 78, 80, 81, 84, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 127, 129, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 143, 146, 150, 151, 152, 154, 155, 156, 157, 158, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 173, 174, 176, 177, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 197, 199, 202, 204, 205, 206, 207, 208, 210, 211, 214, 216, 217, 218, 226, 227, 236, 238, 239, 242, 246, 247, 249, 250, 251, 252, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 281, 285, 287, 288, 289, 290, 291, 293, 296, 306, 307, 308, 310, 311, 312, 314, 318, 319, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 372, 374, 375, 376, 379, 397, 409, 410, 411, 412, 413, 414, 415, 416], "excluded_lines": []}, "nemo/collections/nlp/data/spellchecking_asr_customization/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [16], "excluded_lines": []}, "nemo/collections/nlp/data/spellchecking_asr_customization/bert_example.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 221, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 221, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 21, 23, 27, 34, 71, 72, 79, 81, 82, 86, 90, 105, 108, 111, 126, 127, 128, 129, 131, 132, 133, 135, 160, 161, 163, 164, 166, 167, 168, 169, 170, 177, 178, 179, 180, 181, 182, 183, 186, 191, 192, 193, 204, 206, 207, 209, 211, 212, 214, 216, 217, 227, 229, 243, 245, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 291, 293, 295, 296, 297, 298, 302, 303, 304, 305, 308, 309, 310, 311, 314, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 337, 339, 353, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 388, 389, 390, 391, 392, 393, 394, 396, 410, 411, 412, 413, 414, 415, 416, 418, 419, 427, 429, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 486, 487, 488, 489, 491, 503, 504, 506, 507, 509, 510, 511, 512, 513, 515, 524, 526, 527, 529, 530, 531, 532, 534, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593], "excluded_lines": []}, "nemo/collections/nlp/data/spellchecking_asr_customization/dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 204, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 204, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 38, 71, 72, 73, 74, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 115, 116, 117, 118, 119, 120, 121, 122, 126, 127, 128, 129, 130, 131, 133, 134, 135, 138, 141, 145, 146, 147, 149, 150, 151, 152, 154, 156, 170, 188, 189, 190, 191, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 226, 227, 228, 229, 230, 231, 235, 236, 237, 238, 240, 241, 242, 245, 248, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 267, 269, 281, 290, 291, 294, 307, 308, 309, 310, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 340, 345, 348, 366, 374, 375, 376, 378, 381, 382, 383, 384, 387, 388, 389, 390, 393, 395, 396, 397, 402, 403, 404, 405, 406, 407, 411, 414, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 454, 455, 457, 462, 465, 474, 475, 478, 489, 490, 491, 492, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 518, 523], "excluded_lines": []}, "nemo/collections/nlp/data/spellchecking_asr_customization/utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 539, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 539, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 20, 21, 23, 24, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 143, 144, 145, 146, 149, 150, 153, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 210, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 313, 314, 315, 316, 317, 318, 320, 323, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 365, 366, 368, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 395, 396, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 420, 438, 439, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482, 484, 487, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 521, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 567, 570, 571, 572, 573, 574, 575, 576, 579, 580, 581, 583, 584, 586, 587, 588, 589, 591, 592, 595, 596, 597, 599, 600, 602, 605, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 675, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 706, 714, 715, 717, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 739, 741, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 820, 822, 823, 825, 826, 828, 829, 831, 832, 834, 835, 837, 838, 840, 841, 843, 844, 846, 847, 849, 850, 852, 853, 855, 856, 858, 859, 861, 862, 864, 865, 867, 868, 870, 871, 873, 874, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 891, 892, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 919, 921, 922, 924, 925, 927, 928, 929], "excluded_lines": []}, "nemo/collections/nlp/data/text2sparql/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [16], "excluded_lines": []}, "nemo/collections/nlp/data/text2sparql/text2sparql_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 69, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 69, "excluded_lines": 0}, "missing_lines": [17, 18, 20, 22, 23, 24, 26, 29, 44, 45, 48, 55, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 86, 87, 89, 90, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 107, 108, 109, 111, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 129, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 144, 145, 146], "excluded_lines": []}, "nemo/collections/nlp/data/text_classification/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [16], "excluded_lines": []}, "nemo/collections/nlp/data/text_classification/ptune_text_classification_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 32, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 32, "excluded_lines": 0}, "missing_lines": [17, 18, 19, 21, 22, 24, 27, 28, 29, 30, 31, 32, 35, 36, 39, 40, 41, 42, 44, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70], "excluded_lines": []}, "nemo/collections/nlp/data/text_classification/text_classification_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 158, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 158, "excluded_lines": 0}, "missing_lines": [17, 18, 19, 20, 22, 23, 25, 26, 32, 33, 34, 35, 36, 38, 41, 56, 57, 60, 67, 77, 78, 80, 81, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 107, 108, 109, 113, 118, 119, 120, 121, 122, 123, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 151, 152, 154, 155, 156, 157, 158, 163, 164, 166, 167, 168, 170, 171, 173, 174, 176, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 227, 228, 230, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 254, 255, 256, 259, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 282, 284, 285, 286, 287, 289, 291, 292, 294, 295, 297], "excluded_lines": []}, "nemo/collections/nlp/data/text_normalization/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 3, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 3, "excluded_lines": 0}, "missing_lines": [14, 15, 16], "excluded_lines": []}, "nemo/collections/nlp/data/text_normalization/constants.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 45, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 45, "excluded_lines": 0}, "missing_lines": [15, 16, 19, 20, 23, 24, 25, 26, 27, 30, 31, 32, 33, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 64, 65, 66, 67, 69, 70, 73, 74, 75, 78, 79, 82], "excluded_lines": []}, "nemo/collections/nlp/data/text_normalization/decoder_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 257, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 257, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 40, 67, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 99, 100, 104, 105, 106, 108, 109, 111, 113, 114, 116, 117, 120, 123, 124, 126, 127, 128, 129, 131, 132, 133, 135, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 163, 165, 166, 167, 168, 177, 179, 180, 181, 183, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 236, 237, 240, 241, 242, 250, 252, 267, 268, 269, 271, 272, 274, 281, 283, 284, 285, 286, 287, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 303, 305, 306, 307, 308, 311, 312, 314, 315, 316, 317, 319, 320, 325, 326, 327, 329, 330, 333, 352, 362, 363, 364, 365, 366, 367, 370, 371, 374, 375, 376, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 404, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 426, 469, 478, 480, 481, 482, 488, 490, 491, 492, 493, 496, 497, 498, 499, 501, 503, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 522, 524, 525, 526, 529, 532, 542, 544, 545, 546, 547, 548, 549, 551, 552, 554, 555], "excluded_lines": []}, "nemo/collections/nlp/data/text_normalization/tagger_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 109, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 109, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 21, 22, 23, 24, 25, 27, 30, 49, 61, 62, 63, 64, 65, 66, 69, 70, 71, 75, 76, 80, 81, 82, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 99, 107, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 128, 131, 132, 135, 136, 137, 138, 140, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 164, 165, 167, 168, 169, 172, 173, 175, 176, 177, 179, 181, 184, 195, 198, 200, 202, 203, 204, 205, 206, 208, 209, 210, 211, 213, 214, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226], "excluded_lines": []}, "nemo/collections/nlp/data/text_normalization/test_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 134, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 134, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 23, 26, 36, 37, 38, 39, 41, 50, 52, 53, 54, 55, 57, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 96, 97, 98, 99, 107, 108, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 136, 148, 149, 151, 152, 154, 155, 166, 167, 168, 169, 170, 171, 173, 174, 184, 185, 186, 188, 189, 190, 191, 193, 195, 196, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 262, 263, 265, 266, 268], "excluded_lines": []}, "nemo/collections/nlp/data/text_normalization/utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 112, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 112, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 20, 22, 32, 34, 37, 39, 40, 41, 42, 43, 46, 48, 49, 50, 53, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 137, 138, 139, 140, 141, 143, 144, 145, 147, 148, 149, 151, 154, 166, 168, 169, 170, 171, 172, 173, 175, 177, 178, 180, 181, 182, 183, 186, 188, 191, 193], "excluded_lines": []}, "nemo/collections/nlp/data/text_normalization_as_tagging/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [16], "excluded_lines": []}, "nemo/collections/nlp/data/text_normalization_as_tagging/bert_example.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 145, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 145, "excluded_lines": 0}, "missing_lines": [17, 21, 22, 23, 24, 26, 28, 29, 32, 38, 47, 76, 77, 84, 86, 97, 98, 99, 101, 110, 111, 114, 115, 116, 117, 118, 119, 120, 124, 126, 127, 130, 131, 133, 134, 137, 140, 155, 156, 157, 158, 159, 160, 161, 163, 177, 178, 179, 180, 181, 184, 185, 186, 188, 189, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 204, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 247, 248, 249, 250, 251, 263, 264, 266, 277, 278, 280, 281, 283, 284, 285, 286, 287, 289, 292, 294, 296, 297, 298, 299, 301, 302, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 326, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "excluded_lines": []}, "nemo/collections/nlp/data/text_normalization_as_tagging/tagging.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 96, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 96, "excluded_lines": 0}, "missing_lines": [17, 22, 23, 24, 26, 29, 37, 40, 41, 42, 43, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 72, 76, 78, 81, 90, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 117, 120, 128, 134, 136, 138, 139, 140, 142, 156, 157, 164, 165, 166, 167, 168, 169, 171, 172, 173, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212], "excluded_lines": []}, "nemo/collections/nlp/data/text_normalization_as_tagging/thutmose_tagger_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 41, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 41, "excluded_lines": 0}, "missing_lines": [16, 18, 20, 21, 22, 24, 27, 37, 38, 41, 51, 52, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 77, 78, 81, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102], "excluded_lines": []}, "nemo/collections/nlp/data/text_normalization_as_tagging/utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 238, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 238, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 20, 22, 25, 35, 38, 49, 50, 51, 52, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 87, 89, 90, 93, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 126, 141, 143, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 187, 190, 194, 198, 200, 206, 210, 212, 213, 214, 215, 218, 219, 221, 223, 225, 227, 229, 231, 233, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 260, 261, 262, 266, 267, 268, 270, 273, 280, 283, 289, 291, 295, 298, 300, 303, 309, 312, 334, 335, 336, 337, 338, 339, 340, 341, 342, 352, 353, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 380, 383, 391, 393, 394, 395, 396, 397, 398, 401, 422, 423, 424, 425, 426, 428, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 446, 448, 449, 451, 452, 455, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 503], "excluded_lines": []}, "nemo/collections/nlp/data/token_classification/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/nlp/data/token_classification/punctuation_capitalization_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 688, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 688, "excluded_lines": 0}, "missing_lines": [15, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 64, 65, 66, 67, 69, 72, 73, 80, 81, 85, 86, 90, 91, 95, 96, 100, 101, 105, 106, 113, 114, 117, 118, 126, 127, 129, 130, 135, 136, 139, 140, 143, 144, 147, 148, 154, 155, 162, 163, 166, 167, 169, 170, 178, 179, 185, 186, 188, 189, 207, 208, 211, 212, 218, 219, 221, 222, 224, 225, 228, 229, 230, 231, 234, 235, 236, 237, 241, 242, 245, 260, 261, 262, 264, 265, 266, 267, 268, 272, 283, 286, 294, 295, 301, 302, 310, 324, 325, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 360, 361, 362, 363, 366, 405, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 437, 438, 439, 440, 441, 443, 444, 446, 447, 449, 450, 452, 453, 454, 455, 458, 461, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 497, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 561, 562, 565, 566, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 585, 586, 588, 589, 590, 591, 593, 594, 595, 597, 608, 661, 662, 663, 664, 665, 667, 668, 671, 672, 673, 676, 679, 683, 684, 685, 689, 700, 701, 702, 703, 704, 705, 712, 713, 714, 719, 720, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 748, 784, 785, 786, 787, 788, 789, 791, 793, 794, 796, 797, 800, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 826, 835, 836, 837, 838, 841, 862, 863, 864, 869, 870, 871, 872, 873, 874, 875, 876, 877, 881, 882, 886, 887, 888, 891, 903, 904, 905, 906, 909, 1008, 1009, 1011, 1012, 1023, 1033, 1067, 1068, 1069, 1070, 1072, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1118, 1119, 1120, 1121, 1125, 1134, 1135, 1139, 1140, 1141, 1145, 1146, 1162, 1166, 1169, 1170, 1172, 1174, 1175, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1221, 1231, 1239, 1240, 1242, 1243, 1244, 1251, 1253, 1254, 1268, 1269, 1276, 1277, 1285, 1286, 1287, 1288, 1291, 1292, 1293, 1294, 1295, 1303, 1304, 1305, 1306, 1307, 1315, 1316, 1320, 1321, 1326, 1327, 1329, 1330, 1332, 1341, 1342, 1346, 1347, 1348, 1356, 1357, 1361, 1362, 1363, 1372, 1373, 1376, 1377, 1378, 1383, 1384, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1399, 1400, 1401, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1416, 1417, 1418, 1419, 1420, 1424, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1442, 1443, 1445, 1446, 1447, 1449, 1483, 1484, 1485, 1488, 1489, 1490, 1491, 1500, 1501, 1502, 1503, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1517, 1518, 1519, 1520, 1521, 1522, 1525, 1527, 1530, 1531, 1532, 1533, 1535, 1557, 1558, 1559, 1560, 1561, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1580, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1609, 1610, 1611, 1612, 1615, 1617, 1657, 1658, 1660, 1672, 1673, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1687, 1740, 1741, 1752, 1754, 1756, 1759, 1760, 1761, 1762, 1770, 1771, 1772, 1773, 1774, 1775, 1785, 1786, 1789, 1790, 1791, 1793, 1794, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1817, 1819, 1820, 1821, 1822, 1832, 1834, 1835, 1836, 1837, 1838, 1841, 1843, 1864, 1865, 1866, 1867, 1868, 1869, 1871, 1872, 1874, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1911, 1912, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1937, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1962, 2000], "excluded_lines": []}, "nemo/collections/nlp/data/token_classification/punctuation_capitalization_infer_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 129, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 129, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 33, 35, 36, 37, 40, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 114, 115, 116, 117, 120, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 174, 185, 186, 190, 191, 196, 197, 198, 199, 205, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 264, 265, 267, 268, 280, 291, 301, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 325, 371, 372, 373, 383, 395, 408, 443, 444, 454], "excluded_lines": []}, "nemo/collections/nlp/data/token_classification/punctuation_capitalization_tarred_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 428, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 428, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 62, 64, 65, 66, 67, 70, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 114, 118, 119, 123, 124, 125, 129, 130, 131, 133, 137, 138, 139, 143, 144, 145, 148, 177, 185, 186, 187, 188, 189, 190, 191, 192, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 276, 278, 279, 280, 283, 284, 285, 288, 298, 299, 300, 301, 316, 317, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382, 405, 406, 412, 413, 414, 415, 418, 426, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 448, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 488, 491, 492, 493, 494, 497, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 560, 570, 573, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 611, 612, 618, 619, 620, 621, 622, 623, 627, 628, 629, 630, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 693, 694, 695, 696, 701, 704, 814, 815, 816, 817, 818, 819, 825, 826, 827, 828, 829, 830, 834, 837, 838, 840, 841, 854, 857, 892, 893, 896, 959, 960, 962, 963, 974, 984, 998, 1000, 1001, 1002, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1040, 1041, 1042, 1045, 1046, 1047, 1049, 1050, 1051, 1054, 1056, 1066, 1068, 1073, 1077, 1078, 1083, 1110, 1113, 1114, 1115, 1122, 1123, 1124, 1131, 1132, 1133, 1134, 1141, 1142, 1143, 1144, 1151, 1152, 1153, 1154, 1155, 1156, 1163, 1164, 1165, 1166, 1174, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1223, 1224, 1233, 1234, 1235, 1236, 1238, 1257, 1259, 1260, 1262, 1287, 1288, 1289, 1290, 1291, 1292, 1293], "excluded_lines": []}, "nemo/collections/nlp/data/token_classification/token_classification_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 160, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 160, "excluded_lines": 0}, "missing_lines": [17, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 38, 41, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79, 82, 83, 84, 85, 86, 87, 88, 90, 91, 94, 95, 97, 99, 100, 102, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 147, 148, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 191, 192, 195, 204, 219, 220, 221, 223, 224, 226, 227, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 247, 248, 250, 251, 252, 254, 255, 256, 258, 271, 274, 275, 277, 278, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 296, 297, 299, 300, 310, 316, 317, 320, 327, 337, 339, 340, 341, 342, 344, 345, 347, 348], "excluded_lines": []}, "nemo/collections/nlp/data/token_classification/token_classification_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 88, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 88, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 21, 26, 28, 31, 36, 37, 40, 58, 59, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 87, 88, 90, 93, 115, 116, 118, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 180, 182], "excluded_lines": []}, "nemo/collections/nlp/data/zero_shot_intent_recognition/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [16], "excluded_lines": []}, "nemo/collections/nlp/data/zero_shot_intent_recognition/zero_shot_intent_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 116, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 116, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 21, 22, 28, 29, 30, 31, 32, 34, 37, 42, 51, 52, 53, 54, 56, 58, 60, 62, 64, 66, 67, 68, 69, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 96, 97, 100, 107, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 147, 148, 149, 152, 153, 154, 159, 160, 161, 162, 163, 166, 168, 169, 170, 177, 178, 179, 180, 182, 190, 193, 194, 195, 196, 197, 200, 206, 207, 210, 217, 234, 235, 236, 243, 244, 245, 246, 247, 248, 249, 250, 252, 257, 267, 268, 269, 270, 271, 274, 275, 277, 279, 280, 281, 282, 283], "excluded_lines": []}, "nemo/collections/nlp/losses/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [15], "excluded_lines": []}, "nemo/collections/nlp/losses/sgd_loss.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 77, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 77, "excluded_lines": 0}, "missing_lines": [16, 21, 23, 24, 25, 27, 30, 35, 36, 53, 70, 71, 77, 79, 84, 86, 87, 88, 90, 91, 92, 94, 105, 106, 108, 109, 110, 111, 112, 113, 115, 117, 118, 137, 138, 139, 140, 142, 144, 145, 148, 149, 151, 153, 154, 157, 158, 160, 161, 162, 165, 166, 168, 172, 173, 176, 177, 179, 181, 183, 184, 185, 188, 189, 191, 193, 194, 197, 198, 200, 202, 212, 213, 214, 216, 217, 218], "excluded_lines": []}, "nemo/collections/nlp/metrics/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 4, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 4, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18], "excluded_lines": []}, "nemo/collections/nlp/metrics/classification_report.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 91, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 91, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 21, 24, 63, 65, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 88, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 120, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 141, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 158, 162, 165, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 189, 230, 241, 243, 244, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262], "excluded_lines": []}, "nemo/collections/nlp/metrics/dialogue_metrics.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 89, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 89, "excluded_lines": 0}, "missing_lines": [16, 17, 19, 20, 23, 24, 25, 34, 35, 36, 39, 40, 41, 43, 44, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 68, 69, 71, 72, 79, 80, 81, 82, 83, 86, 87, 88, 104, 105, 106, 117, 118, 119, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 148, 150, 151, 152, 153, 155, 157, 158, 165, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 186], "excluded_lines": []}, "nemo/collections/nlp/metrics/prompt_learning_metrics.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 32, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 32, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 20, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 36, 37, 40, 41, 42, 44, 45, 50, 51, 52, 54, 55, 56, 57, 58, 67, 69], "excluded_lines": []}, "nemo/collections/nlp/metrics/qa_metrics.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 108, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 108, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 23, 24, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 41, 42, 45, 47, 48, 50, 51, 52, 54, 55, 58, 59, 60, 61, 64, 65, 66, 67, 69, 70, 71, 73, 75, 76, 79, 81, 82, 83, 84, 85, 86, 87, 89, 91, 93, 94, 99, 100, 102, 103, 104, 105, 107, 109, 111, 113, 114, 115, 117, 119, 120, 123, 124, 132, 133, 139, 140, 141, 142, 144, 146, 147, 153, 154, 155, 157, 163, 164, 165, 166, 167, 169, 171, 173, 174, 175, 177, 178, 179, 185, 187, 188, 189, 191, 192, 193, 199, 200, 202], "excluded_lines": []}, "nemo/collections/nlp/metrics/sequence_perplexity.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 22, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 22, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 21, 44, 45, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 71, 72, 73], "excluded_lines": []}, "nemo/collections/nlp/metrics/sgd_metrics.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 125, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 125, "excluded_lines": 0}, "missing_lines": [16, 45, 47, 48, 50, 54, 56, 57, 58, 60, 61, 62, 64, 65, 66, 68, 69, 70, 73, 74, 75, 76, 78, 79, 80, 81, 84, 87, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 111, 121, 124, 133, 134, 135, 136, 138, 139, 140, 143, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 207, 217, 220, 234, 235, 236, 238, 243, 248, 251, 261, 264, 279, 281, 286, 287, 289, 290, 292, 293, 296, 298, 299, 301, 302, 306, 307, 309, 310, 313, 316, 320, 321, 324, 327, 329, 330, 333, 336, 338, 339, 341], "excluded_lines": []}, "nemo/collections/nlp/models/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 16, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 16, "excluded_lines": 0}, "missing_lines": [16, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 42], "excluded_lines": []}, "nemo/collections/nlp/models/dialogue/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 4, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 4, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18], "excluded_lines": []}, "nemo/collections/nlp/models/dialogue/dialogue_gpt_classification_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 374, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 374, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 44, 45, 46, 47, 49, 52, 53, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 78, 79, 80, 81, 83, 85, 90, 92, 93, 95, 97, 98, 102, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 129, 131, 132, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 203, 205, 208, 212, 213, 217, 228, 230, 234, 238, 240, 241, 243, 250, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 267, 268, 269, 270, 273, 275, 277, 278, 279, 281, 283, 289, 290, 294, 296, 298, 299, 304, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 319, 320, 321, 322, 325, 326, 327, 330, 334, 336, 337, 338, 342, 344, 346, 347, 350, 351, 352, 361, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 378, 380, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 397, 398, 399, 400, 402, 413, 415, 416, 418, 420, 422, 423, 425, 427, 434, 436, 437, 439, 445, 447, 448, 449, 451, 453, 454, 457, 459, 461, 463, 464, 465, 466, 467, 468, 469, 471, 473, 483, 485, 488, 489, 490, 491, 492, 494, 497, 504, 505, 511, 513, 514, 515, 517, 518, 521, 523, 525, 527, 528, 529, 530, 531, 536, 537, 540, 547, 548, 550, 552, 554, 558, 559, 570, 571, 581, 583, 585, 593, 595, 598, 600, 601, 612, 613, 614, 617, 618, 627, 628, 633, 634, 645, 649, 656, 658, 660, 661, 662, 664, 665, 666, 667, 670, 671, 673, 674, 676, 678, 680, 681, 683, 684, 687, 689, 691, 695, 696, 698, 699, 705, 706, 709, 710, 714, 716, 718, 719, 720, 721, 722, 724, 728, 736, 737, 738, 739, 740, 741, 743, 744, 745, 747, 748, 750, 751, 752, 754, 755, 757, 758, 759, 761, 762, 763, 765, 766, 768, 775, 784, 786, 787, 794, 795], "excluded_lines": []}, "nemo/collections/nlp/models/dialogue/dialogue_gpt_generation_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 236, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 236, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 41, 44, 45, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 70, 72, 73, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 106, 110, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 134, 136, 137, 138, 139, 142, 144, 146, 148, 149, 150, 152, 153, 157, 161, 163, 165, 166, 167, 171, 173, 179, 180, 184, 186, 187, 190, 191, 192, 201, 205, 206, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 224, 225, 226, 227, 229, 233, 234, 235, 238, 239, 240, 241, 244, 245, 246, 248, 251, 252, 253, 256, 257, 260, 263, 264, 266, 268, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 287, 288, 291, 298, 300, 301, 302, 303, 305, 307, 309, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 328, 330, 331, 334, 336, 343, 347, 348, 350, 351, 354, 355, 359, 361, 363, 371, 372, 373, 374, 375, 376, 378, 379, 380, 382, 383, 385, 386, 387, 389, 390, 392, 393, 394, 396, 397, 398, 400, 401, 403, 410, 419, 421, 422, 429, 430], "excluded_lines": []}, "nemo/collections/nlp/models/dialogue/dialogue_nearest_neighbour_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 124, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 124, "excluded_lines": 0}, "missing_lines": [16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 33, 34, 35, 36, 38, 41, 44, 45, 46, 47, 48, 50, 51, 52, 55, 56, 59, 60, 67, 69, 76, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127, 128, 130, 131, 133, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 154, 155, 157, 161, 162, 166, 169, 173, 175, 176, 178, 180, 181, 182, 183, 185, 186, 188, 189, 190, 193, 194, 195, 199, 200, 201, 204, 205, 206, 208, 209, 211, 212, 213, 216, 217, 218, 220, 221, 228, 229], "excluded_lines": []}, "nemo/collections/nlp/models/dialogue/dialogue_s2s_generation_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 208, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 208, "excluded_lines": 0}, "missing_lines": [16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 44, 47, 48, 52, 53, 54, 55, 56, 57, 59, 63, 64, 65, 66, 67, 68, 70, 73, 75, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 104, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 122, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 146, 148, 149, 150, 151, 154, 156, 158, 159, 160, 161, 162, 164, 165, 167, 170, 171, 173, 177, 178, 179, 182, 183, 184, 185, 188, 189, 190, 192, 195, 196, 197, 200, 201, 204, 207, 208, 210, 212, 214, 215, 216, 217, 219, 221, 222, 224, 229, 231, 232, 239, 241, 242, 244, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 262, 264, 266, 267, 269, 271, 278, 282, 283, 285, 286, 289, 290, 296, 297, 301, 303, 305, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 327, 328, 329, 331, 332, 334, 335, 336, 338, 339, 340, 342, 343, 345, 352, 361, 363, 364, 371, 372], "excluded_lines": []}, "nemo/collections/nlp/models/dialogue/dialogue_zero_shot_intent_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 182, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 182, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 34, 35, 36, 37, 38, 40, 43, 46, 47, 48, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 76, 79, 80, 87, 89, 96, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 124, 125, 126, 129, 130, 134, 136, 138, 139, 140, 143, 144, 145, 147, 148, 149, 152, 153, 154, 156, 177, 185, 195, 200, 201, 203, 205, 207, 209, 218, 219, 221, 225, 226, 227, 229, 230, 231, 232, 233, 238, 239, 240, 243, 244, 250, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 277, 281, 282, 285, 288, 292, 293, 294, 296, 298, 300, 301, 302, 303, 304, 306, 307, 309, 358, 359, 360, 361, 363, 364, 366, 367, 369, 370, 371, 374, 375, 377, 385, 386, 387, 389, 394, 396, 397, 399, 401, 402, 405, 406, 407, 409, 410, 411, 412, 422, 423, 425, 426, 433, 434, 441, 448], "excluded_lines": []}, "nemo/collections/nlp/models/dialogue/intent_slot_classification_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 267, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 267, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 44, 45, 47, 49, 51, 53, 55, 58, 60, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 80, 83, 84, 85, 86, 88, 89, 90, 92, 93, 94, 96, 99, 100, 101, 105, 106, 107, 108, 110, 111, 112, 114, 116, 117, 118, 119, 120, 122, 125, 135, 137, 138, 140, 141, 143, 148, 154, 161, 169, 170, 172, 174, 176, 183, 184, 186, 187, 192, 193, 195, 198, 199, 201, 207, 208, 213, 214, 215, 216, 218, 219, 221, 226, 231, 232, 237, 238, 239, 243, 244, 247, 248, 249, 251, 266, 267, 269, 270, 282, 283, 284, 285, 286, 287, 288, 290, 296, 301, 303, 305, 317, 318, 320, 321, 322, 323, 324, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 349, 350, 352, 353, 355, 356, 357, 359, 360, 361, 362, 363, 366, 370, 371, 372, 374, 375, 377, 388, 395, 397, 403, 404, 405, 407, 408, 415, 418, 419, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 454, 459, 460, 461, 463, 468, 470, 471, 473, 474, 476, 477, 479, 480, 482, 489, 499, 509, 513, 523, 531, 532, 533, 534, 535, 536, 538, 548, 549, 550, 552, 555, 556, 559, 561, 562, 564, 571, 572, 575, 576, 579, 581, 583, 585, 587, 590, 592, 596, 598, 600, 601, 602, 603, 604, 605, 607, 610, 611, 613, 614, 621, 622, 627, 628], "excluded_lines": []}, "nemo/collections/nlp/models/dialogue/sgdqa_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 248, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 248, "excluded_lines": 0}, "missing_lines": [16, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 42, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 69, 70, 72, 73, 83, 92, 93, 110, 118, 134, 136, 137, 139, 144, 152, 153, 154, 155, 157, 159, 161, 169, 170, 171, 173, 175, 177, 186, 203, 211, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 290, 293, 295, 296, 297, 300, 302, 303, 305, 307, 308, 310, 312, 313, 314, 315, 316, 321, 322, 324, 325, 327, 343, 345, 352, 353, 354, 355, 357, 358, 360, 362, 369, 370, 371, 372, 374, 375, 377, 379, 392, 401, 402, 403, 414, 416, 425, 426, 427, 428, 430, 431, 432, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 457, 458, 459, 461, 462, 465, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 491, 494, 503, 512, 514, 518, 519, 521, 528, 530, 538, 539, 540, 541, 542, 543, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 559, 561, 562, 566, 575, 584, 586, 587, 594, 596, 603], "excluded_lines": []}, "nemo/collections/nlp/models/duplex_text_normalization/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 3, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 3, "excluded_lines": 0}, "missing_lines": [15, 16, 17], "excluded_lines": []}, "nemo/collections/nlp/models/duplex_text_normalization/duplex_decoder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 282, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 282, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 47, 50, 55, 56, 57, 64, 65, 66, 68, 71, 72, 73, 75, 77, 78, 79, 80, 82, 85, 88, 90, 91, 92, 95, 98, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 118, 119, 120, 123, 126, 133, 134, 137, 144, 145, 146, 147, 150, 156, 163, 167, 170, 171, 172, 173, 175, 179, 180, 182, 183, 185, 192, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 263, 264, 265, 266, 267, 268, 272, 277, 279, 284, 286, 287, 291, 295, 296, 298, 301, 302, 320, 322, 323, 324, 325, 326, 327, 329, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 357, 358, 360, 365, 368, 369, 370, 371, 373, 374, 375, 376, 378, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 399, 401, 404, 405, 406, 409, 410, 411, 418, 422, 423, 426, 427, 432, 433, 434, 437, 438, 439, 446, 450, 451, 454, 455, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 475, 476, 477, 479, 480, 482, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 505, 514, 515, 516, 518, 535, 536, 537, 538, 539, 540, 542, 545, 555, 557, 558, 564, 565, 572, 579], "excluded_lines": []}, "nemo/collections/nlp/models/duplex_text_normalization/duplex_tagger.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 197, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 197, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 36, 41, 42, 43, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 71, 74, 79, 81, 82, 83, 84, 87, 92, 94, 97, 99, 100, 101, 102, 105, 111, 112, 115, 116, 117, 118, 119, 123, 129, 131, 133, 135, 137, 142, 144, 149, 152, 153, 167, 169, 170, 171, 172, 173, 174, 175, 178, 180, 181, 185, 186, 189, 191, 192, 195, 196, 197, 200, 201, 202, 203, 204, 207, 209, 210, 211, 212, 213, 215, 216, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 241, 247, 248, 250, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 279, 280, 282, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 318, 319, 320, 322, 323, 324, 327, 328, 329, 331, 332, 333, 336, 337, 338, 340, 341, 342, 343, 344, 345, 356, 357, 360, 361, 362, 364, 370, 371, 372, 373, 375, 376, 382, 383, 390, 397], "excluded_lines": []}, "nemo/collections/nlp/models/duplex_text_normalization/duplex_tn.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 138, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 138, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 31, 32, 33, 36, 39, 46, 47, 49, 50, 51, 53, 69, 70, 73, 84, 85, 86, 87, 88, 89, 90, 100, 102, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 135, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 165, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 193, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 224, 225, 226, 229, 248, 250, 251, 252, 254, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 279, 281, 285, 286, 287, 289, 294, 295, 296, 297, 298], "excluded_lines": []}, "nemo/collections/nlp/models/duplex_text_normalization/utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 11, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 11, "excluded_lines": 0}, "missing_lines": [15, 17, 20, 22, 25, 27, 28, 29, 30, 32, 33], "excluded_lines": []}, "nemo/collections/nlp/models/enc_dec_nlp_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 49, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 49, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 37, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 80, 81, 82], "excluded_lines": []}, "nemo/collections/nlp/models/entity_linking/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [15], "excluded_lines": []}, "nemo/collections/nlp/models/entity_linking/entity_linking_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 82, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 82, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 33, 40, 41, 42, 44, 48, 50, 53, 54, 56, 57, 61, 63, 64, 65, 68, 69, 72, 73, 75, 80, 81, 82, 86, 87, 88, 91, 92, 93, 95, 97, 102, 103, 104, 105, 109, 110, 112, 113, 115, 116, 117, 119, 128, 129, 132, 133, 134, 136, 137, 138, 143, 144, 146, 148, 149, 150, 155, 156, 158, 160, 162, 169, 179, 180, 181, 183, 184, 185], "excluded_lines": []}, "nemo/collections/nlp/models/glue_benchmark/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [15], "excluded_lines": []}, "nemo/collections/nlp/models/glue_benchmark/glue_benchmark_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 139, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 139, "excluded_lines": 0}, "missing_lines": [17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 82, 83, 84, 88, 89, 90, 95, 96, 97, 99, 101, 103, 104, 105, 107, 110, 112, 120, 121, 122, 123, 128, 130, 131, 133, 134, 135, 138, 139, 141, 142, 144, 145, 146, 148, 149, 151, 153, 155, 156, 158, 163, 164, 165, 167, 168, 170, 172, 173, 175, 176, 177, 178, 180, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 233, 235, 236, 237, 239, 241, 242, 243, 245, 247, 248, 249, 250, 255, 263, 273, 274, 275], "excluded_lines": []}, "nemo/collections/nlp/models/glue_benchmark/metrics_for_glue.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 27, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 27, "excluded_lines": 0}, "missing_lines": [17, 19, 20, 22, 25, 26, 29, 30, 31, 32, 35, 36, 39, 40, 41, 42, 45, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66], "excluded_lines": []}, "nemo/collections/nlp/models/information_retrieval/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 2, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [15, 16], "excluded_lines": []}, "nemo/collections/nlp/models/information_retrieval/base_ir_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 99, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 99, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 23, 24, 25, 26, 28, 31, 36, 38, 40, 42, 43, 44, 46, 47, 49, 50, 55, 62, 63, 64, 65, 66, 68, 69, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 95, 96, 97, 99, 104, 105, 106, 112, 113, 115, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 140, 141, 142, 143, 145, 147, 148, 149, 151, 153, 154, 155, 159, 161, 164, 168, 170, 171, 172, 177, 179, 180, 182, 183, 185, 186, 188, 190, 201, 210, 211, 212], "excluded_lines": []}, "nemo/collections/nlp/models/information_retrieval/bert_dpr_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 50, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 50, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 31, 38, 39, 40, 49, 50, 51, 53, 55, 56, 58, 60, 61, 62, 64, 65, 69, 72, 73, 75, 78, 79, 80, 81, 85, 87, 88, 89, 90, 92, 100, 102, 103, 105, 106, 108, 110, 112, 124], "excluded_lines": []}, "nemo/collections/nlp/models/information_retrieval/bert_embedding_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 53, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 53, "excluded_lines": 0}, "missing_lines": [16, 18, 19, 20, 22, 26, 28, 29, 31, 33, 35, 38, 42, 45, 47, 51, 52, 54, 56, 57, 58, 60, 62, 64, 66, 68, 70, 71, 73, 74, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 92, 108, 111, 112, 115, 121, 122, 125, 126, 130, 139, 142, 143], "excluded_lines": []}, "nemo/collections/nlp/models/information_retrieval/bert_joint_ir_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 41, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 41, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 31, 38, 39, 40, 42, 43, 44, 46, 48, 49, 51, 53, 54, 55, 58, 60, 61, 63, 66, 67, 69, 71, 73, 74, 75, 77, 82, 84, 85, 87], "excluded_lines": []}, "nemo/collections/nlp/models/information_retrieval/megatron_bert_embedding_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 208, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 208, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 22, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 46, 50, 53, 54, 58, 59, 61, 62, 64, 66, 68, 70, 73, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 111, 150, 152, 154, 155, 156, 158, 165, 166, 174, 175, 176, 177, 178, 179, 180, 182, 184, 192, 194, 201, 202, 203, 205, 206, 207, 209, 210, 214, 215, 216, 218, 219, 220, 223, 224, 225, 226, 227, 232, 233, 235, 240, 242, 243, 245, 246, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 285, 288, 289, 292, 293, 294, 303, 304, 313, 315, 319, 328, 330, 331, 332, 333, 336, 338, 339, 340, 341, 344, 346, 348, 350, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 371, 373, 377, 379, 389, 390, 391, 392, 394, 395, 397, 400, 401, 403, 407, 408, 409, 411, 415, 417, 419, 421, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 438, 440, 441, 443, 444, 446, 448, 449, 451, 453, 455, 457, 458, 459, 460, 461, 463, 464, 465, 467, 469, 471, 473, 475, 476, 477, 479, 483, 488, 492, 494, 496, 500], "excluded_lines": []}, "nemo/collections/nlp/models/information_retrieval/megatron_gpt_embedding_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 211, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 211, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 23, 24, 27, 28, 29, 31, 32, 34, 36, 38, 39, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 65, 67, 69, 70, 75, 76, 78, 79, 84, 86, 88, 89, 92, 95, 98, 105, 106, 113, 114, 115, 116, 118, 119, 122, 123, 124, 126, 127, 130, 134, 137, 141, 144, 145, 146, 147, 168, 169, 170, 172, 175, 177, 199, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 242, 244, 245, 246, 247, 248, 255, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 276, 280, 281, 290, 291, 296, 297, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 331, 332, 333, 335, 336, 338, 339, 341, 342, 343, 345, 346, 347, 349, 351, 353, 354, 355, 357, 360, 361, 363, 365, 366, 368, 370, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 392, 393, 394, 397, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 420, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433], "excluded_lines": []}, "nemo/collections/nlp/models/intent_slot_classification/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 2, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [15, 18], "excluded_lines": []}, "nemo/collections/nlp/models/intent_slot_classification/intent_slot_classification_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 194, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 194, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 22, 24, 25, 30, 31, 32, 33, 34, 35, 36, 39, 40, 43, 46, 48, 50, 52, 53, 55, 57, 62, 63, 64, 66, 67, 68, 70, 71, 72, 74, 75, 77, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 93, 96, 97, 98, 102, 103, 104, 105, 107, 108, 109, 111, 113, 114, 115, 116, 117, 119, 122, 132, 134, 135, 137, 138, 140, 145, 151, 158, 166, 167, 169, 171, 173, 180, 181, 183, 184, 189, 192, 193, 195, 196, 198, 204, 205, 210, 211, 212, 213, 215, 216, 218, 223, 228, 229, 234, 235, 236, 240, 241, 243, 244, 245, 246, 248, 257, 258, 260, 265, 266, 267, 269, 270, 273, 274, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 291, 301, 306, 307, 308, 310, 315, 317, 318, 320, 321, 323, 324, 326, 327, 328, 330, 331, 336, 347, 357, 367, 371, 381, 390, 391, 392, 393, 394, 397, 398, 407, 408, 411, 413, 414, 416, 424, 427, 428, 429, 432, 435, 437, 438, 439, 440, 441, 442, 444, 445, 449, 451, 453, 454, 461, 462, 467, 468], "excluded_lines": []}, "nemo/collections/nlp/models/intent_slot_classification/multi_label_intent_slot_classification_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 181, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 181, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 31, 32, 33, 34, 35, 36, 39, 40, 48, 51, 52, 55, 57, 59, 61, 64, 67, 69, 85, 86, 87, 88, 90, 91, 92, 94, 95, 96, 98, 101, 102, 103, 107, 108, 109, 110, 112, 113, 114, 116, 119, 129, 131, 132, 134, 135, 137, 142, 148, 155, 167, 168, 173, 174, 175, 177, 179, 181, 182, 183, 184, 186, 195, 196, 198, 209, 210, 211, 213, 214, 215, 217, 218, 223, 235, 245, 257, 259, 260, 261, 264, 265, 268, 270, 271, 273, 280, 282, 286, 288, 290, 303, 305, 306, 308, 310, 312, 313, 314, 315, 316, 317, 318, 321, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 336, 339, 342, 346, 347, 349, 351, 353, 377, 379, 380, 381, 383, 384, 386, 387, 388, 391, 392, 395, 396, 399, 401, 402, 404, 412, 414, 415, 416, 417, 418, 419, 420, 422, 424, 425, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 447, 449, 451, 452, 456, 457], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 5, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 5, "excluded_lines": 0}, "missing_lines": [15, 16, 19, 20, 21], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/bert_lm_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 132, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 132, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 37, 40, 45, 46, 47, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 62, 63, 64, 65, 66, 68, 70, 72, 73, 74, 75, 77, 81, 82, 83, 85, 94, 96, 97, 106, 107, 110, 114, 115, 119, 121, 123, 124, 129, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 154, 156, 161, 162, 163, 164, 165, 166, 167, 168, 170, 175, 176, 177, 178, 179, 180, 181, 182, 184, 193, 194, 195, 196, 197, 198, 200, 201, 207, 208, 214, 215, 217, 218, 219, 220, 222, 223, 225, 226, 227, 230, 232, 233, 239, 241, 242, 249, 257, 259, 260, 267, 269, 277, 284], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 5, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 5, "excluded_lines": 0}, "missing_lines": [17, 18, 20, 21, 22], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron/bert/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron/bert/bert_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 220, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 220, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 21, 23, 24, 25, 26, 37, 38, 39, 41, 42, 44, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64, 66, 67, 70, 73, 75, 77, 79, 85, 87, 90, 101, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 141, 144, 148, 150, 151, 153, 155, 156, 160, 161, 162, 163, 165, 167, 170, 171, 172, 173, 174, 175, 178, 179, 180, 182, 189, 196, 209, 212, 215, 225, 226, 231, 234, 237, 240, 247, 248, 252, 253, 258, 261, 264, 268, 269, 274, 282, 284, 287, 288, 290, 291, 292, 293, 297, 310, 312, 313, 314, 315, 320, 326, 327, 329, 330, 331, 334, 342, 343, 348, 351, 353, 364, 365, 367, 371, 387, 390, 391, 392, 394, 395, 397, 398, 400, 401, 402, 404, 409, 410, 411, 414, 415, 416, 418, 419, 421, 422, 423, 425, 427, 429, 431, 434, 440, 479, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 534, 538, 539, 549, 550, 551, 552, 553, 555, 557, 559, 568, 570, 571, 572, 574, 575, 577, 585, 586, 588, 590, 591, 601, 603, 607, 608, 611, 612, 615, 616, 618, 619, 622, 624, 627, 628, 629, 630, 631, 633, 634], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron/bert/bert_spec.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 18, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 18, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 33, 35, 36, 37, 39, 45, 70], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron/falcon/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron/falcon/falcon_decoder_layer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 60, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 60, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 30, 32, 33, 34, 35, 37, 53, 61, 68, 69, 72, 74, 75, 77, 78, 79, 81, 83, 84, 86, 92, 93, 100, 102, 115, 117, 118, 119, 121, 123, 126, 133, 134, 138, 139, 140, 142, 143, 146, 148, 151, 152, 153, 154, 155, 157, 158, 162, 164], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron/falcon/falcon_spec.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 21, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 21, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 26, 27, 28, 29, 30, 32, 34, 36, 38, 40, 44, 45, 46, 49, 70, 71], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron/gpt_full_te_layer_autocast_spec.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 97, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 97, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 21, 22, 24, 25, 27, 29, 31, 33, 34, 36, 37, 38, 39, 40, 42, 44, 46, 48, 49, 54, 55, 89, 90, 92, 124, 125, 126, 127, 128, 129, 131, 132, 134, 137, 138, 140, 141, 142, 143, 144, 147, 149, 159, 160, 169, 170, 181, 182, 183, 184, 186, 187, 188, 190, 216, 217, 219, 224, 229, 230, 234, 235, 236, 237, 238, 242, 252, 261, 262, 264, 266, 268, 270, 274, 275, 276, 278, 279, 280, 281, 285, 286, 288, 290, 292, 293, 302, 303, 316, 320, 321, 322, 324], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron/gpt_layer_ammo_spec.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 23, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 23, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 31, 32, 33, 34, 36, 37, 40, 47, 48, 50], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron/gpt_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 85, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 85, "excluded_lines": 0}, "missing_lines": [15, 17, 19, 20, 21, 28, 29, 31, 33, 36, 38, 40, 41, 43, 45, 47, 49, 52, 64, 65, 68, 69, 70, 73, 82, 83, 85, 87, 90, 92, 93, 94, 96, 99, 101, 102, 104, 107, 110, 170, 172, 173, 174, 175, 176, 177, 179, 180, 183, 185, 190, 251, 252, 256, 258, 260, 280, 292, 293, 294, 295, 297, 298, 299, 313, 314, 315, 317, 319, 320, 321, 323, 325, 327, 329, 330, 334, 335, 338, 340, 344, 345, 346, 347, 348], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron_bart_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 20, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 20, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 20, 23, 28, 29, 31, 32, 34, 36, 38, 39, 43, 44, 48, 49, 51, 53, 54], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron_base_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 594, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 594, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 55, 57, 60, 61, 62, 63, 64, 66, 68, 70, 72, 74, 75, 77, 78, 79, 81, 84, 101, 103, 104, 108, 109, 111, 112, 118, 120, 121, 122, 124, 127, 128, 130, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 154, 156, 157, 160, 163, 164, 165, 170, 171, 173, 174, 175, 179, 181, 182, 183, 185, 189, 210, 213, 215, 217, 221, 224, 227, 234, 236, 237, 240, 241, 242, 244, 246, 250, 255, 256, 257, 258, 259, 260, 262, 266, 268, 273, 274, 275, 276, 277, 283, 290, 292, 294, 296, 297, 299, 303, 306, 307, 308, 309, 310, 311, 313, 314, 316, 318, 319, 320, 324, 325, 327, 329, 334, 335, 337, 339, 340, 342, 343, 344, 345, 347, 348, 349, 350, 357, 358, 360, 362, 363, 365, 368, 370, 374, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 396, 399, 400, 401, 402, 403, 404, 405, 408, 410, 417, 418, 420, 421, 434, 435, 436, 438, 439, 440, 442, 443, 444, 445, 447, 448, 449, 450, 452, 460, 463, 466, 468, 469, 471, 472, 474, 476, 478, 480, 482, 483, 484, 485, 486, 488, 489, 491, 493, 494, 495, 496, 498, 502, 503, 505, 506, 508, 510, 513, 516, 517, 518, 521, 546, 548, 549, 551, 552, 554, 555, 557, 562, 564, 566, 571, 577, 581, 582, 583, 584, 585, 588, 590, 594, 595, 596, 597, 600, 601, 603, 607, 608, 609, 611, 612, 613, 615, 617, 619, 621, 623, 624, 626, 628, 630, 631, 633, 635, 640, 641, 642, 643, 644, 645, 646, 650, 651, 652, 653, 654, 655, 658, 659, 661, 670, 671, 672, 673, 675, 676, 677, 679, 680, 683, 684, 685, 691, 694, 696, 701, 705, 706, 708, 709, 711, 714, 715, 722, 724, 725, 727, 728, 730, 731, 732, 733, 735, 739, 740, 741, 742, 744, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 761, 762, 763, 769, 770, 773, 774, 775, 776, 779, 780, 781, 782, 783, 784, 785, 787, 789, 791, 792, 795, 796, 797, 798, 799, 800, 802, 803, 809, 816, 818, 820, 823, 825, 827, 836, 837, 838, 842, 844, 850, 853, 854, 855, 856, 857, 858, 863, 864, 865, 866, 867, 868, 870, 871, 872, 875, 876, 878, 879, 881, 883, 884, 886, 887, 889, 890, 892, 899, 901, 903, 904, 905, 907, 908, 909, 910, 911, 912, 914, 916, 920, 922, 923, 926, 927, 933, 934, 935, 937, 938, 939, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 953, 954, 956, 958, 959, 960, 962, 966, 967, 968, 972, 973, 975, 976, 980, 981, 983, 984, 986, 987, 988, 990, 991, 992, 993, 995, 996, 998, 1000, 1002, 1004, 1005, 1006, 1009, 1014, 1020, 1021, 1023, 1024, 1029, 1033, 1034, 1037, 1039, 1041, 1043, 1047, 1049, 1055, 1056, 1059, 1063, 1064, 1067, 1074, 1075, 1078, 1085, 1086, 1089, 1090, 1091, 1093, 1098, 1101, 1104, 1107, 1136, 1138, 1140, 1141, 1143, 1144, 1146, 1151, 1153, 1155, 1156, 1157, 1161, 1163, 1167, 1168, 1169, 1170, 1172, 1174, 1178, 1179, 1180, 1182, 1186, 1187, 1191, 1193, 1194, 1197, 1199, 1200, 1201, 1204, 1205, 1208, 1209, 1210, 1211, 1212, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1226, 1227, 1228, 1230, 1236, 1237, 1240, 1243, 1245, 1246, 1247, 1249, 1250, 1251, 1253, 1254, 1255, 1256], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron_base_prompt_learning_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 185, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 185, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 36, 37, 38, 39, 41, 42, 44, 46, 47, 49, 50, 52, 54, 56, 58, 61, 64, 84, 85, 87, 89, 90, 91, 93, 94, 97, 99, 100, 102, 103, 104, 107, 109, 114, 117, 118, 119, 120, 122, 124, 125, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 143, 148, 149, 150, 151, 152, 153, 154, 155, 157, 164, 165, 166, 168, 169, 170, 181, 182, 183, 187, 188, 189, 191, 196, 201, 202, 204, 205, 217, 221, 222, 224, 231, 233, 234, 235, 237, 239, 241, 246, 247, 248, 249, 250, 252, 254, 260, 261, 263, 265, 266, 267, 269, 271, 273, 287, 288, 289, 292, 295, 296, 298, 300, 301, 303, 306, 307, 308, 313, 316, 317, 319, 321, 323, 325, 326, 327, 328, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 355, 356, 357, 367, 368, 369, 379, 381, 383, 384, 392, 393, 394, 402, 403, 405, 406, 408, 409, 411, 412, 414, 415, 416, 418, 419, 422, 436, 441], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron_bert_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 557, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 557, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 22, 24, 25, 29, 33, 36, 37, 38, 39, 44, 45, 46, 47, 49, 50, 52, 54, 56, 58, 59, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 76, 77, 78, 81, 87, 88, 89, 92, 93, 95, 96, 98, 100, 102, 104, 106, 112, 113, 116, 123, 124, 126, 128, 130, 131, 132, 134, 137, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 156, 171, 210, 212, 216, 217, 221, 222, 223, 224, 225, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 252, 253, 255, 256, 258, 264, 265, 266, 267, 269, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 292, 294, 303, 304, 306, 307, 309, 316, 318, 319, 321, 323, 324, 325, 326, 328, 330, 332, 334, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 355, 357, 361, 363, 373, 374, 375, 376, 378, 379, 381, 384, 385, 387, 391, 392, 393, 395, 399, 401, 403, 405, 407, 408, 409, 410, 412, 414, 415, 416, 417, 418, 419, 420, 421, 425, 427, 439, 440, 444, 447, 452, 453, 455, 456, 458, 459, 461, 462, 463, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 479, 480, 481, 482, 486, 493, 497, 498, 499, 500, 501, 503, 506, 507, 511, 513, 515, 516, 518, 519, 520, 521, 523, 525, 527, 537, 538, 539, 540, 542, 544, 545, 546, 548, 549, 550, 552, 554, 556, 557, 559, 560, 562, 563, 564, 566, 567, 569, 570, 574, 575, 577, 579, 580, 581, 582, 590, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 634, 635, 636, 637, 659, 660, 661, 683, 685, 686, 687, 688, 689, 691, 692, 693, 695, 701, 702, 706, 724, 725, 726, 727, 728, 729, 730, 733, 735, 737, 742, 744, 748, 750, 753, 754, 755, 756, 757, 759, 760, 762, 770, 772, 779, 780, 781, 783, 784, 785, 787, 788, 792, 793, 794, 796, 797, 798, 799, 802, 803, 804, 805, 806, 811, 812, 813, 815, 816, 818, 822, 827, 828, 829, 830, 831, 832, 834, 835, 836, 840, 841, 843, 845, 851, 852, 853, 854, 856, 858, 859, 860, 861, 863, 866, 867, 869, 870, 871, 880, 881, 890, 892, 895, 903, 904, 905, 906, 909, 911, 912, 913, 914, 917, 919, 920, 921, 922, 925, 927, 933, 935, 936, 937, 939, 941, 942, 948, 949, 950, 957, 958, 959, 966, 967, 974, 976, 978, 980, 982, 986, 987, 988, 989, 990, 991, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1009, 1010, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1023, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056, 1057, 1059, 1062, 1063, 1064, 1071, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1085, 1092, 1093, 1094, 1095, 1096, 1098, 1099, 1100, 1102, 1103, 1106, 1107, 1109, 1111, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1124, 1128, 1129, 1130, 1131, 1132, 1134, 1136, 1140, 1142, 1144, 1145, 1146, 1147, 1148, 1150, 1156, 1157, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1176, 1181, 1183, 1184, 1187, 1188, 1189, 1191, 1194, 1200, 1201, 1202, 1204, 1213, 1216, 1217, 1219], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron_glue_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 35, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 35, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 21, 22, 24, 25, 27, 29, 31, 33, 36, 39, 40, 42, 43, 47, 50, 51, 59, 65, 67, 68, 69, 71, 72, 74, 75, 77, 78, 80, 81, 82, 83, 84], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron_gpt_adapter_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 161, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 161, "excluded_lines": 0}, "missing_lines": [20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 58, 60, 71, 72, 82, 83, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 108, 110, 112, 117, 118, 119, 120, 129, 130, 131, 132, 133, 134, 136, 138, 139, 141, 143, 145, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 168, 169, 170, 171, 172, 173, 174, 175, 177, 187, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 212, 214, 216, 217, 218, 219, 224, 226, 227, 228, 229, 231, 232, 233, 234, 238, 241, 253, 254, 255, 256, 259, 264, 265, 266, 267, 271, 273, 274, 285, 292, 293, 294, 295, 296, 297, 301, 303, 304, 305, 308, 320, 321, 322, 323, 324, 325, 329, 331, 332, 333, 334, 335, 336, 340, 341, 346, 347, 348, 350, 352, 353, 354], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron_gpt_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 958, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 958, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 56, 57, 64, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 84, 86, 88, 89, 90, 91, 92, 93, 97, 98, 102, 103, 104, 105, 107, 109, 111, 113, 115, 116, 117, 119, 121, 122, 125, 126, 128, 129, 130, 131, 133, 134, 135, 138, 139, 140, 142, 143, 144, 151, 152, 153, 156, 163, 168, 169, 172, 177, 178, 179, 180, 181, 182, 183, 187, 189, 190, 191, 196, 197, 198, 199, 206, 209, 210, 211, 212, 219, 221, 222, 223, 225, 226, 227, 228, 232, 233, 234, 236, 237, 238, 244, 245, 246, 248, 249, 250, 252, 253, 254, 257, 262, 263, 264, 267, 268, 272, 273, 275, 279, 281, 283, 284, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 300, 302, 303, 306, 307, 309, 310, 311, 314, 315, 322, 323, 324, 325, 326, 334, 335, 337, 339, 341, 342, 343, 345, 347, 349, 354, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 384, 385, 387, 388, 390, 392, 393, 412, 413, 415, 421, 482, 483, 484, 486, 488, 489, 490, 492, 495, 497, 499, 502, 503, 504, 508, 511, 512, 515, 516, 519, 520, 521, 522, 524, 525, 526, 529, 532, 533, 536, 537, 538, 539, 543, 544, 545, 546, 553, 554, 557, 558, 559, 561, 562, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 585, 586, 587, 589, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 605, 606, 607, 608, 612, 615, 627, 628, 630, 631, 632, 635, 640, 645, 648, 649, 651, 653, 655, 656, 657, 658, 662, 669, 675, 677, 682, 683, 685, 692, 693, 695, 696, 697, 699, 700, 703, 705, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 727, 730, 731, 732, 734, 736, 737, 741, 743, 744, 747, 750, 753, 754, 755, 757, 759, 760, 761, 762, 764, 766, 771, 772, 773, 774, 776, 777, 779, 780, 784, 785, 787, 789, 793, 794, 796, 799, 801, 802, 804, 805, 806, 811, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 828, 829, 830, 834, 836, 840, 841, 842, 843, 846, 847, 848, 850, 852, 857, 859, 863, 865, 868, 869, 876, 877, 878, 880, 881, 883, 889, 890, 891, 892, 894, 895, 897, 898, 899, 900, 901, 903, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 925, 929, 930, 931, 932, 933, 934, 937, 938, 943, 944, 946, 948, 949, 951, 964, 965, 969, 972, 978, 979, 981, 982, 984, 985, 987, 988, 989, 991, 992, 993, 995, 996, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1012, 1016, 1018, 1019, 1020, 1022, 1025, 1026, 1028, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1056, 1059, 1060, 1061, 1063, 1065, 1067, 1068, 1071, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1092, 1095, 1103, 1104, 1105, 1106, 1109, 1111, 1113, 1115, 1116, 1118, 1120, 1121, 1122, 1123, 1124, 1128, 1130, 1138, 1140, 1142, 1143, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1170, 1171, 1173, 1180, 1183, 1185, 1186, 1188, 1190, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1219, 1222, 1224, 1225, 1228, 1233, 1234, 1237, 1239, 1240, 1242, 1244, 1245, 1247, 1249, 1251, 1258, 1260, 1261, 1263, 1264, 1265, 1267, 1269, 1270, 1271, 1273, 1275, 1276, 1278, 1279, 1280, 1282, 1284, 1286, 1287, 1289, 1291, 1292, 1294, 1296, 1298, 1299, 1301, 1302, 1305, 1306, 1307, 1309, 1313, 1314, 1315, 1316, 1320, 1321, 1323, 1325, 1326, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1337, 1338, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1352, 1363, 1364, 1367, 1368, 1369, 1370, 1372, 1373, 1387, 1389, 1390, 1403, 1404, 1405, 1407, 1408, 1410, 1411, 1412, 1414, 1415, 1417, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1431, 1436, 1438, 1439, 1440, 1451, 1452, 1461, 1463, 1465, 1473, 1480, 1482, 1489, 1490, 1491, 1493, 1494, 1495, 1497, 1498, 1499, 1500, 1502, 1503, 1507, 1508, 1509, 1510, 1512, 1514, 1516, 1517, 1519, 1520, 1521, 1523, 1524, 1525, 1526, 1529, 1531, 1532, 1533, 1534, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1547, 1551, 1552, 1553, 1554, 1555, 1558, 1560, 1562, 1572, 1574, 1575, 1577, 1578, 1579, 1581, 1582, 1583, 1587, 1588, 1592, 1593, 1595, 1597, 1601, 1602, 1603, 1604, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1619, 1620, 1622, 1623, 1625, 1631, 1633, 1637, 1638, 1642, 1643, 1649, 1650, 1657, 1659, 1666, 1667, 1671, 1672, 1673, 1674, 1675, 1677, 1684, 1685, 1686, 1687, 1688, 1690, 1692, 1696, 1700, 1704, 1705, 1706, 1707, 1708, 1710, 1715, 1716, 1718, 1726, 1727, 1728, 1729, 1730, 1732, 1733, 1734, 1736, 1737, 1740, 1741, 1744, 1745, 1746, 1747, 1749, 1750, 1752, 1754, 1755, 1756, 1758, 1760, 1761, 1762, 1764, 1765, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1778, 1779, 1780, 1782, 1788, 1789, 1790, 1791, 1794, 1795, 1796, 1797, 1800, 1801, 1802, 1803, 1804, 1806, 1807, 1808, 1809, 1811, 1817, 1818, 1819, 1820, 1823, 1824, 1825, 1826, 1827, 1829, 1832, 1833, 1836, 1840, 1846, 1849, 1850, 1851, 1854, 1855, 1856, 1857, 1859, 1865, 1866, 1867, 1870, 1871, 1872, 1873, 1875, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1892, 1897, 1899, 1900, 1901, 1902, 1903, 1904, 1906, 1909, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1935, 1937, 1938, 1941, 1942, 1943, 1945], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron_gpt_prompt_learning_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 342, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 342, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 31, 32, 33, 38, 43, 44, 45, 46, 48, 49, 51, 53, 54, 56, 57, 58, 59, 61, 63, 65, 67, 70, 73, 93, 94, 96, 101, 102, 103, 104, 105, 106, 107, 115, 118, 119, 120, 121, 122, 123, 124, 125, 128, 131, 133, 134, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 155, 159, 160, 165, 167, 170, 171, 173, 175, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 196, 197, 198, 199, 201, 203, 204, 207, 208, 209, 212, 213, 218, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 263, 264, 265, 266, 267, 268, 271, 274, 276, 277, 278, 279, 281, 284, 285, 294, 304, 306, 312, 313, 314, 316, 318, 329, 331, 332, 333, 336, 338, 340, 342, 343, 344, 345, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 363, 368, 370, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 390, 410, 412, 413, 414, 415, 416, 417, 421, 424, 430, 433, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 447, 448, 449, 451, 453, 455, 458, 460, 461, 463, 464, 466, 467, 469, 472, 479, 481, 483, 487, 488, 489, 490, 492, 493, 495, 497, 498, 499, 500, 502, 503, 505, 506, 507, 508, 510, 511, 513, 514, 516, 517, 518, 519, 520, 521, 537, 538, 539, 540, 541, 542, 558, 559, 560, 576, 594, 611, 612, 615, 616, 617, 621, 623, 624, 625, 629, 631, 633, 646, 648, 656, 658, 659, 660, 661, 662, 663, 665, 666, 668, 669, 670, 671, 673, 675, 677, 682, 683, 684, 685, 694, 695, 696, 697, 699, 701, 702, 705, 707, 708, 710, 713, 714, 716, 717, 719, 721, 723, 732, 734, 735, 737, 738, 739, 743, 744, 745, 747, 748, 750, 753, 754, 756, 758, 770, 771, 772, 775, 779, 780, 781, 782, 784, 789, 802, 803, 806, 810, 811, 812, 815, 829, 834], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron_gpt_sft_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 466, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 466, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 41, 42, 49, 50, 51, 53, 54, 55, 57, 59, 61, 64, 67, 72, 73, 74, 77, 78, 79, 80, 81, 83, 84, 86, 87, 88, 90, 91, 94, 95, 96, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 114, 115, 116, 119, 123, 124, 128, 131, 135, 136, 140, 141, 143, 144, 145, 150, 152, 153, 155, 157, 159, 160, 161, 163, 164, 165, 166, 168, 171, 172, 173, 174, 176, 177, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 193, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 208, 211, 214, 221, 222, 229, 230, 231, 232, 234, 235, 238, 239, 240, 242, 245, 249, 252, 256, 260, 261, 262, 263, 264, 265, 266, 267, 269, 272, 273, 275, 312, 313, 314, 315, 316, 319, 321, 323, 325, 327, 329, 330, 332, 333, 335, 337, 340, 341, 343, 345, 346, 347, 350, 351, 352, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 372, 374, 385, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 401, 406, 411, 414, 415, 417, 421, 422, 424, 426, 427, 429, 430, 432, 433, 434, 435, 437, 439, 440, 442, 445, 447, 448, 450, 451, 453, 454, 457, 459, 462, 463, 464, 465, 467, 468, 469, 470, 471, 476, 478, 480, 487, 489, 491, 492, 502, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 521, 524, 525, 526, 527, 528, 529, 530, 532, 534, 535, 537, 539, 540, 541, 542, 543, 544, 546, 547, 549, 550, 553, 554, 559, 560, 563, 564, 568, 570, 573, 574, 576, 577, 579, 580, 582, 585, 586, 588, 589, 592, 593, 594, 596, 599, 601, 604, 605, 606, 607, 609, 610, 613, 614, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 633, 634, 635, 636, 645, 646, 654, 656, 657, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 678, 679, 681, 682, 690, 692, 693, 694, 695, 698, 699, 700, 701, 702, 703, 705, 707, 708, 709, 710, 711, 714, 716, 717, 718, 719, 721, 722, 723, 724, 726, 727, 730, 732, 733, 734, 735, 737, 738, 739, 740, 742, 743, 746, 748, 749, 751, 752, 753, 754, 755, 756, 758, 760, 763, 764, 766, 771, 775, 776, 785, 786, 794, 795, 796, 798, 799, 800, 802, 803, 804, 806, 807, 809, 810, 812, 813, 814, 815, 816, 818, 821, 822, 823, 825, 827, 837, 846, 847, 848, 849, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 870, 872, 873, 874, 875, 882, 884, 885, 887, 888, 892, 893, 897, 899, 900], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron_lm_encoder_decoder_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 624, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 624, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 27, 31, 32, 33, 34, 37, 42, 46, 47, 49, 50, 56, 58, 60, 62, 63, 64, 65, 67, 69, 71, 73, 76, 81, 82, 83, 84, 85, 88, 89, 92, 97, 101, 102, 103, 110, 119, 121, 123, 125, 128, 132, 136, 138, 140, 142, 144, 149, 150, 153, 156, 157, 164, 165, 166, 170, 175, 176, 180, 181, 182, 188, 189, 190, 193, 194, 195, 197, 199, 201, 203, 204, 206, 208, 209, 210, 212, 217, 218, 220, 221, 222, 224, 225, 226, 228, 229, 231, 232, 237, 241, 242, 243, 247, 249, 250, 252, 253, 255, 257, 258, 260, 262, 284, 286, 299, 312, 314, 318, 320, 322, 334, 335, 336, 338, 342, 343, 345, 347, 353, 355, 362, 372, 374, 376, 380, 381, 383, 385, 389, 391, 393, 398, 399, 400, 401, 403, 404, 405, 406, 408, 409, 410, 414, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 434, 439, 441, 445, 447, 452, 454, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 479, 482, 483, 485, 487, 488, 490, 495, 502, 503, 504, 505, 507, 508, 511, 517, 522, 523, 524, 526, 527, 532, 536, 537, 538, 540, 541, 546, 547, 550, 551, 553, 554, 558, 561, 563, 573, 574, 576, 577, 578, 580, 582, 583, 584, 594, 604, 605, 607, 608, 610, 611, 612, 614, 616, 621, 623, 624, 626, 628, 630, 632, 633, 641, 642, 643, 645, 647, 656, 657, 658, 659, 662, 665, 666, 667, 668, 669, 671, 676, 677, 678, 680, 682, 690, 692, 693, 695, 696, 699, 700, 702, 703, 705, 707, 709, 711, 713, 718, 720, 722, 726, 727, 728, 730, 732, 733, 734, 735, 737, 739, 744, 745, 746, 749, 750, 753, 756, 757, 758, 759, 761, 764, 766, 768, 770, 771, 773, 774, 776, 780, 781, 783, 784, 786, 789, 792, 793, 794, 795, 797, 798, 800, 802, 806, 807, 808, 809, 810, 811, 812, 817, 818, 820, 821, 823, 824, 827, 830, 831, 834, 837, 840, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 858, 867, 868, 870, 873, 874, 876, 878, 879, 880, 889, 890, 900, 902, 905, 913, 920, 924, 930, 932, 933, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 949, 950, 953, 956, 957, 961, 964, 965, 966, 967, 968, 971, 973, 974, 975, 976, 980, 981, 982, 983, 987, 988, 989, 990, 992, 993, 994, 995, 996, 998, 1009, 1011, 1012, 1014, 1015, 1016, 1019, 1020, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1040, 1041, 1048, 1051, 1052, 1053, 1055, 1056, 1058, 1059, 1061, 1062, 1063, 1065, 1069, 1075, 1086, 1087, 1089, 1091, 1093, 1100, 1101, 1110, 1112, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1167, 1169, 1170, 1172, 1173, 1174, 1177, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1197, 1201, 1209, 1211, 1212, 1214, 1216, 1217, 1220, 1223, 1226, 1227, 1229, 1231, 1232, 1233, 1235, 1236, 1238, 1239, 1241, 1252, 1253, 1254, 1256, 1258, 1259, 1263, 1265, 1267, 1269, 1271, 1272, 1274, 1275, 1276, 1280, 1281, 1283, 1284, 1287, 1288, 1289, 1298, 1301, 1308, 1312, 1317, 1318, 1321, 1322, 1323, 1324, 1327, 1328, 1329, 1330, 1331, 1332, 1335, 1336, 1337, 1338, 1343, 1346, 1347, 1350, 1353, 1358, 1362, 1366, 1368, 1373, 1380, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1400, 1404, 1405, 1406, 1408, 1409, 1410, 1412, 1414, 1430, 1433, 1440, 1442, 1443, 1447, 1448, 1449, 1450, 1452, 1453, 1455, 1458, 1459, 1460, 1461, 1462, 1464, 1465, 1466, 1467, 1469, 1470, 1474, 1475, 1476, 1477, 1478, 1480, 1486, 1488, 1492, 1493, 1497, 1498, 1500, 1504, 1505, 1507, 1508, 1509, 1512], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron_retrieval_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 258, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 258, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 22, 26, 30, 31, 32, 33, 34, 37, 42, 43, 50, 51, 57, 58, 60, 61, 62, 64, 66, 68, 71, 74, 79, 80, 83, 85, 87, 89, 91, 94, 99, 101, 105, 106, 109, 110, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 129, 130, 131, 137, 138, 142, 143, 147, 148, 159, 160, 161, 162, 164, 167, 216, 218, 229, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 260, 261, 262, 263, 265, 266, 267, 268, 270, 272, 273, 277, 278, 280, 282, 287, 289, 291, 292, 293, 294, 295, 296, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 322, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 335, 338, 339, 340, 342, 343, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 361, 366, 367, 375, 389, 390, 391, 392, 393, 394, 395, 396, 398, 401, 402, 404, 406, 407, 408, 415, 416, 424, 426, 429, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 455, 456, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 476, 485, 487, 488, 490, 491, 492, 496, 497, 501, 502, 504, 506, 511, 512, 513, 514, 525, 526, 527, 529, 530, 532, 533, 534, 535, 537, 539, 540, 542, 544, 546, 547, 548, 549, 551, 552, 553, 554, 556, 557, 558, 559, 561, 562, 563, 570, 572, 574, 576, 577], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron_retro_fine_tune_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 53, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 53, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 29, 30, 33, 34, 35, 36, 37, 39, 40, 42, 44, 46, 49, 52, 59, 71, 83, 96, 99, 102, 103, 104, 106, 107, 108, 110, 116, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 145], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron_retro_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 310, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 310, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 37, 38, 39, 40, 41, 42, 49, 50, 57, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 95, 97, 99, 101, 103, 104, 105, 107, 109, 110, 113, 118, 119, 122, 123, 126, 129, 132, 133, 134, 135, 136, 138, 139, 142, 143, 144, 145, 146, 147, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 168, 170, 172, 175, 177, 179, 181, 182, 183, 199, 201, 203, 206, 215, 217, 220, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 249, 251, 252, 253, 255, 257, 268, 270, 271, 274, 277, 278, 279, 281, 282, 283, 286, 287, 288, 289, 290, 293, 294, 295, 296, 297, 298, 301, 304, 315, 316, 317, 318, 321, 322, 324, 326, 327, 328, 329, 330, 331, 333, 335, 342, 345, 347, 348, 350, 352, 354, 355, 356, 357, 358, 359, 360, 361, 363, 374, 375, 376, 377, 378, 379, 381, 384, 385, 386, 397, 399, 400, 402, 404, 405, 407, 409, 411, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 451, 453, 456, 457, 458, 459, 465, 471, 472, 476, 484, 485, 486, 487, 488, 489, 490, 492, 494, 499, 501, 502, 503, 514, 515, 524, 526, 528, 536, 539, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 555, 558, 569, 570, 572, 573, 574, 577, 582, 587, 590, 591, 593, 595, 597, 604, 606, 607, 609, 610, 611, 613, 615, 616, 617, 619, 621, 622, 624, 625, 626, 628, 630, 632, 633, 635, 637, 638, 640, 642], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron_t0_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 119, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 119, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 18, 21, 22, 25, 26, 27, 29, 30, 32, 34, 36, 39, 40, 42, 44, 46, 48, 51, 54, 55, 57, 60, 61, 62, 64, 65, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 85, 89, 91, 92, 96, 99, 101, 102, 103, 105, 107, 110, 114, 115, 119, 120, 121, 122, 124, 125, 128, 129, 130, 132, 134, 135, 146, 148, 149, 152, 154, 156, 157, 160, 161, 163, 164, 165, 172, 174, 175, 176, 178, 181, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 196, 200, 201, 202, 204, 206, 215, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 238, 239, 241, 242, 244, 245], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron_t5_adapter_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 356, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 356, "excluded_lines": 0}, "missing_lines": [20, 21, 23, 24, 25, 26, 28, 29, 30, 33, 34, 35, 44, 45, 46, 48, 49, 51, 53, 54, 57, 58, 59, 60, 62, 66, 67, 78, 79, 90, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 105, 107, 109, 110, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 135, 136, 137, 139, 140, 141, 143, 149, 150, 151, 153, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 169, 171, 172, 173, 174, 182, 183, 185, 186, 188, 190, 196, 206, 207, 208, 209, 210, 211, 212, 214, 215, 217, 222, 223, 224, 225, 234, 235, 236, 237, 238, 239, 241, 243, 244, 246, 248, 250, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 285, 287, 290, 292, 293, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 310, 317, 319, 321, 322, 323, 324, 326, 327, 329, 331, 333, 335, 336, 337, 338, 341, 346, 347, 348, 349, 352, 357, 358, 361, 362, 363, 367, 368, 369, 370, 372, 373, 374, 375, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 402, 403, 404, 415, 421, 423, 424, 425, 428, 433, 434, 440, 441, 448, 450, 453, 454, 455, 459, 460, 461, 462, 464, 465, 466, 467, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 497, 500, 502, 503, 505, 506, 518, 519, 531, 532, 545, 547, 549, 550, 551, 554, 566, 567, 568, 571, 572, 573, 577, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 607, 608, 610, 611, 612, 615, 616, 617, 623, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 646, 647, 648, 649, 650, 651, 652, 653, 655, 661, 662, 663, 664, 665, 669, 671, 676, 677, 678, 679, 680, 681, 683, 684, 685], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron_t5_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 114, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 114, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 21, 22, 25, 27, 30, 31, 32, 35, 40, 41, 44, 46, 47, 49, 51, 54, 55, 56, 60, 61, 62, 66, 67, 68, 71, 75, 79, 80, 82, 84, 85, 86, 95, 97, 98, 100, 101, 102, 103, 104, 106, 108, 109, 112, 113, 114, 115, 116, 117, 120, 122, 123, 124, 126, 128, 129, 131, 133, 135, 136, 137, 139, 141, 143, 144, 145, 147, 149, 151, 152, 161, 162, 167, 168, 169, 170, 171, 172, 174, 177, 178, 179, 182, 184, 185, 186, 190, 191, 192, 193, 197, 199, 200, 201, 202, 203, 204, 205, 206, 212, 213, 217, 242, 243, 244, 245, 248, 250, 252, 253], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron_t5_prompt_learning_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 236, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 236, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 22, 24, 25, 28, 29, 30, 34, 35, 36, 38, 39, 45, 47, 49, 51, 52, 53, 54, 56, 58, 60, 63, 66, 86, 87, 88, 90, 91, 92, 93, 95, 102, 104, 106, 108, 109, 112, 114, 116, 120, 123, 124, 135, 136, 147, 149, 150, 154, 155, 156, 157, 158, 159, 161, 162, 164, 165, 166, 168, 175, 181, 182, 183, 184, 186, 188, 200, 202, 203, 204, 207, 209, 211, 213, 214, 215, 216, 218, 221, 223, 224, 225, 226, 228, 230, 232, 237, 239, 243, 245, 252, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 275, 277, 278, 279, 280, 282, 283, 284, 285, 286, 288, 289, 299, 300, 301, 302, 308, 309, 310, 312, 313, 314, 315, 316, 318, 320, 322, 323, 326, 328, 330, 332, 333, 334, 336, 338, 339, 340, 341, 343, 344, 345, 347, 348, 350, 352, 355, 357, 358, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 383, 385, 387, 391, 392, 393, 394, 396, 397, 399, 401, 402, 403, 405, 407, 408, 410, 411, 413, 416, 434, 435, 436, 440, 452, 453, 455, 457, 459, 460, 461, 464, 465, 468, 470, 473, 475, 485, 486, 488, 489, 491, 493, 499, 501, 502, 505, 506, 507, 509, 510, 513, 520, 521, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/megatron_t5_sft_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 370, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 370, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 42, 43, 44, 46, 47, 48, 50, 52, 54, 56, 59, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 82, 83, 85, 86, 87, 88, 89, 90, 93, 94, 95, 98, 102, 103, 107, 110, 114, 115, 118, 119, 122, 123, 128, 132, 137, 141, 142, 143, 144, 146, 148, 150, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 186, 188, 189, 190, 197, 199, 203, 205, 206, 207, 260, 261, 263, 268, 272, 273, 282, 283, 291, 297, 298, 299, 300, 302, 305, 306, 308, 309, 311, 318, 321, 322, 323, 325, 329, 331, 339, 340, 341, 343, 344, 346, 348, 349, 350, 351, 353, 360, 361, 363, 365, 372, 373, 375, 376, 377, 378, 380, 382, 383, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 401, 402, 405, 406, 407, 408, 410, 412, 414, 416, 418, 419, 421, 422, 424, 426, 428, 429, 431, 432, 433, 435, 438, 440, 441, 442, 443, 445, 447, 450, 451, 452, 453, 456, 457, 459, 460, 461, 464, 465, 466, 468, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 489, 492, 493, 498, 499, 514, 517, 518, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 540, 541, 544, 545, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 574, 575, 583, 585, 586, 587, 588, 589, 591, 592, 594, 595, 599, 600, 602, 603, 607, 612, 613, 615, 616, 617, 620, 621, 623, 625, 635, 636, 637, 641, 650, 651, 652, 653, 663, 664, 666, 667, 669, 670, 672, 674, 678, 681, 682, 684, 685, 687, 688, 689, 690, 691, 693, 694, 696, 697, 708, 709, 710, 711, 725, 727, 729, 730, 738, 740, 742, 744, 745, 748, 749, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 768, 769, 771, 772, 783, 784, 785, 786, 798, 800, 801, 803, 804, 805, 806, 808, 809, 810, 812, 813, 814, 815], "excluded_lines": []}, "nemo/collections/nlp/models/language_modeling/transformer_lm_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 141, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 141, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 40, 45, 48, 49, 50, 52, 53, 57, 68, 71, 74, 75, 76, 77, 78, 79, 90, 100, 102, 105, 106, 108, 110, 111, 112, 113, 115, 116, 122, 123, 125, 127, 133, 134, 137, 138, 139, 140, 141, 143, 145, 149, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 172, 177, 179, 180, 181, 182, 183, 184, 185, 187, 192, 193, 194, 195, 197, 198, 199, 201, 205, 206, 207, 209, 218, 219, 224, 228, 229, 232, 233, 238, 239, 244, 248, 249, 252, 253, 258, 259, 261, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 277, 278, 279, 282, 291, 299, 308, 309, 311, 312, 321, 322, 323], "excluded_lines": []}, "nemo/collections/nlp/models/machine_translation/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 2, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [15, 16], "excluded_lines": []}, "nemo/collections/nlp/models/machine_translation/megatron_nmt_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 420, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 420, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 28, 32, 35, 36, 39, 43, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 62, 64, 66, 68, 69, 70, 72, 74, 76, 79, 82, 83, 84, 85, 88, 93, 95, 96, 97, 98, 99, 101, 102, 104, 105, 107, 108, 109, 111, 112, 113, 115, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 134, 135, 136, 137, 140, 141, 142, 143, 145, 146, 147, 148, 150, 152, 155, 156, 157, 159, 160, 162, 163, 166, 167, 168, 169, 170, 171, 172, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 197, 199, 203, 206, 210, 230, 231, 232, 234, 239, 245, 246, 247, 250, 251, 254, 257, 263, 264, 276, 279, 282, 284, 290, 296, 297, 298, 299, 301, 304, 305, 307, 308, 310, 317, 319, 320, 321, 324, 325, 333, 335, 337, 345, 346, 347, 349, 350, 353, 356, 359, 363, 368, 369, 371, 373, 374, 376, 378, 380, 382, 385, 386, 387, 388, 389, 392, 393, 395, 396, 398, 399, 401, 403, 408, 410, 411, 412, 413, 414, 415, 418, 431, 433, 434, 436, 437, 439, 440, 441, 443, 444, 446, 447, 448, 449, 451, 453, 456, 459, 460, 461, 462, 463, 466, 468, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 494, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 514, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 530, 531, 532, 534, 535, 536, 538, 539, 540, 548, 553, 554, 556, 558, 559, 561, 562, 563, 567, 568, 569, 571, 572, 573, 574, 578, 579, 580, 581, 583, 585, 594, 603, 606, 607, 617, 619, 621, 624, 625, 635, 636, 637, 644, 646, 648, 650, 651, 653, 654, 655, 657, 660, 661, 662, 673, 675, 676, 677, 692, 693, 694, 705, 706, 707, 708, 724, 726, 728, 729, 731, 732, 733, 736, 737, 741, 742, 743, 745, 748, 751, 752, 757, 758, 759, 760, 762, 763, 764, 766, 769, 770, 773, 775, 778, 791, 792, 796, 804, 806, 807, 809, 810, 811, 819, 820, 842, 843, 847, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 861, 863, 867, 868, 869, 870, 880, 881, 888, 891, 893, 895, 896, 897, 898, 908, 910, 911, 913, 915, 917, 943, 944, 945, 948, 949, 950, 952, 953, 955, 956, 957, 964, 965, 966, 973, 974, 975, 977, 978, 979, 981, 982], "excluded_lines": []}, "nemo/collections/nlp/models/machine_translation/mt_enc_dec_bottleneck_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 204, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 204, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 21, 22, 23, 24, 25, 27, 30, 35, 36, 38, 40, 43, 59, 60, 62, 63, 64, 65, 66, 67, 70, 73, 74, 76, 78, 79, 81, 82, 85, 87, 89, 93, 95, 97, 102, 104, 106, 109, 110, 112, 114, 115, 116, 117, 118, 120, 121, 122, 124, 126, 127, 134, 136, 138, 145, 147, 149, 150, 155, 157, 159, 160, 162, 164, 173, 175, 177, 178, 180, 181, 184, 186, 191, 193, 194, 196, 198, 201, 202, 204, 206, 208, 210, 213, 215, 217, 219, 221, 223, 225, 228, 229, 231, 233, 235, 236, 237, 239, 242, 244, 245, 246, 247, 249, 250, 252, 253, 255, 257, 258, 263, 265, 266, 268, 269, 270, 273, 274, 276, 277, 279, 280, 283, 285, 290, 292, 293, 295, 297, 298, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 331, 332, 334, 336, 341, 342, 344, 345, 346, 347, 351, 354, 359, 360, 361, 363, 365, 371, 372, 375, 376, 377, 378, 390, 394, 396, 398, 399, 400, 402, 404, 405, 408, 410, 411, 412, 414, 415, 416, 429, 431, 433, 434, 435, 439, 442, 443, 444, 445, 448, 450, 451, 452, 454], "excluded_lines": []}, "nemo/collections/nlp/models/machine_translation/mt_enc_dec_config.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 63, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 63, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 20, 21, 22, 23, 24, 28, 32, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 74, 75, 77, 80, 91, 102, 113, 116, 117, 120, 121, 123, 138, 154, 155, 156, 157, 158, 159, 160, 161, 163, 182], "excluded_lines": []}, "nemo/collections/nlp/models/machine_translation/mt_enc_dec_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 638, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 638, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 57, 62, 63, 67, 68, 69, 71, 73, 74, 76, 77, 78, 80, 81, 83, 84, 85, 86, 89, 90, 91, 92, 93, 95, 98, 104, 105, 106, 110, 111, 115, 116, 120, 140, 142, 143, 155, 158, 161, 164, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 190, 191, 192, 193, 194, 195, 197, 199, 200, 211, 213, 222, 236, 237, 238, 241, 245, 251, 254, 257, 260, 261, 263, 264, 266, 268, 271, 273, 274, 283, 286, 287, 288, 289, 290, 291, 292, 294, 299, 300, 301, 302, 303, 304, 306, 307, 309, 310, 311, 312, 314, 316, 317, 318, 319, 322, 323, 325, 327, 333, 334, 338, 339, 340, 341, 343, 344, 346, 347, 349, 351, 352, 354, 355, 357, 359, 360, 361, 363, 364, 366, 367, 370, 371, 373, 379, 380, 383, 384, 385, 386, 387, 392, 394, 395, 396, 399, 401, 402, 403, 405, 406, 407, 409, 410, 411, 413, 416, 417, 418, 419, 420, 427, 428, 429, 430, 432, 434, 435, 436, 437, 438, 439, 445, 450, 451, 452, 454, 456, 458, 460, 461, 463, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 478, 480, 483, 484, 485, 486, 487, 488, 490, 491, 493, 494, 495, 496, 497, 499, 502, 504, 505, 508, 511, 514, 517, 518, 519, 520, 521, 522, 524, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 538, 539, 540, 542, 547, 549, 550, 552, 553, 571, 572, 576, 578, 590, 603, 607, 608, 609, 610, 611, 612, 613, 614, 620, 622, 623, 624, 626, 628, 630, 631, 632, 634, 636, 638, 639, 640, 642, 644, 646, 648, 649, 658, 663, 667, 668, 671, 672, 677, 678, 680, 681, 683, 684, 691, 698, 702, 703, 706, 707, 713, 714, 715, 716, 720, 726, 727, 734, 736, 737, 738, 739, 743, 749, 750, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 785, 786, 788, 789, 790, 791, 795, 797, 799, 800, 802, 803, 804, 808, 820, 822, 823, 832, 834, 835, 836, 837, 838, 839, 841, 842, 844, 845, 846, 861, 862, 864, 865, 875, 877, 879, 880, 881, 882, 884, 886, 901, 902, 913, 914, 923, 924, 926, 927, 932, 933, 934, 935, 937, 938, 939, 940, 941, 943, 944, 945, 947, 948, 949, 950, 951, 952, 968, 969, 971, 973, 974, 975, 976, 977, 978, 980, 982, 995, 997, 998, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1074, 1075, 1076, 1077, 1078, 1082, 1085, 1090, 1091, 1092, 1094, 1096, 1097, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1124, 1125, 1127, 1129, 1130, 1151, 1152, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1169, 1171, 1173, 1177, 1178, 1179, 1189, 1190, 1193, 1195, 1196, 1198, 1200, 1201, 1202, 1203, 1213, 1215, 1216, 1218, 1220, 1222, 1247, 1248, 1249, 1250, 1251, 1252, 1255, 1256, 1258, 1259, 1266, 1267, 1272, 1274, 1279, 1281, 1286, 1288, 1293, 1295, 1300, 1302, 1307, 1309, 1314, 1316, 1321, 1323, 1328, 1330, 1335, 1339, 1344, 1346, 1351, 1355, 1360, 1362, 1367, 1369, 1374, 1378, 1383, 1385, 1390, 1392, 1397, 1399, 1404, 1407, 1412, 1414, 1419, 1421, 1426, 1428, 1433, 1435, 1440, 1442, 1447, 1449, 1454, 1456, 1461, 1463, 1468, 1470, 1475, 1477], "excluded_lines": []}, "nemo/collections/nlp/models/nlp_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 241, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 241, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 46, 47, 49, 51, 53, 55, 57, 59, 62, 66, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 82, 84, 89, 90, 91, 92, 100, 103, 104, 109, 110, 113, 115, 116, 117, 118, 119, 120, 121, 122, 126, 129, 132, 134, 139, 141, 143, 144, 146, 148, 153, 155, 156, 160, 162, 164, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 185, 190, 194, 208, 209, 210, 212, 213, 222, 224, 226, 227, 240, 241, 243, 245, 248, 251, 252, 253, 255, 257, 258, 259, 261, 262, 264, 266, 267, 268, 270, 273, 276, 277, 278, 280, 284, 285, 286, 288, 289, 290, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 306, 308, 309, 321, 322, 323, 326, 327, 329, 332, 336, 339, 340, 341, 343, 345, 346, 347, 348, 349, 350, 352, 354, 357, 360, 361, 363, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 380, 384, 385, 386, 388, 390, 391, 393, 394, 395, 397, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 428, 431, 432, 434, 436, 441, 444, 445, 446, 447, 448, 450, 451, 461, 462, 463, 464, 465], "excluded_lines": []}, "nemo/collections/nlp/models/question_answering/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 5, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 5, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19], "excluded_lines": []}, "nemo/collections/nlp/models/question_answering/qa_base_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 44, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 44, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 21, 26, 27, 30, 31, 32, 33, 35, 36, 37, 40, 41, 43, 45, 46, 47, 50, 51, 53, 55, 56, 57, 60, 61, 63, 65, 66, 75, 76, 78, 80, 81, 83, 84, 87, 88, 89, 90, 91, 93], "excluded_lines": []}, "nemo/collections/nlp/models/question_answering/qa_bert_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 315, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 315, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 39, 41, 42, 52, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 68, 69, 70, 74, 79, 80, 81, 83, 85, 87, 88, 90, 91, 93, 94, 96, 97, 98, 99, 101, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 168, 169, 171, 173, 175, 176, 199, 200, 201, 202, 204, 206, 207, 208, 209, 211, 215, 216, 217, 218, 219, 224, 225, 226, 227, 228, 229, 230, 231, 245, 246, 250, 251, 260, 261, 263, 265, 279, 293, 295, 297, 311, 313, 314, 315, 317, 318, 320, 324, 325, 326, 327, 330, 331, 333, 335, 342, 345, 347, 349, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 365, 366, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 395, 396, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 427, 428, 429, 431, 432, 433, 435, 437, 438, 440, 443, 444, 445, 450, 451, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 481, 486, 488, 489, 490, 494, 495, 496, 497, 499, 500, 502, 504, 505, 507, 521, 531, 533, 536, 538, 540, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 585, 587, 589, 590, 591, 592, 593, 594, 596, 597, 599, 600, 601, 604, 608, 609, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 623, 624, 625, 626, 627, 629, 630, 631, 632, 634, 636, 638, 639, 647, 649, 657, 665, 673, 681, 689, 697, 705, 713], "excluded_lines": []}, "nemo/collections/nlp/models/question_answering/qa_gpt_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 187, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 187, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 54, 55, 57, 59, 60, 62, 63, 64, 65, 67, 75, 76, 78, 80, 82, 83, 85, 86, 88, 89, 90, 93, 95, 96, 99, 101, 103, 104, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 129, 131, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 156, 164, 165, 169, 170, 179, 180, 182, 183, 185, 187, 190, 194, 196, 198, 199, 201, 216, 226, 228, 231, 232, 233, 235, 236, 237, 239, 243, 244, 245, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 266, 267, 268, 269, 270, 273, 277, 278, 280, 288, 290, 293, 294, 295, 301, 308, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 329, 330, 333, 340, 341, 345, 346, 348, 350, 351, 352, 353, 354, 356, 357, 358, 359, 361, 364, 366, 368, 369, 376, 377], "excluded_lines": []}, "nemo/collections/nlp/models/question_answering/qa_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 174, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 174, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 23, 24, 25, 30, 31, 32, 33, 34, 36, 39, 44, 45, 46, 56, 58, 59, 60, 61, 65, 66, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 86, 87, 88, 92, 97, 98, 99, 101, 102, 104, 105, 106, 107, 109, 110, 112, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 160, 161, 163, 164, 165, 166, 168, 169, 171, 172, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 213, 214, 216, 217, 218, 219, 220, 225, 226, 227, 228, 229, 230, 231, 232, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 258, 259, 263, 264, 266, 268, 269, 270, 273, 274, 275, 277, 278, 279, 282, 283, 284, 286, 287, 288, 291, 292, 293, 295, 296, 309, 318, 320, 321, 328, 330, 338, 346, 354, 362, 370, 378, 386, 393], "excluded_lines": []}, "nemo/collections/nlp/models/question_answering/qa_s2s_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 181, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 181, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 36, 38, 39, 40, 42, 46, 47, 48, 49, 51, 54, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 74, 76, 77, 79, 80, 81, 83, 85, 93, 94, 96, 98, 100, 101, 103, 104, 106, 107, 108, 111, 113, 114, 117, 119, 121, 122, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 150, 151, 153, 155, 156, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 177, 178, 181, 189, 190, 194, 195, 204, 205, 207, 208, 210, 212, 215, 219, 221, 223, 224, 226, 241, 251, 253, 257, 258, 259, 261, 262, 263, 265, 269, 270, 271, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 290, 292, 293, 294, 297, 298, 299, 301, 302, 303, 305, 313, 315, 316, 323, 324, 325, 326, 327, 328, 330, 332, 333, 335, 336, 341, 342, 343, 345, 346, 348, 350, 351, 358, 359], "excluded_lines": []}, "nemo/collections/nlp/models/spellchecking_asr_customization/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [16], "excluded_lines": []}, "nemo/collections/nlp/models/spellchecking_asr_customization/spellchecking_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 203, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 203, "excluded_lines": 0}, "missing_lines": [16, 17, 19, 20, 21, 23, 24, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 43, 44, 55, 56, 57, 61, 62, 63, 65, 66, 67, 69, 70, 73, 77, 80, 81, 83, 84, 85, 86, 87, 93, 94, 95, 99, 102, 106, 108, 112, 113, 139, 141, 149, 151, 153, 156, 157, 160, 166, 178, 187, 188, 189, 190, 191, 194, 199, 211, 220, 223, 232, 233, 234, 235, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 254, 255, 256, 257, 258, 259, 261, 263, 264, 270, 274, 276, 277, 278, 279, 281, 283, 288, 289, 290, 292, 296, 298, 299, 301, 302, 304, 306, 311, 313, 318, 322, 323, 339, 340, 342, 344, 345, 346, 347, 348, 350, 353, 356, 357, 369, 385, 387, 388, 394, 396, 397, 402, 403, 404, 405, 407, 409, 411, 413, 414, 415, 416, 417, 422, 423, 424, 425, 426, 428, 431, 435, 436, 438, 441, 450, 451, 452, 453, 454, 455, 456, 458, 459, 463, 464, 467, 468, 469, 472, 473, 474, 476, 477, 478, 481, 482, 483, 485, 486, 487, 490, 491, 492, 494, 495, 496, 497, 498, 506, 507, 508, 511, 512, 513, 515, 524, 525, 535, 536, 537], "excluded_lines": []}, "nemo/collections/nlp/models/text2sparql/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [15], "excluded_lines": []}, "nemo/collections/nlp/models/text2sparql/text2sparql_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 96, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 96, "excluded_lines": 0}, "missing_lines": [19, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 37, 38, 39, 40, 47, 50, 51, 52, 57, 58, 61, 62, 64, 67, 70, 71, 73, 74, 76, 77, 78, 79, 82, 85, 87, 88, 90, 92, 95, 98, 103, 105, 107, 108, 119, 126, 128, 129, 131, 139, 141, 146, 147, 151, 153, 155, 160, 161, 165, 167, 169, 171, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 188, 190, 191, 193, 194, 195, 197, 198, 204, 206, 207, 209, 210, 212, 213, 215, 216, 227, 237, 238, 239], "excluded_lines": []}, "nemo/collections/nlp/models/text_classification/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [15], "excluded_lines": []}, "nemo/collections/nlp/models/text_classification/text_classification_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 129, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 129, "excluded_lines": 0}, "missing_lines": [16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 36, 37, 40, 41, 43, 45, 56, 59, 64, 65, 67, 69, 70, 72, 74, 76, 77, 82, 85, 86, 87, 88, 90, 96, 97, 99, 101, 103, 104, 106, 111, 116, 117, 119, 121, 123, 125, 126, 127, 128, 129, 130, 132, 137, 138, 139, 140, 141, 142, 143, 146, 148, 150, 151, 152, 153, 155, 157, 162, 164, 169, 171, 172, 173, 176, 177, 178, 181, 182, 184, 186, 188, 189, 190, 193, 194, 195, 197, 198, 199, 202, 203, 204, 206, 207, 208, 209, 218, 227, 237, 238, 249, 250, 251, 252, 254, 255, 256, 257, 258, 260, 261, 263, 269, 270, 273, 274, 275, 277, 290, 291, 301, 302, 303], "excluded_lines": []}, "nemo/collections/nlp/models/text_normalization_as_tagging/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [16], "excluded_lines": []}, "nemo/collections/nlp/models/text_normalization_as_tagging/thutmose_tagger.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 194, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 194, "excluded_lines": 0}, "missing_lines": [16, 17, 19, 20, 21, 23, 24, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 43, 44, 52, 53, 54, 59, 60, 61, 63, 64, 65, 67, 68, 70, 71, 74, 75, 77, 78, 79, 80, 81, 87, 88, 89, 92, 95, 99, 101, 104, 108, 110, 114, 115, 117, 118, 119, 120, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 145, 146, 147, 148, 151, 152, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 175, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 194, 195, 196, 203, 209, 210, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 232, 236, 237, 238, 239, 240, 242, 247, 251, 252, 254, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 269, 270, 271, 273, 275, 280, 282, 287, 290, 291, 307, 308, 310, 311, 313, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 334, 337, 349, 352, 353, 354, 357, 358, 359, 361, 362, 363, 366, 367, 368, 370, 371, 372, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 391, 400, 401, 411, 412, 413, 427], "excluded_lines": []}, "nemo/collections/nlp/models/token_classification/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 4, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 4, "excluded_lines": 0}, "missing_lines": [14, 17, 20, 23], "excluded_lines": []}, "nemo/collections/nlp/models/token_classification/punctuation_capitalization_config.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 161, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 161, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 20, 21, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 70, 71, 74, 75, 77, 78, 83, 84, 87, 88, 91, 92, 103, 104, 106, 107, 109, 110, 112, 113, 116, 117, 126, 127, 129, 130, 132, 133, 135, 136, 140, 141, 153, 154, 156, 157, 160, 161, 173, 174, 180, 181, 184, 185, 187, 188, 192, 193, 197, 198, 204, 205, 218, 219, 224, 227, 229, 230, 232, 233, 235, 236, 238, 239, 241, 242, 244, 245, 247, 248, 250, 251, 257, 258, 273, 274, 276, 277, 279, 280, 282, 284, 285, 287, 288, 291, 292, 301, 302, 307, 308, 310, 311, 313, 314, 316, 317, 321, 322, 324, 327, 330, 331, 332, 335, 336, 337, 342, 355, 358, 373, 374, 375, 376, 377, 378, 379, 415, 416, 417, 418, 419], "excluded_lines": []}, "nemo/collections/nlp/models/token_classification/punctuation_capitalization_lexical_audio_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 156, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 156, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 45, 46, 47, 48, 49, 51, 54, 78, 79, 80, 81, 84, 85, 87, 91, 92, 93, 95, 96, 100, 104, 105, 106, 107, 108, 109, 110, 112, 119, 120, 125, 130, 131, 132, 133, 134, 141, 142, 143, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 164, 166, 169, 171, 172, 174, 175, 177, 179, 180, 188, 189, 190, 191, 193, 227, 228, 231, 232, 234, 238, 239, 243, 246, 247, 249, 256, 257, 259, 261, 263, 264, 266, 267, 268, 271, 273, 275, 276, 278, 283, 284, 285, 286, 287, 289, 291, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 371, 372, 373, 374, 377, 389, 396, 399, 400, 403, 407, 408, 410, 413, 414, 415, 416, 417, 418, 419, 426, 427, 429, 430, 431], "excluded_lines": []}, "nemo/collections/nlp/models/token_classification/punctuation_capitalization_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 415, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 415, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 36, 39, 42, 43, 44, 48, 49, 50, 51, 52, 54, 57, 83, 84, 86, 91, 93, 94, 97, 98, 99, 100, 101, 102, 103, 105, 115, 125, 126, 128, 129, 153, 156, 157, 159, 160, 161, 163, 164, 168, 169, 170, 171, 173, 206, 207, 208, 209, 210, 212, 243, 244, 245, 246, 247, 248, 249, 252, 253, 255, 257, 274, 275, 276, 278, 279, 281, 296, 297, 298, 300, 301, 303, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 342, 343, 344, 346, 350, 352, 356, 358, 405, 406, 407, 408, 411, 412, 413, 417, 418, 419, 420, 424, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 441, 442, 444, 445, 446, 447, 448, 450, 451, 453, 454, 455, 456, 458, 471, 472, 473, 476, 477, 479, 484, 488, 489, 492, 493, 498, 499, 500, 501, 502, 503, 504, 508, 509, 510, 511, 513, 520, 521, 527, 533, 535, 536, 543, 545, 559, 560, 561, 564, 565, 566, 567, 569, 574, 578, 579, 582, 583, 588, 589, 590, 591, 593, 607, 608, 609, 612, 613, 614, 615, 616, 618, 619, 620, 622, 623, 624, 625, 627, 637, 638, 639, 640, 641, 645, 646, 647, 648, 649, 657, 658, 659, 660, 661, 665, 669, 670, 677, 678, 679, 680, 681, 685, 686, 691, 692, 693, 694, 696, 697, 699, 700, 701, 702, 704, 715, 716, 717, 718, 719, 723, 725, 728, 729, 731, 738, 739, 740, 741, 745, 747, 750, 751, 753, 760, 762, 775, 776, 777, 778, 779, 780, 784, 785, 798, 805, 806, 811, 812, 815, 816, 817, 818, 819, 821, 822, 828, 829, 830, 831, 841, 843, 845, 846, 847, 858, 860, 861, 862, 867, 868, 893, 894, 895, 897, 898, 909, 938, 939, 940, 949, 958, 959, 960, 961, 962, 963, 964, 965, 967, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1019, 1034, 1035, 1039, 1040, 1041, 1042, 1044, 1045, 1053, 1054, 1056, 1066, 1067, 1070, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1099, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1111, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1176, 1177, 1186, 1187, 1188, 1189, 1192, 1193, 1196, 1199, 1200, 1203, 1207, 1208, 1210, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1226, 1227, 1229, 1230, 1237, 1254, 1256, 1257, 1258], "excluded_lines": []}, "nemo/collections/nlp/models/token_classification/token_classification_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 228, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 228, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 37, 40, 43, 46, 47, 48, 49, 51, 53, 55, 56, 58, 68, 71, 75, 83, 84, 86, 93, 94, 95, 97, 98, 100, 101, 102, 104, 105, 106, 109, 110, 111, 112, 114, 119, 120, 121, 122, 124, 125, 127, 132, 137, 138, 139, 141, 143, 144, 145, 147, 148, 149, 151, 156, 159, 161, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 176, 178, 179, 180, 182, 183, 184, 186, 187, 189, 190, 192, 193, 194, 195, 196, 198, 199, 200, 202, 205, 206, 207, 208, 209, 211, 220, 222, 223, 225, 226, 227, 229, 230, 238, 240, 241, 242, 244, 245, 253, 255, 263, 264, 266, 267, 269, 270, 272, 273, 281, 293, 303, 315, 317, 327, 328, 338, 339, 340, 341, 343, 344, 345, 347, 348, 350, 356, 357, 358, 361, 362, 364, 376, 377, 379, 380, 381, 382, 384, 385, 387, 388, 389, 390, 392, 393, 394, 395, 396, 399, 400, 402, 403, 406, 407, 409, 410, 412, 413, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 427, 451, 453, 454, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 478, 479, 481, 482, 484, 487, 488, 489, 493, 495, 496, 503, 504, 509, 510], "excluded_lines": []}, "nemo/collections/nlp/models/zero_shot_intent_recognition/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [15], "excluded_lines": []}, "nemo/collections/nlp/models/zero_shot_intent_recognition/zero_shot_intent_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 87, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 87, "excluded_lines": 0}, "missing_lines": [16, 17, 19, 20, 21, 22, 24, 29, 30, 31, 33, 36, 39, 40, 42, 43, 44, 45, 46, 47, 51, 62, 72, 73, 74, 77, 78, 79, 82, 83, 87, 89, 91, 92, 93, 96, 97, 98, 100, 101, 102, 105, 106, 107, 109, 130, 138, 148, 197, 198, 199, 200, 202, 203, 205, 206, 208, 209, 210, 213, 214, 216, 224, 225, 226, 228, 233, 235, 236, 238, 240, 241, 244, 245, 246, 248, 249, 250, 251, 261, 262, 264, 265, 272, 273, 280, 287], "excluded_lines": []}, "nemo/collections/nlp/modules/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 3, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 3, "excluded_lines": 0}, "missing_lines": [16, 32, 33], "excluded_lines": []}, "nemo/collections/nlp/modules/common/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 10, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 10, "excluded_lines": 0}, "missing_lines": [17, 18, 25, 26, 27, 32, 33, 34, 35, 36], "excluded_lines": []}, "nemo/collections/nlp/modules/common/bert_module.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 44, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 44, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 21, 22, 23, 24, 26, 29, 30, 31, 32, 38, 39, 40, 42, 44, 46, 47, 48, 50, 53, 54, 57, 58, 59, 60, 61, 62, 66, 67, 69, 70, 71, 72, 74, 80, 81, 82, 83, 84, 85, 90], "excluded_lines": []}, "nemo/collections/nlp/modules/common/chat_css.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [15], "excluded_lines": []}, "nemo/collections/nlp/modules/common/chatbot_component.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 55, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 55, "excluded_lines": 0}, "missing_lines": [15, 20, 22, 24, 26, 27, 29, 41, 42, 43, 46, 47, 48, 53, 54, 63, 86, 87, 89, 90, 91, 97, 109, 110, 116, 117, 123, 130, 132, 133, 134, 135, 136, 137, 144, 145, 146, 148, 150, 152, 161, 162, 163, 164, 165, 168, 171, 179, 181, 185, 186, 187, 188, 190, 193], "excluded_lines": []}, "nemo/collections/nlp/modules/common/classifier.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 27, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 27, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 21, 22, 24, 27, 32, 33, 38, 40, 47, 48, 49, 51, 57, 58, 60, 66, 67, 68, 70, 76, 78, 79, 85], "excluded_lines": []}, "nemo/collections/nlp/modules/common/decoder_module.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 27, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 27, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 21, 24, 27, 28, 29, 37, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 53, 54, 55, 57, 58, 59], "excluded_lines": []}, "nemo/collections/nlp/modules/common/encoder_module.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 15, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 15, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 21, 24, 27, 28, 29, 34, 35, 36, 38, 39, 40], "excluded_lines": []}, "nemo/collections/nlp/modules/common/gpt_module.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 41, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 41, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 21, 22, 23, 24, 26, 29, 30, 31, 32, 46, 47, 48, 53, 55, 57, 58, 59, 61, 64, 65, 68, 69, 70, 71, 72, 73, 77, 78, 80, 81, 82, 84, 90, 91, 92, 93, 94], "excluded_lines": []}, "nemo/collections/nlp/modules/common/huggingface/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 6, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 6, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 23], "excluded_lines": []}, "nemo/collections/nlp/modules/common/huggingface/albert.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 9, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 9, "excluded_lines": 0}, "missing_lines": [17, 19, 20, 22, 25, 30, 31, 32, 33], "excluded_lines": []}, "nemo/collections/nlp/modules/common/huggingface/bert.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 9, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 9, "excluded_lines": 0}, "missing_lines": [17, 19, 20, 22, 25, 30, 31, 32, 33], "excluded_lines": []}, "nemo/collections/nlp/modules/common/huggingface/camembert.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 9, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 9, "excluded_lines": 0}, "missing_lines": [17, 19, 20, 22, 25, 30, 31, 32, 33], "excluded_lines": []}, "nemo/collections/nlp/modules/common/huggingface/distilbert.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 9, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 9, "excluded_lines": 0}, "missing_lines": [17, 19, 20, 22, 25, 30, 31, 33, 34], "excluded_lines": []}, "nemo/collections/nlp/modules/common/huggingface/gpt2.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 9, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 9, "excluded_lines": 0}, "missing_lines": [17, 19, 20, 22, 25, 30, 31, 45, 58], "excluded_lines": []}, "nemo/collections/nlp/modules/common/huggingface/huggingface_decoder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 27, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 27, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 21, 22, 25, 49, 56, 57, 58, 59, 60, 61, 63, 64, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79], "excluded_lines": []}, "nemo/collections/nlp/modules/common/huggingface/huggingface_encoder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 40, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 40, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 21, 22, 23, 26, 29, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 72, 74, 75, 77, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99], "excluded_lines": []}, "nemo/collections/nlp/modules/common/huggingface/huggingface_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 37, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 37, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 34, 35, 36, 37, 38, 39, 40, 42, 45, 84, 96, 112, 113, 114, 115, 117, 119, 120, 121, 122, 123, 127, 128, 129, 130, 131, 133, 135, 138, 148, 149, 150, 151, 152], "excluded_lines": []}, "nemo/collections/nlp/modules/common/huggingface/roberta.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 9, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 9, "excluded_lines": 0}, "missing_lines": [18, 20, 21, 23, 26, 31, 32, 33, 34], "excluded_lines": []}, "nemo/collections/nlp/modules/common/lm_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 71, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 71, "excluded_lines": 0}, "missing_lines": [16, 17, 19, 20, 21, 23, 24, 25, 26, 30, 31, 32, 36, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 60, 63, 86, 87, 91, 97, 98, 102, 103, 104, 105, 106, 111, 113, 115, 116, 117, 119, 120, 122, 123, 125, 127, 128, 129, 132, 138, 139, 140, 141, 142, 144, 157, 195, 197, 198, 199, 200, 209, 210, 211, 213, 214, 218, 219, 232, 234], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [15], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/adapters/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/adapters/mcore_mixins.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 181, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 181, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 33, 44, 47, 51, 52, 55, 56, 61, 64, 65, 69, 72, 73, 81, 83, 88, 89, 95, 96, 97, 99, 101, 104, 105, 106, 107, 108, 110, 112, 115, 122, 125, 135, 138, 142, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 173, 174, 181, 186, 190, 191, 192, 193, 198, 199, 201, 202, 203, 205, 206, 207, 217, 218, 222, 226, 231, 237, 239, 240, 241, 242, 243, 245, 248, 249, 253, 256, 257, 265, 267, 269, 270, 273, 276, 277, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 290, 295, 297, 298, 299, 301, 302, 303, 305, 307, 309, 310, 311, 314, 317, 318, 319, 320, 321, 323, 326, 327, 331, 333, 334, 336, 337, 338, 339, 340, 343, 344, 347, 348, 351, 352, 356, 358, 371, 374, 377, 386, 387, 388, 389, 390, 393, 397, 398, 403, 406, 409, 416, 417, 421, 422, 427, 430, 433, 436, 437, 438, 439, 440, 441, 445, 446, 456, 458], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/adapters/parallel_adapters.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 401, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 401, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 30, 36, 37, 39, 40, 42, 44, 46, 48, 49, 50, 51, 52, 57, 59, 61, 63, 66, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 92, 94, 95, 97, 100, 101, 102, 103, 106, 108, 109, 110, 113, 119, 122, 123, 124, 125, 128, 129, 130, 133, 134, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 177, 178, 188, 197, 198, 210, 211, 212, 213, 214, 215, 224, 225, 226, 227, 228, 229, 231, 233, 235, 236, 238, 241, 242, 243, 244, 247, 250, 251, 252, 254, 256, 257, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 280, 282, 283, 284, 286, 287, 288, 293, 295, 296, 297, 299, 304, 306, 308, 310, 311, 314, 315, 317, 319, 322, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 380, 383, 389, 392, 398, 401, 407, 410, 416, 419, 425, 428, 429, 430, 433, 434, 435, 438, 439, 440, 443, 444, 445, 446, 449, 450, 451, 454, 455, 456, 457, 460, 467, 485, 486, 487, 488, 489, 490, 492, 493, 495, 496, 498, 499, 500, 501, 502, 511, 522, 523, 524, 525, 528, 530, 534, 535, 536, 537, 539, 540, 541, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 555, 559, 560, 562, 563, 564, 565, 567, 568, 569, 570, 571, 573, 574, 577, 578, 579, 580, 581, 582, 583, 584, 587, 592, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 623, 626, 640, 641, 642, 643, 644, 649, 651, 652, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 697, 698, 699, 702, 703, 705, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 728, 733, 736, 737, 738, 741, 742, 743, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 759, 761, 762, 765, 766, 767, 768, 769, 770, 771], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/attention.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 413, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 413, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 21, 30, 31, 32, 33, 36, 41, 43, 44, 45, 47, 49, 51, 54, 57, 58, 60, 62, 64, 66, 68, 70, 71, 73, 75, 78, 80, 81, 83, 84, 86, 87, 89, 90, 92, 94, 96, 97, 98, 100, 102, 104, 106, 108, 124, 131, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 177, 178, 181, 182, 185, 186, 187, 188, 193, 194, 203, 204, 208, 217, 236, 246, 247, 248, 253, 254, 255, 258, 260, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 302, 304, 305, 307, 309, 321, 323, 324, 333, 334, 335, 341, 347, 348, 355, 361, 362, 363, 365, 367, 385, 386, 387, 390, 393, 396, 397, 398, 402, 403, 404, 410, 412, 413, 414, 415, 416, 417, 420, 424, 425, 426, 429, 434, 435, 436, 437, 438, 439, 442, 446, 447, 448, 451, 456, 457, 458, 459, 460, 461, 463, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 486, 487, 489, 491, 492, 493, 495, 496, 497, 498, 500, 501, 503, 504, 505, 508, 510, 511, 512, 514, 515, 516, 517, 519, 520, 522, 530, 533, 536, 537, 540, 542, 543, 554, 571, 572, 573, 574, 575, 576, 578, 579, 581, 584, 591, 610, 611, 630, 632, 642, 643, 650, 652, 653, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 670, 672, 674, 675, 677, 678, 681, 684, 685, 687, 693, 695, 700, 702, 707, 708, 712, 713, 714, 718, 720, 721, 724, 727, 728, 730, 734, 738, 739, 740, 741, 744, 751, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 792, 794, 795, 798, 800, 803, 804, 805, 806, 807, 811, 812, 813, 814, 815, 817, 830, 831, 833, 834, 836, 838, 839, 841, 854, 865, 866, 867, 868, 870, 875, 876, 889, 890, 891, 892, 898, 899, 900, 910, 914, 915, 918, 921, 922, 924, 926, 927, 928, 930, 931, 932, 933, 935, 936, 937, 939, 947, 956, 958, 959, 961, 965, 966, 967, 969, 972, 975, 978, 980, 982, 983, 984, 985, 988, 989, 990, 991, 993, 995, 996, 1000, 1002, 1003, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1021, 1023, 1031, 1032, 1033, 1035, 1048, 1051, 1052, 1054, 1055, 1056, 1058, 1059, 1061, 1062, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1074, 1077, 1079, 1080, 1082], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/build_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 63, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 63, "excluded_lines": 0}, "missing_lines": [16, 18, 20, 21, 23, 24, 25, 27, 29, 31, 33, 35, 36, 38, 40, 42, 45, 69, 70, 72, 76, 77, 78, 79, 80, 89, 90, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 120, 122, 123, 125, 126, 132, 133, 134, 137, 138, 143, 146, 147, 148, 150, 151, 152, 161, 164, 165, 166], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/clip_grads.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 115, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 115, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 21, 22, 24, 25, 26, 28, 30, 32, 34, 36, 37, 38, 40, 42, 43, 45, 46, 47, 49, 51, 53, 56, 57, 74, 75, 81, 82, 83, 84, 86, 87, 90, 91, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 111, 112, 115, 116, 117, 119, 121, 125, 126, 127, 129, 132, 133, 137, 138, 142, 145, 146, 147, 148, 152, 153, 155, 156, 157, 158, 159, 160, 161, 163, 165, 168, 171, 174, 177, 178, 179, 180, 181, 183, 186, 188, 189, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 209, 211, 214, 230, 235, 236, 237, 238, 239, 240, 245, 247], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/fused_bias_dropout_add.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 31, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 31, "excluded_lines": 0}, "missing_lines": [17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 36, 38, 39, 40, 43, 44, 48, 51, 53, 54, 55, 56, 59, 60, 64, 67, 68, 69, 70], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/fused_bias_geglu.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 29, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 29, "excluded_lines": 0}, "missing_lines": [16, 18, 20, 21, 23, 24, 25, 28, 29, 30, 31, 34, 35, 36, 37, 40, 41, 43, 44, 45, 47, 48, 49, 50, 51, 54, 55, 56, 57], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/fused_bias_gelu.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 40, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 40, "excluded_lines": 0}, "missing_lines": [16, 18, 19, 21, 22, 23, 34, 35, 36, 37, 43, 44, 45, 46, 48, 49, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 72, 75, 78, 81, 84, 85, 86, 87], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/fused_layer_norm.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 12, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 12, "excluded_lines": 0}, "missing_lines": [17, 18, 20, 21, 22, 25, 29, 55, 56, 58, 59, 61], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/fused_softmax.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 30, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 30, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 21, 23, 25, 26, 28, 30, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63, 64, 69, 70, 71, 72], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/hiddens/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 3, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 3, "excluded_lines": 0}, "missing_lines": [15, 16, 17], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/hiddens/megatron_hidden_loss.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 62, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 62, "excluded_lines": 0}, "missing_lines": [16, 17, 19, 22, 28, 29, 30, 31, 33, 34, 36, 39, 40, 42, 43, 46, 48, 50, 52, 65, 67, 69, 71, 72, 73, 76, 78, 79, 81, 84, 87, 88, 89, 91, 94, 101, 102, 107, 109, 111, 113, 122, 124, 126, 128, 132, 135, 142, 148, 149, 154, 155, 157, 159, 161, 163, 172, 174, 176, 179, 181, 184], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/hiddens/megatron_hidden_transform.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 66, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 66, "excluded_lines": 0}, "missing_lines": [16, 18, 20, 22, 23, 25, 27, 29, 30, 32, 34, 37, 40, 41, 43, 44, 46, 47, 49, 50, 54, 56, 57, 61, 63, 66, 67, 69, 75, 77, 79, 82, 84, 86, 89, 94, 103, 105, 106, 107, 108, 109, 112, 122, 123, 127, 129, 130, 134, 136, 149, 151, 152, 153, 156, 158, 160, 161, 162, 164, 165, 166, 168, 170, 172, 174], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/hiddens/megatron_hiddens.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 145, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 145, "excluded_lines": 0}, "missing_lines": [14, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 39, 41, 43, 45, 47, 56, 62, 67, 78, 84, 93, 94, 95, 96, 99, 107, 108, 109, 110, 113, 116, 117, 119, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 184, 190, 198, 199, 200, 201, 202, 203, 206, 207, 210, 211, 212, 215, 218, 220, 221, 223, 224, 225, 230, 231, 232, 234, 237, 238, 243, 244, 245, 246, 250, 251, 253, 254, 256, 258, 259, 261, 262, 264, 274, 275, 277, 280, 282, 284, 298, 299, 300, 301, 302, 303, 305, 306, 309, 310, 311, 315, 318, 321, 322, 325, 327], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/kerple_relative_position_embedding.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 29, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 29, "excluded_lines": 0}, "missing_lines": [16, 18, 20, 25, 28, 35, 46, 48, 49, 51, 52, 56, 57, 59, 62, 64, 67, 68, 69, 72, 74, 76, 77, 78, 80, 82, 84, 85, 88], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/language_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 307, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 307, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 20, 24, 25, 26, 32, 33, 39, 40, 42, 43, 45, 47, 49, 52, 53, 55, 56, 58, 60, 62, 64, 67, 132, 133, 136, 138, 139, 141, 142, 145, 207, 209, 212, 224, 225, 226, 227, 229, 235, 236, 238, 239, 240, 241, 244, 259, 272, 274, 275, 276, 277, 278, 280, 283, 285, 287, 290, 292, 294, 296, 297, 299, 305, 306, 307, 311, 313, 315, 316, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 337, 338, 339, 340, 341, 342, 344, 346, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 361, 364, 365, 368, 369, 372, 373, 374, 375, 377, 379, 381, 384, 385, 386, 387, 390, 391, 395, 397, 401, 402, 405, 406, 407, 408, 409, 411, 413, 414, 417, 418, 419, 420, 421, 424, 425, 426, 427, 430, 431, 432, 433, 434, 436, 442, 455, 517, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 544, 547, 548, 559, 561, 562, 563, 564, 565, 566, 573, 577, 585, 589, 596, 598, 599, 608, 659, 662, 663, 698, 700, 702, 703, 704, 706, 707, 714, 715, 717, 721, 722, 724, 726, 727, 728, 729, 732, 735, 736, 739, 741, 762, 764, 765, 766, 767, 768, 769, 772, 773, 776, 778, 781, 782, 783, 784, 785, 789, 791, 792, 794, 796, 797, 799, 800, 801, 802, 804, 805, 806, 811, 817, 818, 823, 824, 838, 840, 841, 842, 847, 848, 849, 851, 854, 856, 868, 869, 871, 873, 876, 877, 878, 882, 883, 884, 885, 888, 889, 893, 895, 899, 900, 901, 904, 905, 906, 907, 908, 911, 912, 915, 916, 919, 920, 921, 922, 923, 924, 927, 928, 929, 930, 932, 933, 935, 937, 939, 940, 941, 942, 944, 947, 950, 951, 952], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/layer_norm_1p.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 32, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 32, "excluded_lines": 0}, "missing_lines": [16, 17, 19, 20, 21, 22, 24, 25, 26, 29, 31, 32, 33, 34, 38, 39, 40, 42, 43, 48, 49, 50, 53, 54, 55, 63, 64, 65, 66, 67, 68, 69], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/layer_type.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 9, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 9, "excluded_lines": 0}, "missing_lines": [15, 16, 19, 20, 21, 22, 25, 28, 29], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/megatron_decoder_module.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 18, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 18, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 21, 24, 27, 28, 29, 36, 37, 38, 40, 41, 42, 44, 45, 46], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/megatron_decoders.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 34, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 34, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 21, 27, 28, 30, 31, 32, 34, 35, 37, 38, 40, 42, 44, 46, 48, 50, 53, 106, 107, 110, 112, 113, 115, 116, 118, 120, 162, 163, 203, 205], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/megatron_encoder_decoder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 91, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 91, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 20, 21, 22, 23, 25, 26, 28, 29, 30, 32, 34, 35, 37, 39, 41, 43, 45, 48, 52, 63, 65, 66, 67, 68, 69, 73, 74, 75, 80, 81, 82, 84, 85, 86, 87, 89, 92, 93, 94, 95, 96, 98, 102, 103, 105, 106, 107, 109, 114, 116, 118, 120, 122, 132, 133, 134, 143, 144, 148, 150, 161, 162, 163, 164, 175, 177, 196, 197, 198, 207, 208, 210, 212, 213, 216, 231, 233, 236, 238, 239, 241, 242, 244, 246, 249, 250, 251, 252], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/megatron_encoder_module.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 19, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 19, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 20, 21, 23, 26, 29, 30, 31, 36, 37, 38, 40, 41, 42, 44, 45, 46], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/megatron_encoders.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 41, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 41, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 21, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 41, 42, 44, 45, 47, 49, 51, 53, 55, 57, 60, 114, 115, 118, 120, 121, 123, 124, 126, 128, 170, 171, 210, 211, 251, 253], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/megatron_export.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 126, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 126, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 20, 21, 22, 24, 27, 32, 33, 35, 36, 37, 40, 42, 43, 45, 46, 48, 49, 50, 52, 53, 54, 56, 57, 61, 62, 63, 65, 66, 67, 71, 72, 73, 75, 76, 77, 79, 80, 81, 84, 89, 90, 92, 93, 94, 95, 98, 100, 101, 103, 104, 106, 107, 108, 110, 111, 112, 114, 126, 130, 132, 133, 134, 136, 137, 140, 142, 143, 144, 147, 153, 155, 156, 157, 165, 166, 167, 171, 172, 173, 175, 176, 177, 180, 185, 186, 188, 189, 190, 191, 194, 196, 197, 199, 200, 202, 203, 204, 206, 208, 211, 213, 214, 215, 217, 225, 226, 227, 232, 233, 234, 236, 237, 238, 243, 244, 245, 247, 248, 249, 251, 252, 253], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/megatron_init.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 160, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 160, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 22, 23, 24, 25, 27, 28, 30, 32, 33, 34, 47, 49, 51, 52, 54, 56, 58, 61, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 131, 133, 135, 137, 139, 140, 148, 149, 150, 151, 155, 157, 159, 162, 164, 166, 167, 168, 169, 170, 171, 173, 176, 179, 181, 182, 183, 184, 185, 186, 187, 190, 230, 231, 232, 233, 235, 238, 242, 243, 245, 246, 247, 249, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 273, 274, 277, 280, 281, 282, 283, 284, 285, 287, 288, 289, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 308, 310, 311, 314, 315, 316, 317, 318, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 335, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 349, 350, 351, 352, 354], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/megatron_perceiver_encoders.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 94, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 94, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 22, 28, 29, 30, 32, 33, 34, 36, 37, 39, 40, 42, 44, 46, 48, 51, 54, 58, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 154, 155, 157, 159, 160, 199, 200, 239, 242, 244, 252, 253, 258, 262, 269, 277, 278, 279, 280, 286, 287, 291, 293], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/megatron_tokens_head_module.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 18, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 18, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 21, 24, 27, 28, 29, 34, 35, 36, 38, 39, 40, 42, 43, 44], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/megatron_transformer_decoder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 67, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 67, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 21, 26, 28, 29, 31, 32, 33, 35, 36, 37, 39, 40, 42, 44, 46, 48, 51, 54, 58, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 119, 122, 165, 167, 169, 171, 183, 186, 191, 202, 204, 207, 209, 211, 213, 217, 218, 220, 221, 224, 225, 226, 227, 230, 231, 232, 233, 235, 236, 238], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/megatron_transformer_encoder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 69, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 69, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 25, 27, 28, 30, 31, 32, 34, 35, 37, 38, 40, 42, 44, 46, 48, 51, 54, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 117, 120, 163, 165, 167, 169, 178, 179, 181, 188, 197, 199, 202, 204, 206, 208, 212, 213, 215, 216, 219, 220, 221, 222, 225, 226, 227, 228, 230, 231, 233], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/megatron_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 66, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 66, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 20, 21, 22, 24, 26, 36, 38, 39, 40, 42, 45, 47, 101, 102, 105, 106, 108, 111, 114, 118, 121, 131, 132, 135, 136, 137, 138, 141, 151, 152, 154, 155, 156, 159, 169, 170, 171, 172, 174, 175, 176, 179, 187, 188, 189, 190, 193, 203, 204, 206, 207, 208, 209, 210, 212, 213, 215, 218, 227, 228, 231, 241, 242], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/mlp.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 173, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 173, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 40, 42, 45, 48, 49, 50, 52, 54, 56, 58, 61, 69, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 114, 115, 119, 122, 134, 137, 147, 155, 157, 158, 162, 163, 167, 168, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 192, 203, 204, 205, 208, 209, 215, 219, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 244, 245, 246, 250, 253, 254, 256, 258, 259, 261, 262, 263, 266, 267, 270, 271, 272, 273, 274, 275, 276, 279, 284, 304, 306, 307, 308, 318, 335, 337, 338, 339, 340, 341, 342, 343, 346, 347, 348, 350, 351, 352, 354, 356, 357, 358, 359, 361, 362, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 382, 384, 385, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/module.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 183, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 183, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 22, 24, 25, 27, 29, 31, 33, 36, 37, 38, 41, 45, 46, 47, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 68, 69, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 88, 90, 91, 92, 94, 98, 99, 100, 102, 106, 107, 108, 110, 114, 115, 116, 121, 122, 136, 138, 139, 142, 145, 146, 151, 152, 154, 157, 158, 160, 162, 163, 164, 168, 176, 180, 186, 187, 189, 192, 194, 196, 197, 198, 202, 203, 204, 205, 209, 210, 211, 212, 217, 220, 221, 222, 223, 224, 225, 228, 231, 232, 233, 234, 235, 236, 237, 239, 242, 245, 246, 247, 248, 249, 250, 251, 253, 256, 257, 258, 259, 262, 263, 265, 266, 268, 269, 271, 272, 274, 275, 278, 283, 285, 286, 288, 290, 291, 292, 293, 294, 295, 297, 298, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 312, 317, 318, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 337, 339, 340, 341, 343, 347, 348, 349, 351, 355, 356, 357, 359], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/mup/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/mup/infshape.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 90, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 90, "excluded_lines": 0}, "missing_lines": [38, 41, 50, 51, 52, 54, 55, 57, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 81, 87, 88, 89, 90, 91, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 111, 112, 114, 115, 116, 117, 119, 120, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 150, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 171, 172, 173, 174, 175, 177], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/mup/init.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 103, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 103, "excluded_lines": 0}, "missing_lines": [41, 52, 53, 55, 56, 66, 67, 68, 69, 70, 71, 73, 74, 77, 84, 85, 86, 88, 89, 91, 94, 102, 103, 105, 106, 108, 111, 116, 118, 119, 121, 124, 129, 130, 133, 134, 136, 137, 138, 139, 141, 142, 144, 145, 147, 148, 151, 158, 159, 160, 161, 162, 165, 172, 173, 174, 175, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 198, 205, 206, 207, 208, 209, 210, 211, 212, 215, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 236, 245, 246, 248, 249, 251, 254, 255, 260, 261], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/mup/layer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 36, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 36, "excluded_lines": 0}, "missing_lines": [40, 42, 43, 44, 46, 47, 49, 51, 53, 56, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 94, 97, 103, 104, 109, 110, 111, 112, 113], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/mup/optim.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 66, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 66, "excluded_lines": 0}, "missing_lines": [41, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 94, 95, 97, 98, 99, 100, 104, 105, 106, 107, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 126, 132, 135, 151, 152, 154, 155, 156, 157, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/mup/shape.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 95, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 95, "excluded_lines": 0}, "missing_lines": [41, 43, 44, 45, 46, 48, 49, 51, 58, 59, 62, 63, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 80, 82, 83, 84, 87, 95, 96, 97, 98, 99, 102, 115, 116, 117, 118, 119, 121, 123, 124, 127, 135, 136, 137, 138, 141, 142, 143, 144, 147, 155, 156, 157, 160, 168, 169, 170, 171, 172, 175, 191, 192, 193, 194, 197, 198, 199, 202, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 247, 248, 249, 250], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/position_embedding/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 6, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 6, "excluded_lines": 0}, "missing_lines": [16, 19, 22, 23, 26, 29], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/position_embedding/alibi_relative_position_embedding.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 47, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 47, "excluded_lines": 0}, "missing_lines": [16, 18, 20, 23, 24, 25, 26, 27, 29, 30, 32, 33, 38, 41, 45, 51, 52, 54, 57, 62, 64, 65, 66, 68, 69, 71, 74, 81, 92, 94, 95, 97, 98, 102, 103, 105, 108, 110, 113, 116, 120, 122, 123, 124, 130, 132, 136], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/position_embedding/kerple_relative_position_embedding.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 29, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 29, "excluded_lines": 0}, "missing_lines": [16, 18, 20, 25, 28, 35, 46, 48, 49, 51, 52, 56, 57, 59, 62, 64, 67, 68, 69, 73, 77, 79, 80, 81, 85, 87, 89, 90, 93], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/position_embedding/rotary_position_embedding.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 31, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 31, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 20, 23, 28, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 58, 61, 63, 66, 68, 71, 76, 77, 78, 81, 87, 89, 92, 93], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/position_embedding/sandwich_relative_position_embedding.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 29, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 29, "excluded_lines": 0}, "missing_lines": [15, 17, 20, 22, 25, 26, 32, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 54, 57, 59, 60, 62, 67, 68, 70, 71, 73, 75], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/position_embedding/t5_relative_position_embedding.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 44, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 44, "excluded_lines": 0}, "missing_lines": [15, 17, 20, 23, 32, 33, 34, 35, 36, 37, 38, 39, 42, 46, 47, 48, 50, 71, 72, 73, 74, 75, 77, 81, 82, 85, 90, 94, 95, 97, 104, 105, 106, 107, 109, 110, 117, 119, 121, 123, 125, 127, 128, 131], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/position_embedding/xpos_position_embedding.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 46, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 46, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 39, 40, 41, 42, 43, 46, 47, 49, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 76, 77, 78], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/retrieval_services/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/retrieval_services/bert_service.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 58, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 58, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 28, 31, 37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 71, 76, 84, 86, 87, 89, 91, 92, 93, 94, 95, 96, 97, 103, 104, 105, 106, 109, 123, 124, 126], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/retrieval_services/combo_retrieval_server.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 114, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 114, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 30, 32, 35, 41, 42, 43, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 126, 127, 128, 129, 130, 131, 132, 133, 135, 141, 142, 143, 144, 145, 146, 147, 148, 151, 156, 159, 160, 161, 162, 163, 164, 165, 168, 169, 173, 174, 175, 176, 178, 179, 183, 184], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/retrieval_services/dynamic_retrieval_server.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 123, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 123, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 33, 36, 39, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 60, 61, 62, 63, 66, 72, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 118, 119, 121, 122, 123, 125, 126, 127, 129, 136, 137, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 163, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 192, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 229, 230], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/retrieval_services/retrieval_service.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 62, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 62, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 23, 24, 26, 27, 29, 31, 32, 35, 40, 41, 48, 50, 51, 58, 61, 67, 70, 71, 72, 73, 75, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 103, 106, 108, 115, 116, 117, 118, 119, 120, 121, 122, 124, 130, 131, 133, 139, 140, 143, 149, 152, 154, 159, 160], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/retrieval_services/static_retrieval_server.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 85, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 85, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 33, 39, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 97, 102, 112, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 141, 142], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/retrieval_services/util.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 22, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 22, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 20, 22, 24, 27, 28, 29, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/retrieval_token_level_encoder_decoder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 140, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 140, "excluded_lines": 0}, "missing_lines": [16, 18, 19, 20, 21, 22, 23, 24, 30, 31, 33, 34, 35, 37, 38, 40, 41, 43, 45, 47, 49, 52, 55, 58, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 132, 134, 135, 146, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 163, 207, 209, 210, 211, 212, 213, 214, 216, 217, 219, 220, 221, 222, 223, 224, 226, 229, 273, 315, 316, 318, 322, 323, 324, 326, 334, 336, 353, 354, 355, 357, 359, 360, 362, 363, 365, 366, 368, 370, 371, 372, 373, 374, 376, 377, 379, 380, 388, 389, 391, 392, 393, 394, 404, 405, 415, 417, 419, 422, 423, 424, 426, 428, 429, 432, 433, 435, 439, 441, 444, 445, 448, 451, 454, 456, 459, 460, 461, 462, 463], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/retrieval_transformer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 209, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 209, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 21, 22, 23, 24, 26, 27, 29, 30, 32, 33, 34, 36, 37, 39, 41, 43, 45, 47, 50, 54, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 113, 116, 154, 157, 158, 159, 160, 162, 164, 166, 167, 169, 186, 188, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 204, 207, 210, 213, 214, 215, 217, 221, 222, 223, 226, 227, 228, 229, 232, 233, 234, 235, 237, 238, 240, 241, 243, 245, 246, 247, 248, 250, 252, 254, 255, 259, 260, 261, 263, 266, 270, 271, 272, 274, 275, 276, 278, 281, 284, 286, 289, 292, 302, 304, 306, 308, 309, 311, 314, 316, 318, 320, 324, 325, 326, 329, 333, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 388, 391, 394, 432, 435, 436, 437, 438, 440, 442, 444, 448, 452, 463, 464, 465, 466, 467, 469, 487, 488, 490, 492, 494, 495, 496, 498, 499, 500, 503, 505, 506, 507, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 523, 526, 528, 529, 531, 533, 535, 537, 540, 541, 542, 544, 545, 547, 550, 552, 555, 556, 557, 570, 572, 575, 577, 579, 581, 585, 586, 587], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/token_level_encoder_decoder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 254, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 254, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 22, 23, 24, 25, 26, 29, 30, 31, 36, 43, 44, 46, 47, 49, 51, 54, 55, 57, 59, 60, 62, 64, 66, 68, 70, 73, 81, 82, 84, 85, 86, 87, 88, 90, 91, 93, 95, 96, 103, 109, 112, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 157, 167, 168, 169, 177, 179, 180, 181, 182, 183, 190, 191, 192, 199, 201, 203, 206, 208, 257, 259, 261, 262, 265, 277, 278, 280, 282, 283, 291, 293, 297, 298, 300, 301, 309, 312, 316, 317, 319, 320, 327, 328, 329, 336, 338, 340, 343, 345, 393, 394, 401, 403, 405, 411, 412, 413, 417, 426, 427, 429, 430, 431, 432, 435, 437, 439, 440, 441, 445, 446, 450, 452, 453, 454, 455, 456, 457, 458, 459, 462, 465, 469, 471, 476, 477, 479, 480, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 497, 499, 516, 522, 523, 531, 533, 534, 535, 537, 538, 540, 541, 542, 544, 545, 547, 548, 549, 550, 551, 552, 553, 556, 557, 560, 562, 565, 567, 568, 572, 574, 575, 584, 586, 588, 589, 591, 593, 594, 596, 597, 600, 602, 603, 606, 607, 611, 613, 630, 631, 633, 634, 636, 638, 641, 644, 647, 648, 649, 651, 654, 657, 658, 661, 663, 664, 666, 670, 671, 673, 674, 676, 677, 679, 681, 682, 683, 685, 686, 688, 692, 694, 697, 700, 703, 707, 709, 712, 713, 714, 715], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/transformer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 561, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 561, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 32, 33, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 53, 55, 57, 60, 62, 63, 65, 67, 69, 71, 73, 74, 75, 76, 78, 80, 81, 84, 85, 86, 88, 93, 109, 110, 111, 113, 116, 117, 118, 119, 121, 124, 125, 126, 127, 130, 137, 178, 180, 181, 184, 186, 187, 188, 189, 190, 192, 200, 201, 207, 208, 210, 211, 215, 216, 217, 218, 222, 224, 225, 228, 229, 232, 233, 235, 240, 241, 243, 267, 268, 269, 273, 275, 278, 279, 282, 283, 286, 287, 289, 290, 291, 293, 295, 299, 301, 302, 305, 306, 309, 310, 312, 313, 314, 316, 317, 338, 339, 340, 343, 344, 348, 351, 352, 355, 356, 360, 361, 365, 383, 384, 385, 388, 389, 393, 396, 397, 400, 401, 405, 408, 409, 428, 446, 453, 454, 456, 457, 458, 460, 462, 463, 466, 468, 470, 486, 488, 489, 491, 492, 494, 501, 503, 504, 506, 518, 519, 522, 524, 527, 528, 535, 538, 539, 541, 542, 543, 544, 548, 552, 553, 554, 555, 557, 559, 561, 562, 564, 570, 574, 585, 595, 597, 600, 601, 603, 605, 609, 611, 613, 614, 616, 617, 619, 620, 621, 623, 625, 629, 631, 632, 634, 635, 637, 640, 641, 682, 724, 726, 741, 742, 756, 757, 773, 774, 808, 840, 841, 842, 843, 844, 845, 847, 848, 850, 853, 854, 856, 857, 858, 859, 860, 863, 865, 875, 876, 885, 886, 897, 900, 959, 961, 962, 965, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 980, 982, 983, 984, 985, 987, 988, 989, 990, 995, 996, 1002, 1005, 1006, 1007, 1008, 1009, 1015, 1017, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1050, 1053, 1054, 1055, 1059, 1060, 1064, 1067, 1069, 1073, 1076, 1077, 1078, 1080, 1082, 1083, 1111, 1112, 1114, 1119, 1124, 1125, 1129, 1130, 1131, 1132, 1133, 1135, 1175, 1176, 1180, 1184, 1193, 1198, 1202, 1203, 1204, 1206, 1207, 1209, 1211, 1212, 1214, 1215, 1219, 1220, 1223, 1224, 1226, 1231, 1232, 1234, 1236, 1237, 1240, 1241, 1244, 1245, 1247, 1252, 1253, 1258, 1260, 1261, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1274, 1275, 1279, 1281, 1282, 1284, 1285, 1286, 1289, 1291, 1293, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1317, 1320, 1321, 1322, 1332, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1372, 1373, 1375, 1376, 1378, 1380, 1384, 1385, 1386, 1387, 1389, 1390, 1396, 1397, 1399, 1401, 1402, 1404, 1405, 1413, 1416, 1417, 1420, 1421, 1423, 1424, 1429, 1436, 1437, 1438, 1440, 1441, 1447, 1448, 1450, 1452, 1453, 1455, 1456, 1457, 1465, 1467, 1469, 1471, 1473, 1481, 1483, 1500, 1501, 1503, 1504, 1505, 1506, 1510, 1511, 1512, 1515, 1518, 1519, 1521, 1523, 1528, 1530, 1532, 1533, 1535, 1537, 1539, 1540, 1541, 1543, 1545, 1548, 1550, 1551, 1552, 1563, 1564, 1566, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1577, 1578, 1580, 1581, 1584, 1585, 1586, 1588, 1589, 1590, 1592, 1593, 1595, 1598, 1602, 1603, 1604, 1606, 1607, 1611, 1613, 1618, 1621, 1622, 1632, 1647, 1648, 1651, 1652, 1655, 1656, 1659, 1660, 1661, 1662, 1663, 1665, 1666, 1668, 1671, 1673, 1674, 1676, 1677, 1679], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 205, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 205, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 23, 25, 26, 27, 28, 29, 30, 32, 34, 36, 38, 39, 40, 42, 44, 46, 49, 53, 56, 61, 62, 64, 65, 68, 92, 95, 98, 99, 102, 105, 115, 116, 118, 121, 124, 125, 127, 130, 131, 132, 134, 137, 138, 139, 141, 144, 146, 148, 149, 151, 154, 155, 156, 159, 161, 162, 163, 164, 165, 168, 169, 171, 174, 175, 178, 179, 180, 181, 184, 185, 186, 190, 191, 192, 195, 197, 198, 199, 203, 206, 212, 215, 216, 218, 220, 221, 222, 227, 228, 229, 232, 233, 235, 236, 238, 240, 243, 245, 246, 249, 250, 251, 253, 254, 256, 257, 258, 260, 262, 264, 267, 270, 271, 272, 273, 276, 278, 281, 283, 284, 285, 287, 290, 296, 297, 300, 307, 310, 311, 312, 313, 316, 317, 320, 326, 328, 331, 337, 338, 339, 341, 344, 351, 352, 353, 354, 356, 358, 361, 368, 369, 370, 371, 373, 375, 376, 377, 378, 382, 383, 384, 385, 386, 388, 389, 391, 393, 394, 397, 401, 403, 404, 407, 408, 409, 410, 412, 413, 416, 417, 418, 419, 420, 421, 422, 424, 425, 428, 432, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron/vocab_parallel_cross_entropy.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 65, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 65, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 22, 24, 26, 28, 30, 33, 34, 35, 38, 39, 43, 46, 47, 48, 49, 50, 53, 54, 55, 60, 61, 62, 63, 64, 65, 66, 68, 73, 74, 75, 76, 81, 84, 86, 87, 97, 98, 101, 102, 103, 105, 109, 111, 112, 115, 117, 118, 121, 123, 124, 127, 129, 131, 132, 133, 134, 135, 137, 140, 142, 145, 147], "excluded_lines": []}, "nemo/collections/nlp/modules/common/megatron_web_server.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 214, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 214, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 21, 22, 24, 25, 31, 33, 35, 53, 64, 65, 66, 72, 75, 76, 77, 90, 91, 92, 93, 95, 96, 97, 99, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 117, 118, 119, 121, 125, 126, 128, 132, 133, 134, 135, 137, 150, 162, 163, 164, 166, 167, 169, 186, 187, 192, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 209, 212, 213, 216, 219, 220, 224, 225, 227, 228, 229, 230, 233, 234, 235, 238, 239, 241, 242, 243, 244, 245, 247, 248, 250, 254, 255, 256, 257, 259, 260, 262, 266, 267, 268, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 347, 348, 349, 350, 351, 352, 353, 354, 356, 377, 378, 379, 381, 382, 385, 386, 387, 388, 389, 390, 392, 407, 421, 422, 423, 424, 425, 427, 428, 429, 431, 432, 436, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 477, 478, 479, 480, 498], "excluded_lines": []}, "nemo/collections/nlp/modules/common/prompt_encoder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 168, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 168, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 31, 33, 35, 37, 40, 43, 44, 45, 46, 47, 50, 61, 64, 66, 67, 70, 71, 72, 75, 77, 81, 83, 87, 89, 93, 96, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 118, 119, 121, 125, 127, 131, 132, 135, 141, 158, 159, 160, 161, 162, 164, 165, 166, 168, 177, 187, 188, 189, 190, 191, 192, 195, 201, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 238, 239, 241, 242, 243, 245, 254, 260, 261, 262, 266, 267, 268, 270, 271, 273, 274, 276, 278, 282, 283, 285, 286, 288, 289, 291, 292, 293, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 360, 361], "excluded_lines": []}, "nemo/collections/nlp/modules/common/prompt_table.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 11, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 11, "excluded_lines": 0}, "missing_lines": [15, 17, 20, 21, 22, 25, 26, 27, 30, 31, 32], "excluded_lines": []}, "nemo/collections/nlp/modules/common/retro_inference_strategies.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 275, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 275, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 46, 48, 50, 51, 52, 54, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 78, 80, 81, 82, 83, 84, 85, 87, 97, 98, 99, 103, 104, 105, 106, 107, 108, 109, 111, 113, 115, 116, 117, 118, 119, 120, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 185, 186, 187, 193, 194, 195, 199, 200, 201, 202, 204, 206, 207, 209, 214, 218, 220, 223, 224, 226, 228, 230, 240, 241, 244, 245, 255, 256, 258, 259, 260, 261, 262, 263, 264, 267, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 300, 302, 303, 304, 305, 306, 307, 308, 309, 311, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 333, 334, 335, 341, 342, 343, 347, 348, 349, 350, 352, 354, 355, 357, 362, 364, 366, 369, 370, 372, 374, 376, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 407, 409, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458], "excluded_lines": []}, "nemo/collections/nlp/modules/common/sequence_classifier.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 23, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 23, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 22, 25, 26, 27, 28, 29, 31, 33, 56, 57, 58, 59, 66, 68, 69, 70, 71, 72], "excluded_lines": []}, "nemo/collections/nlp/modules/common/sequence_regression.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 21, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 21, "excluded_lines": 0}, "missing_lines": [15, 17, 19, 20, 21, 22, 24, 27, 39, 40, 41, 43, 53, 54, 55, 58, 60, 61, 67, 68, 69], "excluded_lines": []}, "nemo/collections/nlp/modules/common/sequence_token_classifier.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 21, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 21, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 22, 25, 26, 27, 28, 33, 57, 58, 65, 72, 74, 75, 76, 78, 79, 80], "excluded_lines": []}, "nemo/collections/nlp/modules/common/text_generation_server.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 150, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 150, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 19, 20, 21, 23, 27, 28, 30, 31, 33, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 192, 195, 196, 198, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 230, 231, 232, 233, 234, 236, 237], "excluded_lines": []}, "nemo/collections/nlp/modules/common/text_generation_strategy.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 369, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 369, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 28, 29, 31, 33, 34, 36, 37, 38, 39, 41, 43, 45, 49, 52, 57, 58, 59, 61, 65, 66, 68, 69, 70, 80, 82, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 105, 106, 113, 115, 116, 124, 126, 127, 141, 143, 144, 152, 154, 167, 169, 171, 172, 174, 176, 184, 185, 186, 188, 190, 196, 198, 211, 214, 216, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 241, 242, 243, 245, 246, 249, 253, 254, 256, 259, 260, 261, 262, 264, 268, 269, 270, 271, 273, 276, 277, 279, 288, 301, 303, 304, 305, 311, 312, 313, 318, 319, 320, 321, 323, 326, 328, 329, 330, 333, 334, 343, 344, 345, 352, 353, 354, 355, 357, 360, 361, 363, 365, 366, 370, 371, 372, 373, 375, 378, 379, 380, 384, 385, 386, 387, 389, 392, 394, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 422, 424, 425, 426, 428, 431, 432, 434, 443, 445, 446, 453, 454, 455, 456, 466, 468, 469, 470, 471, 473, 487, 489, 490, 491, 497, 498, 499, 504, 505, 506, 507, 509, 512, 513, 514, 515, 518, 519, 520, 521, 522, 524, 527, 528, 530, 539, 541, 542, 543, 545, 555, 557, 558, 559, 565, 566, 567, 572, 573, 574, 575, 576, 579, 581, 582, 583, 585, 590, 593, 594, 595, 596, 599, 600, 601, 602, 604, 608, 609, 610, 611, 613, 623, 624, 625, 627, 630, 632, 633, 634, 636, 637, 638, 639, 640, 641, 643, 644, 645, 648, 649, 650, 653, 654, 656, 661, 662, 663, 664, 666, 669, 672, 673, 676, 679, 680, 682, 684, 688, 689, 690, 691, 692, 694, 695, 696, 698, 701, 702, 703, 706, 717, 718, 720, 727, 730, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 747, 748, 749, 750, 753, 754, 757, 760, 763, 766, 769, 771, 773, 789, 790, 791, 792, 794, 795, 796, 797, 799, 802, 804, 814, 815, 818, 819, 820, 821, 824, 825, 826, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 854], "excluded_lines": []}, "nemo/collections/nlp/modules/common/text_generation_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 576, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 576, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 35, 36, 37, 38, 40, 41, 43, 45, 47, 49, 50, 52, 54, 56, 58, 70, 72, 84, 87, 89, 91, 94, 97, 99, 100, 101, 102, 103, 104, 105, 122, 123, 125, 126, 127, 143, 144, 145, 147, 149, 152, 154, 155, 156, 157, 177, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 260, 263, 265, 273, 276, 277, 278, 279, 282, 296, 299, 300, 301, 302, 304, 306, 308, 309, 312, 315, 316, 317, 318, 319, 320, 322, 323, 324, 326, 329, 333, 334, 335, 336, 339, 342, 343, 344, 345, 347, 348, 349, 352, 370, 371, 372, 373, 375, 389, 390, 393, 394, 397, 400, 401, 402, 405, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 439, 440, 442, 459, 478, 479, 480, 481, 493, 502, 503, 505, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 538, 539, 540, 542, 545, 547, 548, 549, 550, 557, 558, 559, 562, 609, 610, 612, 613, 614, 615, 616, 618, 622, 639, 641, 646, 647, 648, 649, 651, 654, 671, 673, 674, 675, 676, 677, 683, 685, 688, 689, 691, 692, 694, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 749, 750, 752, 753, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 778, 779, 780, 783, 800, 801, 802, 809, 812, 816, 818, 819, 820, 823, 828, 831, 832, 834, 835, 836, 837, 838, 840, 842, 844, 846, 847, 848, 852, 855, 857, 859, 860, 861, 862, 863, 866, 868, 870, 871, 872, 873, 876, 877, 878, 879, 882, 886, 887, 888, 890, 891, 893, 894, 897, 898, 901, 902, 905, 908, 911, 913, 914, 915, 917, 918, 919, 920, 921, 923, 924, 925, 928, 929, 930, 931, 933, 934, 935, 938, 941, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 955, 957, 960, 961, 962, 963, 964, 965, 966, 968, 970, 971, 972, 973, 975, 976, 977, 978, 981, 992, 993, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1023, 1025, 1027, 1029, 1031, 1032, 1033, 1034, 1037, 1039, 1040, 1042, 1044, 1045, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1068, 1069, 1070, 1071, 1072, 1074, 1076, 1079, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1092, 1095, 1096, 1097, 1099, 1100, 1101, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1128, 1129, 1130, 1131, 1133, 1134, 1135, 1136, 1139, 1150, 1152, 1155, 1170, 1171, 1172, 1173, 1175, 1176, 1178, 1181, 1197, 1198, 1200, 1202, 1204, 1207, 1216, 1219, 1241, 1248, 1249, 1252, 1253, 1255, 1256, 1257, 1258, 1259, 1261, 1262, 1263, 1266, 1271], "excluded_lines": []}, "nemo/collections/nlp/modules/common/token_classifier.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 56, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 56, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 20, 21, 22, 23, 25, 27, 30, 31, 32, 33, 34, 35, 36, 39, 44, 45, 49, 50, 52, 54, 77, 78, 79, 82, 84, 85, 93, 94, 95, 98, 103, 104, 108, 109, 111, 113, 136, 138, 140, 141, 142, 143, 144, 145, 148, 150, 151, 159, 160, 161, 162, 163, 164], "excluded_lines": []}, "nemo/collections/nlp/modules/common/tokenizer_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 89, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 89, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 34, 36, 37, 40, 43, 50, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 97, 98, 100, 102, 103, 104, 107, 108, 111, 114, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 132, 141, 167, 168, 170, 172, 175, 177, 178, 179, 187, 188, 189, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 207, 208, 209, 212, 213, 214, 216], "excluded_lines": []}, "nemo/collections/nlp/modules/common/transformer/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 7, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 7, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 21], "excluded_lines": []}, "nemo/collections/nlp/modules/common/transformer/bridge_encoders.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 48, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 48, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 23, 24, 41, 43, 44, 45, 47, 48, 50, 51, 58, 60, 61, 76, 90, 91, 92, 94, 95, 96, 98, 99, 100, 102, 103, 104, 106, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 127, 130, 135, 136, 137, 139, 141], "excluded_lines": []}, "nemo/collections/nlp/modules/common/transformer/perceiver_encoders.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 53, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 53, "excluded_lines": 0}, "missing_lines": [15, 17, 19, 20, 21, 23, 26, 27, 44, 46, 47, 48, 50, 51, 53, 54, 60, 62, 64, 65, 77, 78, 80, 83, 95, 96, 99, 112, 114, 115, 116, 118, 119, 120, 122, 123, 124, 126, 127, 128, 130, 137, 142, 144, 145, 151, 153, 157, 158, 161, 169, 172, 174], "excluded_lines": []}, "nemo/collections/nlp/modules/common/transformer/reduction_encoders.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 55, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 55, "excluded_lines": 0}, "missing_lines": [15, 17, 19, 21, 24, 26, 28, 46, 49, 50, 51, 52, 54, 55, 57, 58, 64, 65, 68, 81, 83, 85, 90, 91, 92, 93, 95, 97, 98, 99, 101, 102, 103, 105, 106, 107, 109, 110, 111, 113, 114, 115, 117, 124, 125, 128, 129, 132, 134, 137, 139, 140, 141, 144, 148], "excluded_lines": []}, "nemo/collections/nlp/modules/common/transformer/text_generation.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 29, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 29, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 20, 21, 23, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 52, 57, 113], "excluded_lines": []}, "nemo/collections/nlp/modules/common/transformer/transformer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 128, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 128, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 61, 62, 63, 66, 67, 68, 71, 72, 73, 76, 77, 97, 99, 100, 101, 103, 113, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 141, 142, 143, 145, 146, 147, 149, 150, 151, 153, 159, 160, 161, 162, 163, 166, 167, 186, 188, 189, 190, 191, 192, 193, 194, 196, 206, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 239, 240, 241, 243, 244, 245, 247, 248, 249, 251, 252, 253, 255, 256, 257, 259, 260, 261, 263, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 282, 283, 284, 285, 287], "excluded_lines": []}, "nemo/collections/nlp/modules/common/transformer/transformer_bottleneck.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 88, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 88, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 26, 27, 28, 30, 38, 39, 41, 42, 43, 44, 47, 48, 49, 51, 54, 55, 56, 59, 61, 63, 89, 109, 110, 113, 131, 136, 137, 138, 139, 155, 156, 172, 173, 190, 191, 209, 211, 213, 214, 215, 216, 220, 222, 223, 224, 225, 228, 230, 231, 232, 234, 235, 236, 238, 239, 240, 241, 243, 245, 246, 247, 249, 253, 254, 256, 259, 260, 262, 281, 299, 302, 320, 325, 326, 328, 330, 332, 333, 334, 336, 337, 338], "excluded_lines": []}, "nemo/collections/nlp/modules/common/transformer/transformer_decoders.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 89, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 89, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 21, 23, 26, 42, 53, 54, 55, 56, 59, 60, 63, 64, 66, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 87, 89, 94, 95, 96, 98, 99, 100, 102, 103, 104, 106, 107, 108, 110, 113, 114, 127, 129, 130, 132, 134, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 157, 180, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 202, 204, 205, 207, 209, 215, 216, 217, 218], "excluded_lines": []}, "nemo/collections/nlp/modules/common/transformer/transformer_encoders.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 66, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 66, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 21, 23, 26, 42, 53, 54, 55, 56, 59, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 80, 85, 86, 87, 89, 90, 91, 93, 95, 96, 97, 99, 102, 103, 117, 119, 120, 122, 124, 134, 135, 137, 138, 139, 141, 142, 144, 156, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 171, 172, 174], "excluded_lines": []}, "nemo/collections/nlp/modules/common/transformer/transformer_generators.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 383, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 383, "excluded_lines": 0}, "missing_lines": [15, 17, 19, 21, 30, 50, 62, 63, 64, 65, 66, 67, 68, 69, 71, 94, 95, 97, 98, 107, 110, 111, 113, 119, 120, 124, 125, 126, 127, 129, 131, 134, 135, 136, 138, 139, 140, 142, 144, 147, 148, 152, 153, 155, 156, 158, 162, 163, 164, 165, 168, 169, 171, 173, 176, 177, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 213, 215, 216, 218, 221, 235, 236, 237, 238, 241, 249, 253, 254, 256, 257, 264, 265, 267, 270, 271, 284, 285, 286, 288, 289, 291, 293, 296, 299, 300, 301, 304, 305, 306, 309, 310, 311, 312, 316, 320, 324, 326, 329, 332, 335, 339, 344, 345, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 363, 364, 365, 373, 374, 375, 378, 379, 382, 383, 384, 387, 389, 390, 392, 395, 396, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 450, 452, 453, 454, 455, 458, 459, 461, 485, 486, 488, 489, 498, 501, 502, 504, 510, 511, 515, 516, 517, 518, 520, 522, 525, 526, 527, 529, 530, 531, 533, 535, 536, 538, 539, 540, 544, 545, 548, 551, 555, 556, 558, 559, 560, 562, 563, 564, 567, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 586, 590, 592, 595, 598, 609, 610, 612, 613, 614, 616, 617, 621, 626, 627, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 645, 646, 647, 648, 649, 655, 656, 659, 660, 668, 669, 670, 673, 674, 677, 678, 679, 682, 684, 685, 687, 689, 690, 691, 693, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 733, 735, 736, 738, 741, 742, 757, 758, 759, 760, 761, 763, 773, 776, 777, 779, 782, 784, 786, 788, 789, 791, 793, 797, 800, 803, 804, 807, 808, 809, 810, 811, 814, 815, 816, 817, 821, 822, 826, 830, 832, 835, 838, 841, 845, 850, 851, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 869, 870, 871, 877, 878, 879, 887, 888, 889, 892, 893, 896, 897, 898, 901, 903, 904, 906], "excluded_lines": []}, "nemo/collections/nlp/modules/common/transformer/transformer_modules.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 134, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 134, "excluded_lines": 0}, "missing_lines": [17, 19, 20, 21, 22, 24, 25, 27, 30, 40, 41, 43, 44, 45, 47, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 64, 67, 71, 74, 75, 80, 83, 99, 109, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 123, 124, 126, 127, 131, 134, 136, 137, 138, 140, 141, 142, 144, 145, 147, 150, 162, 163, 164, 165, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 187, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 206, 207, 208, 209, 212, 213, 214, 217, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 245, 253, 259, 261, 262, 263, 265, 269, 270, 271, 273, 281, 283, 284, 285, 286, 288, 289, 291, 292, 294, 296], "excluded_lines": []}, "nemo/collections/nlp/modules/common/transformer/transformer_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 31, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 31, "excluded_lines": 0}, "missing_lines": [16, 18, 20, 21, 22, 23, 26, 50, 51, 53, 54, 56, 58, 59, 66, 68, 70, 71, 72, 91, 92, 117, 119, 138, 141, 148, 149, 151, 153, 156, 164], "excluded_lines": []}, "nemo/collections/nlp/modules/dialogue_state_tracking/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/nlp/modules/dialogue_state_tracking/sgd_decoder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 63, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 63, "excluded_lines": 0}, "missing_lines": [16, 18, 19, 21, 22, 24, 27, 28, 37, 38, 39, 40, 42, 44, 51, 52, 54, 55, 58, 63, 64, 68, 77, 84, 86, 88, 89, 91, 94, 97, 98, 99, 101, 102, 109, 110, 112, 114, 116, 120, 129, 134, 135, 137, 143, 144, 146, 155, 157, 158, 160, 169, 172, 173, 174, 177, 178, 179, 183, 185, 187, 192, 195], "excluded_lines": []}, "nemo/collections/nlp/modules/dialogue_state_tracking/sgd_encoder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 27, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 27, "excluded_lines": 0}, "missing_lines": [16, 18, 20, 21, 22, 24, 26, 29, 34, 35, 40, 45, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 73, 74, 75, 76, 77], "excluded_lines": []}, "nemo/collections/nlp/parts/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 2, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [16, 17], "excluded_lines": []}, "nemo/collections/nlp/parts/megatron_lr_schedulers.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 8, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 8, "excluded_lines": 0}, "missing_lines": [15, 18, 25, 26, 27, 28, 29, 32], "excluded_lines": []}, "nemo/collections/nlp/parts/megatron_trainer_builder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 77, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 77, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 23, 33, 36, 42, 43, 45, 50, 51, 52, 53, 55, 56, 59, 60, 61, 62, 63, 64, 65, 77, 86, 90, 96, 101, 102, 106, 107, 108, 109, 110, 111, 112, 114, 116, 117, 119, 120, 122, 125, 127, 128, 130, 132, 134, 135, 136, 138, 139, 140, 142, 143, 146, 149, 150, 156, 159, 160, 161, 162, 164, 165, 166, 169, 172, 176, 177, 178, 185, 192, 195, 196], "excluded_lines": []}, "nemo/collections/nlp/parts/mixins/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/nlp/parts/mixins/multimodal_adapter_mixins.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 86, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 86, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 22, 23, 24, 31, 32, 33, 34, 36, 37, 39, 41, 42, 45, 46, 47, 49, 54, 55, 56, 57, 59, 60, 61, 63, 64, 66, 68, 69, 70, 72, 73, 75, 77, 78, 79, 80, 82, 83, 84, 85, 87, 107, 108, 109, 111, 113, 114, 115, 116, 118, 119, 120, 123, 124, 125, 127, 128, 130, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 153, 154, 155, 161, 162, 163, 164, 165, 171, 172], "excluded_lines": []}, "nemo/collections/nlp/parts/mixins/nlp_adapter_mixins.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 273, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 273, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 22, 24, 25, 27, 28, 29, 32, 33, 40, 41, 42, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 58, 72, 73, 74, 75, 78, 79, 81, 82, 83, 85, 86, 87, 88, 91, 92, 93, 95, 99, 100, 102, 104, 105, 106, 107, 112, 113, 114, 120, 121, 122, 129, 131, 133, 136, 138, 140, 141, 142, 146, 147, 148, 150, 152, 153, 155, 156, 157, 158, 159, 164, 165, 169, 170, 172, 182, 183, 184, 185, 187, 188, 189, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 208, 209, 210, 212, 213, 214, 216, 217, 219, 220, 222, 223, 224, 226, 228, 229, 231, 233, 234, 235, 236, 237, 239, 241, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 266, 268, 269, 271, 273, 293, 294, 295, 297, 299, 300, 301, 302, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 321, 322, 323, 325, 326, 328, 329, 330, 332, 334, 335, 337, 339, 340, 341, 342, 344, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 366, 367, 368, 370, 371, 372, 374, 375, 377, 378, 379, 384, 386, 387, 388, 389, 391, 393, 394, 395, 396, 402, 403, 404, 406, 408, 412, 413, 416, 417, 418, 419, 421, 423, 427, 429, 435, 436, 437, 438, 439, 441, 443, 444, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 483, 484, 509, 510, 512, 513, 517, 519, 520, 521, 522, 523, 524, 526, 527, 528, 530, 531, 532, 534, 549, 550, 551], "excluded_lines": []}, "nemo/collections/nlp/parts/nlp_overrides.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 713, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 713, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 55, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 82, 85, 86, 88, 90, 92, 94, 95, 96, 97, 102, 103, 104, 105, 107, 109, 111, 113, 116, 125, 129, 132, 133, 134, 148, 149, 151, 152, 153, 154, 155, 158, 159, 162, 172, 183, 184, 188, 189, 192, 194, 195, 196, 197, 199, 204, 205, 206, 208, 209, 212, 213, 214, 216, 218, 221, 222, 224, 225, 231, 236, 240, 242, 244, 246, 256, 262, 267, 268, 271, 273, 283, 285, 288, 292, 293, 294, 296, 297, 298, 302, 303, 306, 308, 310, 316, 320, 321, 322, 323, 324, 326, 337, 339, 341, 344, 345, 352, 356, 360, 363, 366, 368, 369, 370, 371, 373, 374, 377, 379, 380, 385, 386, 387, 390, 392, 396, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 422, 424, 425, 427, 428, 429, 430, 432, 434, 441, 444, 450, 451, 453, 455, 458, 459, 461, 462, 464, 465, 469, 474, 475, 476, 477, 478, 480, 482, 486, 487, 491, 493, 494, 495, 496, 498, 499, 500, 501, 505, 508, 511, 513, 514, 519, 522, 530, 531, 534, 535, 536, 537, 543, 546, 549, 550, 551, 557, 560, 570, 581, 582, 586, 587, 592, 596, 599, 605, 610, 615, 616, 617, 620, 621, 625, 626, 627, 628, 630, 641, 642, 643, 644, 645, 646, 648, 650, 651, 652, 653, 654, 656, 660, 663, 664, 665, 666, 667, 670, 672, 675, 676, 677, 679, 680, 683, 688, 691, 692, 694, 698, 700, 705, 706, 707, 709, 713, 714, 715, 716, 717, 719, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 742, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 761, 762, 764, 767, 768, 769, 770, 772, 776, 777, 779, 786, 787, 788, 789, 790, 792, 794, 798, 801, 802, 803, 804, 806, 808, 809, 810, 812, 816, 818, 819, 820, 821, 823, 824, 825, 827, 828, 833, 836, 837, 838, 839, 846, 847, 850, 852, 853, 856, 857, 859, 861, 863, 865, 868, 870, 871, 873, 874, 876, 877, 879, 881, 883, 884, 886, 887, 888, 889, 892, 901, 902, 903, 907, 913, 915, 916, 919, 924, 926, 927, 929, 931, 932, 933, 936, 942, 945, 946, 949, 957, 958, 959, 960, 961, 964, 965, 968, 970, 971, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 993, 994, 995, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1060, 1062, 1065, 1068, 1069, 1072, 1073, 1075, 1077, 1112, 1115, 1116, 1117, 1120, 1122, 1124, 1125, 1127, 1128, 1129, 1131, 1133, 1135, 1140, 1144, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1157, 1158, 1159, 1162, 1163, 1164, 1165, 1168, 1177, 1184, 1185, 1186, 1187, 1189, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1203, 1204, 1206, 1209, 1218, 1223, 1224, 1225, 1226, 1228, 1233, 1235, 1236, 1238, 1241, 1248, 1257, 1264, 1265, 1267, 1268, 1269, 1270, 1272, 1274, 1275, 1276, 1278, 1280, 1281, 1282, 1283, 1286, 1290, 1291, 1292, 1293, 1294, 1296, 1297, 1299, 1306, 1307, 1309, 1311, 1313, 1314, 1316, 1317, 1318, 1319, 1320, 1324, 1330, 1332, 1335, 1339, 1340, 1341, 1343, 1346, 1348, 1349, 1360, 1361, 1362, 1365, 1375, 1380, 1388, 1391, 1393, 1397, 1410, 1414, 1415, 1417, 1418, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1438, 1441, 1454, 1457, 1458, 1460, 1461, 1462, 1463, 1465, 1467, 1474, 1478, 1479, 1480, 1481, 1482, 1484, 1485, 1490, 1493, 1494, 1495, 1497, 1499, 1500, 1502, 1503, 1505, 1506, 1508, 1511, 1514, 1516, 1517, 1518, 1519, 1521, 1523, 1524, 1525, 1526, 1527, 1529, 1530, 1531, 1532, 1535, 1541, 1545, 1547, 1551, 1552, 1553, 1555, 1558, 1559, 1560, 1561, 1563, 1567, 1568, 1569, 1570], "excluded_lines": []}, "nemo/collections/nlp/parts/peft_config.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 135, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 135, "excluded_lines": 0}, "missing_lines": [15, 17, 19, 21, 22, 28, 29, 31, 45, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 78, 79, 81, 82, 84, 87, 89, 90, 92, 93, 97, 98, 100, 101, 102, 105, 107, 108, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 125, 127, 129, 130, 131, 133, 134, 135, 138, 139, 141, 142, 145, 146, 150, 151, 152, 155, 156, 157, 158, 161, 162, 164, 168, 170, 171, 173, 174, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 206, 214, 216, 219, 220, 221, 225, 226, 227, 228, 230, 235, 241, 244, 245, 246, 253, 254, 255, 257, 260, 261, 262, 264, 275, 276, 283, 285, 287, 291, 296, 299, 300, 301, 304, 318, 319, 320, 323], "excluded_lines": []}, "nemo/collections/nlp/parts/utils_funcs.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 108, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 108, "excluded_lines": 0}, "missing_lines": [15, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 43, 45, 46, 48, 49, 50, 51, 52, 53, 55, 58, 60, 63, 65, 68, 86, 87, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 126, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 152, 153, 159, 162, 163, 166, 167, 170, 182, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 215, 217, 219, 220, 222, 223, 224, 225, 227, 228, 229, 231], "excluded_lines": []}, "nemo/collections/tts/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 5, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 5, "excluded_lines": 0}, "missing_lines": [15, 16, 19, 22, 25], "excluded_lines": []}, "nemo/collections/tts/data/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/tts/data/dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 787, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 787, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 37, 43, 59, 60, 62, 63, 65, 66, 67, 68, 71, 72, 81, 82, 182, 185, 187, 188, 189, 190, 192, 193, 195, 196, 198, 199, 202, 203, 204, 205, 206, 210, 215, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 241, 242, 243, 244, 246, 247, 248, 249, 251, 252, 254, 256, 258, 259, 262, 264, 265, 267, 268, 269, 271, 272, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 302, 303, 304, 305, 310, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 334, 335, 340, 342, 343, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 361, 362, 365, 366, 367, 369, 370, 371, 372, 373, 375, 377, 378, 379, 384, 386, 387, 389, 390, 391, 392, 394, 396, 397, 398, 400, 401, 403, 404, 405, 406, 408, 412, 413, 414, 415, 416, 420, 422, 423, 425, 426, 428, 429, 430, 431, 433, 435, 436, 437, 438, 439, 440, 442, 444, 449, 454, 455, 456, 459, 460, 462, 463, 465, 467, 468, 470, 471, 473, 475, 476, 478, 479, 480, 481, 483, 485, 486, 488, 489, 490, 491, 493, 494, 495, 497, 500, 502, 504, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 537, 538, 539, 540, 543, 545, 546, 549, 550, 552, 558, 559, 562, 565, 567, 568, 569, 570, 572, 581, 582, 583, 584, 585, 588, 592, 594, 595, 596, 598, 599, 600, 603, 604, 605, 607, 608, 610, 612, 613, 615, 616, 618, 619, 622, 623, 624, 627, 628, 629, 630, 631, 633, 635, 636, 637, 638, 639, 640, 641, 642, 644, 646, 647, 655, 656, 657, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 681, 683, 684, 685, 688, 689, 690, 692, 693, 695, 696, 697, 699, 702, 703, 704, 706, 707, 708, 709, 717, 719, 740, 741, 743, 744, 745, 746, 748, 749, 751, 753, 754, 775, 776, 777, 778, 779, 780, 781, 785, 786, 788, 797, 823, 824, 845, 846, 848, 849, 851, 852, 853, 855, 856, 858, 859, 861, 862, 866, 867, 869, 870, 872, 873, 875, 876, 878, 879, 881, 882, 886, 909, 911, 912, 913, 914, 917, 918, 919, 921, 922, 924, 925, 926, 928, 929, 930, 932, 935, 937, 939, 940, 942, 944, 945, 947, 948, 950, 954, 955, 974, 975, 976, 979, 998, 999, 1000, 1001, 1003, 1004, 1008, 1009, 1011, 1013, 1014, 1017, 1018, 1056, 1058, 1059, 1060, 1062, 1063, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1081, 1087, 1089, 1090, 1093, 1095, 1096, 1098, 1099, 1100, 1102, 1103, 1106, 1107, 1108, 1109, 1110, 1111, 1113, 1114, 1115, 1117, 1118, 1120, 1121, 1123, 1125, 1126, 1128, 1129, 1135, 1136, 1138, 1140, 1141, 1143, 1144, 1146, 1147, 1149, 1150, 1151, 1152, 1154, 1155, 1157, 1159, 1160, 1163, 1164, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1192, 1193, 1194, 1196, 1199, 1200, 1256, 1258, 1259, 1260, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1279, 1281, 1282, 1285, 1287, 1288, 1290, 1291, 1292, 1294, 1295, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1313, 1314, 1315, 1316, 1318, 1324, 1325, 1326, 1327, 1329, 1330, 1333, 1335, 1338, 1339, 1342, 1344, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1354, 1355, 1357, 1361, 1362, 1364, 1368, 1369, 1371, 1375, 1377, 1379, 1380, 1381, 1382, 1383, 1385, 1389, 1390, 1391, 1392, 1393, 1395, 1399, 1405, 1406, 1407, 1408, 1410, 1411, 1412, 1414, 1415, 1416, 1417, 1419, 1420, 1421, 1422, 1424, 1425, 1426, 1429, 1431, 1432, 1433, 1434, 1436, 1437, 1438, 1439, 1441, 1442, 1443, 1444, 1445, 1447, 1448, 1450, 1452, 1453, 1454, 1455, 1456, 1457, 1459, 1461, 1462, 1463, 1465, 1467, 1468, 1469, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1480, 1481, 1483, 1484, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1500, 1501, 1502, 1504, 1505, 1506, 1507, 1509, 1523, 1525, 1526, 1529, 1539, 1540, 1541, 1542, 1543, 1545, 1546, 1547, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1557, 1558, 1559, 1560, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1570, 1572, 1573, 1574, 1575, 1576, 1577, 1579, 1580, 1582, 1583, 1584, 1585, 1586, 1587, 1590, 1591, 1594, 1597, 1598, 1599, 1601, 1602, 1603, 1604, 1606, 1607, 1609, 1610, 1611, 1613, 1614, 1615, 1616, 1617, 1618, 1620, 1622, 1624, 1625, 1627, 1635], "excluded_lines": []}, "nemo/collections/tts/data/text_to_speech_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 150, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 150, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 27, 34, 35, 36, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 85, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 116, 117, 118, 120, 122, 123, 124, 126, 128, 129, 130, 131, 132, 139, 140, 142, 143, 144, 146, 152, 154, 162, 163, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 180, 182, 183, 184, 186, 187, 189, 198, 199, 201, 203, 204, 206, 207, 209, 215, 216, 218, 219, 220, 222, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 245, 247, 248, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 296, 297, 299, 300, 301, 302, 304, 305, 306, 308], "excluded_lines": []}, "nemo/collections/tts/data/vocoder_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 176, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 176, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30, 37, 38, 39, 40, 42, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 75, 77, 84, 87, 90, 91, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 111, 112, 133, 145, 147, 148, 149, 150, 151, 152, 154, 155, 156, 158, 160, 161, 162, 163, 164, 167, 168, 170, 171, 172, 174, 180, 182, 183, 185, 186, 188, 189, 197, 204, 205, 207, 214, 215, 217, 219, 220, 223, 282, 297, 299, 300, 304, 305, 307, 308, 310, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 327, 329, 330, 331, 332, 333, 335, 339, 340, 347, 358, 359, 360, 361, 362, 364, 365, 367, 368, 369, 370, 371, 372, 374, 376, 377, 378, 379, 381, 382, 383, 386, 388, 389, 390, 391, 392, 393, 395, 397, 398, 400, 402, 409, 410, 412, 414, 418, 420, 421, 423, 424, 426, 427], "excluded_lines": []}, "nemo/collections/tts/g2p/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/tts/g2p/data/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/tts/g2p/data/ctc.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 86, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 86, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 22, 23, 25, 28, 29, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 84, 85, 87, 88, 89, 91, 92, 93, 95, 96, 97, 99, 108, 109, 110, 111, 115, 119, 120, 122, 123, 125, 127, 128, 129, 130, 132, 133, 137, 138, 145, 146, 149, 150, 151, 152, 153, 154, 155, 158, 159, 162, 163, 164, 166, 167, 168, 169, 170, 172, 173, 174, 175], "excluded_lines": []}, "nemo/collections/tts/g2p/data/heteronym_classification.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 125, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 125, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 23, 24, 25, 27, 30, 31, 57, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 79, 80, 82, 83, 85, 87, 88, 90, 91, 92, 94, 99, 101, 103, 120, 121, 122, 123, 126, 127, 128, 129, 131, 133, 134, 135, 139, 140, 142, 144, 147, 148, 149, 151, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 169, 171, 172, 173, 179, 180, 181, 182, 184, 186, 187, 188, 189, 190, 192, 193, 194, 197, 198, 199, 200, 201, 204, 206, 207, 209, 210, 212, 217, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 236, 237, 241, 242, 243, 244, 245, 247, 252, 253, 254], "excluded_lines": []}, "nemo/collections/tts/g2p/data/t5.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 61, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 61, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 23, 26, 31, 55, 57, 58, 60, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 94, 96, 97, 98, 100, 102, 103, 105, 106, 108, 109, 112, 115, 116, 119, 121, 122, 125, 128, 132, 133, 135], "excluded_lines": []}, "nemo/collections/tts/g2p/models/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/tts/g2p/models/base.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 21, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 21, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 20, 21, 35, 36, 37, 38, 39, 41, 42, 43, 46, 62, 63, 65, 66, 67, 68, 69], "excluded_lines": []}, "nemo/collections/tts/g2p/models/ctc.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 261, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 261, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 45, 48, 49, 50, 51, 54, 59, 60, 61, 62, 64, 66, 67, 68, 71, 74, 77, 78, 79, 80, 81, 83, 85, 86, 87, 94, 97, 98, 99, 100, 102, 104, 105, 107, 110, 112, 113, 114, 117, 118, 121, 123, 124, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 157, 158, 159, 162, 163, 164, 166, 169, 170, 171, 172, 175, 176, 177, 178, 179, 181, 183, 184, 185, 188, 189, 191, 195, 198, 199, 201, 202, 205, 206, 208, 211, 215, 218, 219, 221, 224, 225, 227, 228, 238, 239, 240, 242, 243, 244, 245, 247, 249, 251, 256, 258, 262, 263, 265, 266, 267, 269, 270, 271, 273, 274, 276, 278, 279, 281, 283, 285, 286, 288, 289, 291, 297, 308, 317, 318, 328, 329, 330, 331, 333, 334, 336, 338, 339, 340, 346, 349, 351, 352, 353, 354, 357, 358, 361, 362, 363, 365, 366, 368, 381, 383, 384, 385, 388, 389, 390, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 404, 405, 406, 409, 410, 411, 413, 414, 415, 418, 419, 420, 423, 424, 425, 427, 428, 429, 431, 432, 433, 435, 436, 437, 439, 440, 441, 444, 445, 448, 452, 458, 459, 461, 462, 463, 465, 466, 467, 469, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 489, 490], "excluded_lines": []}, "nemo/collections/tts/g2p/models/en_us_arpabet.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 96, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 96, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 30, 31, 59, 65, 66, 73, 80, 81, 86, 87, 89, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 109, 110, 111, 112, 114, 119, 121, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 146, 147, 148, 149, 151, 152, 154, 160, 161, 164, 165, 168, 169, 172, 179, 182, 189, 192, 193, 195, 196, 198, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 223], "excluded_lines": []}, "nemo/collections/tts/g2p/models/heteronym_classification.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 212, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 212, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 38, 39, 41, 44, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 78, 81, 86, 87, 89, 90, 93, 94, 95, 96, 98, 99, 105, 106, 109, 110, 114, 120, 121, 122, 124, 125, 128, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 154, 155, 158, 161, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 180, 182, 183, 184, 185, 187, 191, 193, 200, 202, 203, 204, 206, 207, 208, 211, 212, 213, 214, 215, 216, 218, 219, 221, 223, 225, 226, 227, 228, 229, 231, 232, 254, 255, 256, 258, 259, 260, 264, 265, 266, 267, 268, 270, 272, 273, 275, 276, 277, 283, 285, 286, 288, 289, 290, 291, 293, 294, 295, 299, 300, 301, 305, 307, 309, 311, 312, 313, 314, 315, 316, 319, 320, 322, 323, 332, 336, 338, 339, 340, 341, 342, 343, 345, 349, 350, 351, 353, 354, 357, 358, 359, 362, 363, 364, 366, 367, 368, 371, 372, 373, 375, 376, 377, 380, 381, 382, 384, 385, 386, 387, 388, 390, 401, 403, 407, 417, 426, 427, 433], "excluded_lines": []}, "nemo/collections/tts/g2p/models/i18n_ipa.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 208, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 208, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 21, 22, 28, 29, 30, 31, 34, 35, 37, 39, 40, 43, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 113, 115, 118, 119, 121, 123, 124, 134, 135, 137, 139, 146, 147, 148, 149, 150, 152, 154, 155, 157, 158, 172, 175, 176, 177, 178, 180, 181, 187, 189, 197, 198, 199, 200, 203, 205, 206, 208, 213, 216, 218, 220, 222, 226, 228, 229, 230, 231, 233, 234, 236, 249, 250, 251, 254, 257, 259, 262, 266, 267, 268, 269, 271, 274, 275, 278, 287, 288, 290, 292, 303, 306, 307, 309, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 325, 326, 327, 329, 330, 332, 335, 336, 338, 339, 341, 343, 344, 346, 349, 352, 353, 356, 357, 360, 361, 365, 367, 368, 369, 370, 371, 372, 373, 375, 378, 381, 382, 385, 387, 390, 391, 392, 393, 394, 395, 396, 398, 401, 404, 406, 408, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 427, 435, 436, 438, 443, 444, 445, 447, 448, 450, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 467, 469, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 491], "excluded_lines": []}, "nemo/collections/tts/g2p/models/t5.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 156, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 156, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 32, 35, 36, 37, 38, 39, 42, 47, 48, 49, 55, 56, 57, 59, 60, 61, 62, 65, 66, 68, 69, 70, 73, 75, 76, 77, 78, 79, 81, 84, 86, 87, 88, 89, 92, 93, 94, 96, 97, 99, 100, 102, 108, 118, 128, 129, 139, 140, 141, 142, 144, 145, 147, 148, 149, 150, 152, 153, 156, 157, 160, 161, 164, 167, 172, 173, 174, 175, 176, 177, 179, 181, 182, 184, 185, 187, 192, 194, 198, 199, 201, 202, 204, 206, 207, 210, 212, 213, 215, 216, 218, 219, 223, 226, 227, 229, 232, 233, 234, 236, 248, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 272, 273, 274, 276, 277, 279, 282, 285, 289, 290, 292, 293, 294, 296, 297, 298, 300, 307, 308, 309, 312, 314, 315, 318, 319], "excluded_lines": []}, "nemo/collections/tts/g2p/models/zh_cn_pinyin.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 79, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 79, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 22, 25, 26, 66, 67, 73, 74, 75, 76, 77, 78, 81, 86, 89, 90, 93, 96, 97, 99, 100, 107, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 130, 132, 134, 135, 136, 137, 138, 141, 143, 144, 146, 147, 151, 152, 153, 155, 156, 158, 162, 163, 166, 167, 169, 171, 184, 186, 187, 191, 192, 198, 199, 201, 202, 203, 204, 205, 206, 210, 211, 213, 214], "excluded_lines": []}, "nemo/collections/tts/g2p/modules.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 3, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 3, "excluded_lines": 0}, "missing_lines": [15, 16, 21], "excluded_lines": []}, "nemo/collections/tts/g2p/utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 80, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 80, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 20, 22, 33, 34, 35, 38, 49, 50, 52, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 72, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 95, 108, 110, 111, 112, 114, 116, 117, 118, 120, 121, 122, 125, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 168, 170], "excluded_lines": []}, "nemo/collections/tts/losses/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 2, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [15, 16], "excluded_lines": []}, "nemo/collections/tts/losses/aligner_loss.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 50, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 50, "excluded_lines": 0}, "missing_lines": [16, 17, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 40, 41, 42, 46, 47, 48, 49, 50, 53, 54, 57, 61, 62, 63, 66, 67, 70, 71, 73, 76, 77, 78, 79, 81, 82, 83, 88, 89, 90, 94, 95, 96, 97, 98, 99], "excluded_lines": []}, "nemo/collections/tts/losses/audio_codec_loss.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 257, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 257, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 21, 22, 23, 24, 35, 36, 37, 38, 39, 41, 42, 43, 49, 50, 51, 55, 56, 57, 60, 62, 64, 67, 68, 70, 73, 74, 75, 76, 79, 80, 81, 82, 85, 86, 87, 88, 90, 91, 92, 98, 99, 100, 104, 105, 106, 107, 108, 109, 112, 123, 124, 125, 127, 128, 130, 131, 132, 148, 150, 151, 152, 158, 159, 160, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 178, 181, 191, 192, 193, 194, 195, 196, 197, 199, 201, 210, 212, 213, 214, 215, 217, 218, 219, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 238, 248, 249, 250, 254, 255, 256, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 275, 281, 282, 283, 285, 286, 287, 293, 294, 295, 297, 298, 299, 300, 304, 305, 308, 309, 310, 311, 314, 315, 316, 319, 320, 323, 324, 326, 327, 330, 331, 334, 341, 342, 344, 345, 346, 351, 352, 353, 357, 358, 359, 360, 362, 364, 365, 366, 368, 370, 373, 386, 387, 388, 390, 391, 392, 397, 398, 399, 403, 404, 405, 406, 408, 410, 411, 412, 414, 415, 417, 419, 422, 423, 424, 425, 429, 430, 431, 433, 434, 435, 436, 437, 439, 441, 444, 445, 446, 447, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 466, 467, 468, 469, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 486, 488, 491, 492, 493, 494, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 511, 513], "excluded_lines": []}, "nemo/collections/tts/losses/fastpitchloss.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 82, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 82, "excluded_lines": 0}, "missing_lines": [45, 46, 48, 49, 50, 58, 61, 62, 63, 64, 66, 67, 68, 74, 75, 76, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 93, 94, 95, 97, 98, 99, 105, 106, 107, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 124, 125, 126, 128, 129, 130, 136, 137, 138, 142, 143, 144, 145, 146, 147, 148, 149, 151, 154, 155, 156, 157, 162, 163, 164, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 181], "excluded_lines": []}, "nemo/collections/tts/losses/hifigan_losses.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 53, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 53, "excluded_lines": 0}, "missing_lines": [41, 43, 44, 45, 48, 51, 52, 53, 58, 59, 60, 64, 65, 66, 67, 68, 69, 71, 74, 77, 78, 79, 84, 85, 86, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 107, 110, 111, 112, 116, 117, 118, 123, 124, 125, 126, 127, 128, 129, 130, 132], "excluded_lines": []}, "nemo/collections/tts/losses/radttsloss.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 105, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 105, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 23, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 37, 39, 40, 42, 44, 45, 46, 47, 50, 51, 52, 53, 55, 56, 58, 59, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 97, 101, 102, 103, 104, 106, 107, 109, 112, 113, 114, 116, 117, 118, 121, 122, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 149, 150, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 175, 176, 178, 179, 181, 182, 183, 184, 185, 186, 187, 189], "excluded_lines": []}, "nemo/collections/tts/losses/spectrogram_enhancer_losses.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 32, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 32, "excluded_lines": 0}, "missing_lines": [39, 40, 41, 42, 44, 47, 54, 55, 56, 58, 59, 60, 69, 70, 73, 74, 75, 78, 79, 80, 83, 89, 90, 91, 93, 94, 95, 97, 98, 100, 101, 102], "excluded_lines": []}, "nemo/collections/tts/losses/stftlosses.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 87, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 87, "excluded_lines": 0}, "missing_lines": [45, 46, 48, 49, 50, 53, 64, 65, 66, 69, 72, 75, 76, 77, 82, 83, 84, 88, 89, 100, 102, 103, 106, 109, 110, 111, 117, 118, 119, 123, 124, 133, 135, 136, 138, 139, 140, 142, 145, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 166, 167, 168, 173, 174, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 197, 200, 208, 209, 210, 211, 212, 214, 215, 216, 222, 223, 224, 229, 230, 240, 241, 242, 243, 244, 245, 247], "excluded_lines": []}, "nemo/collections/tts/losses/tacotron2loss.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 43, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 43, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 23, 26, 27, 28, 37, 38, 39, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 57, 59, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83], "excluded_lines": []}, "nemo/collections/tts/losses/vits_losses.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 77, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 77, "excluded_lines": 0}, "missing_lines": [40, 42, 43, 44, 47, 48, 49, 50, 58, 59, 60, 64, 65, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 88, 89, 90, 95, 96, 97, 101, 102, 106, 107, 108, 109, 110, 111, 113, 116, 119, 120, 121, 126, 127, 128, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 151, 154, 155, 156, 160, 161, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177], "excluded_lines": []}, "nemo/collections/tts/losses/waveglowloss.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 21, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 21, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 18, 21, 25, 26, 27, 34, 35, 36, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51], "excluded_lines": []}, "nemo/collections/tts/models/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 15, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 15, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30], "excluded_lines": []}, "nemo/collections/tts/models/aligner.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 133, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 133, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 33, 34, 35, 37, 38, 39, 40, 41, 44, 47, 49, 50, 53, 54, 55, 56, 59, 60, 61, 63, 64, 65, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 89, 90, 92, 93, 94, 95, 99, 100, 101, 103, 104, 105, 107, 112, 116, 118, 119, 123, 124, 128, 130, 132, 133, 134, 141, 143, 144, 146, 147, 149, 150, 151, 152, 154, 156, 157, 160, 161, 162, 164, 165, 167, 168, 169, 170, 174, 176, 180, 182, 183, 184, 185, 189, 192, 193, 194, 196, 197, 198, 207, 216, 218, 223, 225, 226, 227, 228, 229, 230, 232, 238, 242, 243, 245, 246, 248, 250, 252, 253, 259, 262, 268, 271, 277, 279], "excluded_lines": []}, "nemo/collections/tts/models/audio_codec.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 294, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 294, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 57, 60, 63, 66, 67, 68, 69, 74, 77, 78, 79, 81, 83, 84, 86, 88, 89, 90, 92, 93, 96, 97, 100, 103, 106, 107, 108, 109, 110, 111, 119, 120, 121, 124, 125, 126, 127, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 144, 145, 147, 149, 150, 153, 156, 157, 159, 169, 180, 181, 182, 184, 194, 205, 206, 208, 215, 226, 227, 230, 232, 233, 235, 242, 252, 253, 256, 257, 258, 260, 270, 282, 284, 285, 287, 297, 309, 311, 313, 315, 325, 335, 337, 339, 341, 344, 346, 348, 360, 361, 362, 363, 364, 366, 368, 370, 371, 374, 376, 377, 379, 380, 381, 383, 384, 386, 389, 391, 393, 394, 397, 399, 403, 404, 406, 407, 409, 411, 416, 418, 421, 422, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 453, 455, 456, 457, 458, 460, 461, 462, 463, 465, 466, 467, 469, 471, 472, 473, 475, 477, 478, 480, 481, 483, 484, 486, 487, 488, 489, 492, 494, 502, 504, 505, 506, 508, 509, 510, 511, 512, 514, 516, 517, 519, 520, 521, 524, 526, 527, 528, 529, 531, 532, 533, 537, 545, 546, 550, 551, 556, 557, 559, 560, 562, 563, 564, 565, 567, 568, 570, 571, 572, 582, 583, 585, 586, 587, 589, 590, 591, 593, 594, 596, 597, 598, 600, 601, 602, 603, 605, 609, 613, 615, 617, 618, 619, 620, 621, 622, 624, 625, 626, 628, 629, 630, 631, 642, 644, 645, 646, 648, 653, 655], "excluded_lines": []}, "nemo/collections/tts/models/base.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 150, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 150, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 29, 32, 35, 36, 45, 46, 57, 58, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 90, 91, 102, 103, 109, 110, 111, 112, 113, 114, 117, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 165, 166, 174, 175, 177, 180, 188, 189, 190, 191, 192, 198, 199, 201, 202, 203, 204, 205, 207, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 228, 229, 240, 241, 247, 248, 249, 250, 251, 252, 255, 258, 259, 266, 267, 276, 277, 283, 284, 285, 286, 287, 288, 291, 292, 293, 315, 324, 325, 326, 327, 328, 329, 330, 332, 333, 335, 336, 343, 344], "excluded_lines": []}, "nemo/collections/tts/models/fastpitch.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 419, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 419, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 40, 41, 42, 52, 53, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 81, 84, 86, 87, 90, 91, 92, 93, 95, 98, 99, 100, 102, 103, 104, 109, 111, 112, 113, 114, 116, 117, 118, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 185, 186, 191, 192, 194, 197, 199, 200, 201, 203, 204, 205, 207, 208, 211, 212, 214, 215, 216, 217, 221, 222, 223, 225, 226, 228, 230, 235, 239, 241, 242, 246, 247, 252, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 275, 276, 278, 287, 289, 290, 291, 293, 294, 296, 297, 298, 299, 302, 303, 305, 307, 308, 310, 327, 343, 358, 359, 367, 368, 369, 370, 371, 380, 382, 383, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 416, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 473, 479, 480, 483, 484, 485, 488, 489, 493, 495, 496, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 522, 523, 524, 525, 530, 544, 545, 547, 548, 549, 550, 551, 553, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 581, 582, 588, 589, 592, 593, 595, 596, 597, 598, 600, 601, 603, 604, 608, 609, 610, 611, 613, 614, 616, 618, 619, 620, 621, 622, 623, 624, 625, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 641, 642, 649, 651, 653, 654, 655, 657, 659, 660, 661, 663, 665, 667, 669, 670, 671, 673, 674, 675, 677, 679, 680, 681, 692, 694, 695, 701, 704, 710, 713, 719, 722, 728, 731, 737, 740, 746, 749, 755, 758, 764, 768, 776, 781, 790, 792, 795, 796, 798, 801, 809, 816, 817, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 838, 839, 840, 842, 848, 849, 850, 851, 852, 854, 855, 856, 859, 860, 861, 863, 876, 877, 881, 882, 883, 887, 890, 893, 894], "excluded_lines": []}, "nemo/collections/tts/models/fastpitch_ssl.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 224, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 224, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 41, 43, 44, 46, 48, 49, 50, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 73, 75, 76, 77, 78, 80, 82, 83, 84, 86, 88, 89, 91, 92, 95, 97, 107, 108, 110, 112, 113, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 138, 140, 144, 145, 146, 147, 148, 152, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 176, 177, 179, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 200, 201, 203, 209, 210, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 230, 231, 233, 237, 239, 249, 250, 251, 253, 254, 255, 256, 258, 260, 261, 262, 263, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 277, 279, 280, 281, 287, 288, 292, 293, 294, 296, 303, 304, 305, 307, 308, 309, 311, 335, 336, 337, 339, 340, 341, 342, 344, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 359, 361, 364, 366, 368, 369, 370, 371, 372, 374, 376, 377, 379, 381, 382, 384, 385, 387, 389, 391, 392, 393], "excluded_lines": []}, "nemo/collections/tts/models/hifigan.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 280, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 280, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 43, 48, 50, 51, 52, 54, 56, 58, 59, 60, 61, 62, 63, 64, 66, 68, 69, 71, 72, 73, 75, 76, 77, 80, 82, 83, 84, 85, 87, 88, 90, 91, 93, 103, 104, 105, 106, 108, 109, 111, 113, 114, 116, 117, 118, 120, 121, 122, 123, 125, 126, 128, 129, 135, 136, 137, 138, 139, 140, 142, 146, 150, 152, 154, 155, 156, 157, 158, 159, 161, 162, 166, 168, 172, 173, 175, 176, 179, 180, 182, 183, 185, 188, 189, 190, 193, 194, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 228, 229, 231, 232, 234, 235, 237, 239, 240, 241, 242, 244, 247, 249, 250, 252, 253, 254, 255, 272, 286, 287, 294, 296, 297, 298, 299, 300, 302, 303, 304, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 326, 327, 328, 329, 331, 332, 333, 334, 336, 338, 339, 340, 341, 344, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 362, 363, 364, 365, 366, 367, 369, 370, 372, 373, 374, 376, 378, 379, 380, 382, 384, 385, 387, 388, 389, 391, 392, 393, 395, 396, 397, 398, 409, 411, 412, 413, 414, 422, 424, 431, 433, 440, 442, 449, 452, 460, 463, 471, 474, 482, 485, 494, 498, 506, 508, 510, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 527, 528, 529, 530, 531, 532, 534, 535, 536, 540, 541, 542, 546, 552, 553, 554, 556, 560], "excluded_lines": []}, "nemo/collections/tts/models/mixer_tts.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 321, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 321, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 34, 35, 36, 37, 44, 45, 46, 56, 57, 60, 63, 65, 66, 69, 70, 71, 72, 75, 76, 77, 79, 80, 81, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 105, 106, 108, 112, 113, 115, 117, 118, 119, 121, 123, 124, 126, 127, 128, 130, 131, 135, 136, 138, 139, 140, 141, 145, 146, 147, 149, 150, 151, 153, 158, 162, 164, 165, 169, 170, 174, 176, 178, 179, 180, 182, 183, 185, 186, 188, 192, 194, 195, 196, 198, 202, 203, 204, 206, 210, 225, 226, 227, 230, 231, 232, 234, 235, 236, 238, 239, 240, 242, 245, 246, 247, 249, 252, 253, 254, 255, 256, 257, 258, 261, 262, 264, 266, 268, 269, 270, 271, 274, 275, 276, 277, 279, 300, 301, 302, 304, 306, 309, 310, 311, 315, 316, 317, 322, 323, 326, 329, 330, 331, 332, 334, 336, 337, 339, 341, 342, 345, 347, 348, 350, 361, 373, 374, 376, 379, 380, 381, 385, 386, 387, 392, 393, 396, 397, 398, 400, 401, 404, 406, 407, 409, 410, 411, 413, 415, 417, 418, 420, 422, 423, 426, 427, 428, 430, 431, 433, 434, 435, 436, 438, 440, 443, 444, 445, 447, 457, 472, 483, 485, 486, 487, 488, 490, 492, 495, 496, 497, 499, 509, 525, 535, 550, 561, 563, 564, 565, 566, 567, 578, 591, 598, 600, 610, 619, 620, 622, 624, 625, 627, 628, 633, 635, 636, 637, 639, 640, 641, 643, 647, 648, 650, 651, 655, 656, 658, 663, 664, 666, 667, 669, 670, 671, 672, 673, 675, 676, 677, 679, 680, 681, 683, 684, 685, 686, 687, 688, 690, 696, 700, 701, 703, 704, 706, 708, 710, 711, 717, 718, 724, 726, 732, 734, 737, 738, 739, 744, 745, 746, 750, 751, 755, 757, 758, 766, 768, 769, 770, 771], "excluded_lines": []}, "nemo/collections/tts/models/radtts.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 274, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 274, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 32, 33, 34, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 62, 63, 65, 66, 68, 69, 70, 71, 72, 73, 83, 84, 85, 86, 87, 88, 89, 97, 98, 99, 100, 101, 103, 104, 105, 106, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 141, 144, 146, 158, 160, 161, 162, 163, 165, 166, 167, 169, 170, 172, 173, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 197, 198, 210, 212, 213, 214, 215, 217, 222, 223, 225, 226, 228, 234, 235, 237, 239, 241, 242, 243, 245, 246, 248, 255, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 277, 278, 280, 281, 283, 285, 286, 287, 288, 289, 290, 292, 298, 302, 303, 305, 306, 308, 310, 312, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 334, 336, 337, 338, 340, 345, 349, 351, 352, 356, 357, 361, 363, 364, 365, 366, 368, 369, 371, 372, 374, 375, 377, 378, 379, 381, 382, 386, 387, 389, 390, 391, 392, 393, 396, 397, 398, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 432, 433, 434, 435, 436, 437, 440, 441, 442, 444, 445, 446, 448, 449, 450, 452, 455, 464, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 481, 484, 495, 497, 500, 501, 504, 505, 507, 509, 521, 523, 525, 526, 527, 534, 535, 536], "excluded_lines": []}, "nemo/collections/tts/models/spectrogram_enhancer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 146, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 146, "excluded_lines": 0}, "missing_lines": [39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 51, 57, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 77, 78, 79, 81, 82, 84, 85, 86, 87, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 111, 113, 114, 115, 117, 118, 119, 120, 122, 130, 147, 157, 185, 188, 189, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 207, 210, 211, 212, 213, 215, 217, 218, 220, 221, 222, 225, 226, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 242, 245, 246, 250, 251, 253, 254, 255, 257, 258, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 276, 282, 284, 285, 286, 291, 300, 302, 304, 305, 306, 308, 309, 311, 312, 313, 315, 316, 317, 327, 328, 330, 331, 332, 333, 334, 335, 336, 338], "excluded_lines": []}, "nemo/collections/tts/models/ssl_tts.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 276, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 276, "excluded_lines": 0}, "missing_lines": [14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 48, 49, 50, 51, 52, 53, 55, 56, 58, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 84, 87, 89, 91, 92, 95, 97, 99, 100, 107, 109, 114, 116, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 145, 146, 148, 150, 151, 152, 161, 170, 171, 182, 192, 194, 195, 197, 198, 200, 201, 203, 204, 205, 207, 208, 209, 211, 212, 213, 215, 216, 226, 228, 234, 239, 245, 250, 252, 254, 256, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 276, 277, 278, 281, 283, 291, 294, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 324, 325, 327, 328, 329, 330, 331, 332, 334, 338, 340, 341, 342, 344, 346, 347, 348, 349, 350, 354, 357, 358, 359, 361, 365, 367, 368, 370, 371, 372, 373, 374, 376, 378, 380, 381, 382, 383, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 436, 439, 440, 442, 444, 445, 446, 449, 450, 451, 452, 455, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496], "excluded_lines": []}, "nemo/collections/tts/models/tacotron2.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 208, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 208, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 35, 36, 44, 45, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 70, 71, 74, 75, 76, 77, 80, 81, 82, 84, 85, 86, 89, 91, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 138, 140, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 156, 158, 159, 160, 162, 163, 164, 165, 172, 179, 180, 181, 182, 189, 198, 199, 200, 201, 203, 204, 208, 209, 211, 212, 216, 220, 222, 223, 225, 227, 231, 232, 233, 234, 235, 236, 238, 240, 241, 242, 243, 245, 247, 248, 249, 253, 262, 267, 269, 270, 271, 275, 283, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 310, 311, 319, 322, 323, 325, 326, 327, 329, 330, 334, 335, 337, 338, 339, 340, 344, 345, 346, 348, 349, 350, 352, 357, 361, 363, 364, 368, 369, 373, 375, 377, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 395, 402, 404, 405, 407, 408, 410, 411, 417, 418, 425, 426], "excluded_lines": []}, "nemo/collections/tts/models/two_stages.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 128, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 128, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 51, 52, 54, 55, 57, 58, 59, 62, 63, 64, 65, 67, 69, 70, 71, 73, 74, 76, 77, 78, 80, 81, 83, 84, 85, 86, 88, 90, 91, 93, 94, 96, 97, 100, 101, 102, 103, 106, 109, 111, 112, 114, 116, 118, 119, 120, 121, 123, 125, 126, 128, 130, 131, 133, 135, 136, 138, 139, 141, 142, 143, 144, 146, 147, 148, 152, 153, 154, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 177, 179, 180, 182, 183, 185, 186, 188, 189, 191, 192, 194, 195, 197, 198, 204, 205], "excluded_lines": []}, "nemo/collections/tts/models/univnet.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 211, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 211, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 43, 46, 48, 49, 51, 53, 55, 56, 59, 60, 62, 63, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 80, 82, 83, 93, 94, 95, 96, 98, 99, 101, 102, 104, 106, 107, 109, 110, 111, 114, 115, 117, 118, 120, 121, 122, 123, 125, 131, 132, 133, 134, 135, 137, 141, 145, 147, 149, 150, 154, 156, 160, 161, 163, 164, 166, 168, 169, 171, 173, 174, 176, 179, 180, 181, 184, 185, 188, 189, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 219, 220, 222, 223, 224, 225, 227, 228, 229, 232, 233, 235, 236, 237, 238, 240, 243, 244, 245, 246, 247, 264, 278, 279, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 303, 304, 305, 306, 308, 309, 310, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 342, 343, 345, 346, 347, 348, 354, 356, 362, 364, 367, 368, 369, 370, 371, 372, 374, 375, 376, 380, 381, 382, 386, 392, 393, 394, 396, 400], "excluded_lines": []}, "nemo/collections/tts/models/vits.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 207, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 207, "excluded_lines": 0}, "missing_lines": [16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 69, 71, 72, 74, 76, 78, 79, 80, 81, 83, 91, 93, 95, 96, 97, 99, 100, 104, 105, 107, 108, 109, 110, 111, 114, 115, 117, 118, 119, 121, 126, 130, 132, 133, 137, 138, 142, 144, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 159, 161, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 174, 175, 178, 182, 184, 185, 186, 188, 191, 201, 202, 203, 212, 214, 215, 216, 217, 219, 221, 223, 224, 228, 230, 232, 233, 235, 236, 238, 239, 242, 245, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 270, 271, 272, 273, 278, 279, 281, 293, 294, 296, 297, 299, 300, 302, 304, 305, 306, 307, 309, 311, 313, 314, 316, 317, 320, 321, 323, 324, 325, 336, 349, 351, 352, 353, 354, 355, 356, 358, 364, 368, 370, 377, 379, 382, 384, 385, 387, 388, 390, 392, 394, 395, 396, 397, 404, 405, 411, 412, 414, 418, 419, 420], "excluded_lines": []}, "nemo/collections/tts/models/waveglow.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 129, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 129, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 34, 35, 38, 41, 43, 44, 46, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 77, 86, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 102, 103, 108, 110, 111, 112, 113, 116, 117, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 168, 169, 171, 172, 178, 179, 186, 187, 189, 193, 194, 195, 196, 199, 200, 201, 203, 204, 205, 207, 208, 209, 211, 212, 213, 219, 220, 221, 222, 227, 228, 229, 230, 231, 232, 236, 237], "excluded_lines": []}, "nemo/collections/tts/modules/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 5, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 5, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19], "excluded_lines": []}, "nemo/collections/tts/modules/adapters.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 88, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 88, "excluded_lines": 0}, "missing_lines": [15, 17, 19, 20, 21, 22, 23, 26, 29, 30, 31, 32, 34, 35, 37, 38, 39, 41, 42, 43, 44, 46, 47, 49, 50, 51, 54, 59, 62, 65, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 104, 105, 108, 111, 112, 113, 114, 116, 117, 119, 120, 121, 123, 124, 125, 126, 128, 129, 131, 132, 133, 136, 137, 138, 140, 141, 143, 144, 146, 147], "excluded_lines": []}, "nemo/collections/tts/modules/aligner.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 83, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 83, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 20, 21, 24, 38, 47, 48, 49, 50, 51, 53, 59, 66, 67, 68, 69, 71, 73, 74, 75, 76, 78, 79, 81, 93, 95, 97, 99, 101, 103, 104, 105, 106, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 130, 131, 132, 133, 135, 136, 147, 148, 150, 153, 154, 155, 165, 167, 168, 180, 182, 183, 186, 188, 190, 193, 194, 196, 198, 211, 213, 215, 217, 218, 220, 221, 223, 225, 227, 228], "excluded_lines": []}, "nemo/collections/tts/modules/attribute_prediction_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 71, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 71, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 29, 31, 33, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106], "excluded_lines": []}, "nemo/collections/tts/modules/audio_codec_modules.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 540, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 540, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 37, 38, 41, 42, 45, 46, 47, 50, 51, 54, 55, 56, 57, 60, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 82, 85, 86, 95, 96, 97, 98, 107, 109, 110, 111, 116, 117, 118, 122, 123, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 145, 147, 148, 149, 154, 155, 156, 160, 161, 163, 164, 165, 166, 167, 170, 171, 179, 180, 181, 182, 191, 193, 194, 195, 199, 200, 201, 205, 206, 208, 209, 210, 213, 224, 225, 226, 227, 228, 237, 239, 240, 241, 245, 246, 247, 252, 253, 255, 256, 258, 259, 260, 261, 263, 265, 266, 268, 269, 270, 272, 273, 274, 276, 279, 286, 287, 288, 292, 293, 294, 299, 300, 301, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 325, 330, 331, 332, 334, 335, 336, 341, 342, 343, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 366, 367, 368, 369, 374, 375, 376, 381, 382, 383, 384, 386, 393, 394, 395, 397, 404, 405, 406, 409, 421, 422, 426, 427, 428, 431, 432, 433, 436, 438, 439, 440, 441, 442, 444, 445, 447, 449, 450, 452, 454, 455, 459, 461, 462, 467, 469, 471, 473, 474, 476, 477, 481, 483, 484, 488, 489, 491, 494, 496, 498, 500, 502, 503, 505, 512, 514, 516, 518, 519, 520, 522, 525, 526, 528, 531, 532, 534, 537, 538, 542, 544, 545, 548, 549, 553, 554, 558, 559, 561, 563, 564, 567, 568, 570, 577, 580, 581, 583, 590, 593, 595, 599, 601, 603, 605, 607, 608, 611, 626, 627, 629, 630, 633, 637, 638, 639, 640, 641, 643, 644, 647, 649, 650, 652, 654, 655, 657, 659, 660, 663, 665, 667, 668, 669, 670, 673, 676, 678, 680, 687, 690, 691, 693, 694, 695, 698, 700, 702, 709, 712, 713, 715, 716, 717, 720, 722, 725, 738, 747, 749, 750, 751, 752, 755, 757, 758, 759, 761, 762, 763, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 791, 792, 794, 807, 808, 809, 811, 812, 813, 818, 819, 820, 822, 823, 824, 825, 826, 827, 830, 843, 844, 846, 853, 854, 855, 857, 858, 859, 864, 865, 866, 868, 869, 870, 871, 872, 875, 894, 905, 906, 908, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 924, 927, 928, 930, 936, 938, 939, 940, 942, 943, 944, 949, 950, 951, 956, 957, 958, 959, 960, 961, 963, 964, 965, 967, 968, 971, 972, 974, 975, 977, 979, 980, 981, 982, 985, 990, 991, 992, 993, 994, 1015, 1016, 1017, 1022, 1023, 1024, 1029, 1030, 1031, 1032, 1035, 1051, 1062, 1064, 1065, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1107, 1117, 1118, 1119, 1120, 1122, 1123, 1125, 1126, 1127, 1132, 1133, 1134, 1139, 1140, 1141, 1142, 1143, 1146, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1168, 1169, 1170, 1171, 1172, 1174, 1175, 1176, 1178, 1180, 1181, 1182, 1184, 1185, 1186, 1191, 1192, 1193, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1208, 1209], "excluded_lines": []}, "nemo/collections/tts/modules/common.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 416, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 416, "excluded_lines": 0}, "missing_lines": [17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 35, 36, 37, 38, 39, 40, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 82, 84, 85, 86, 87, 89, 91, 92, 93, 95, 96, 99, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 117, 118, 129, 130, 131, 133, 134, 136, 138, 139, 151, 152, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 170, 173, 176, 187, 188, 189, 191, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 225, 232, 233, 234, 237, 240, 241, 242, 243, 245, 247, 249, 250, 252, 253, 254, 255, 258, 259, 260, 263, 264, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 299, 301, 303, 304, 305, 307, 311, 313, 314, 315, 317, 318, 321, 326, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 356, 357, 358, 359, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 390, 391, 395, 396, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 431, 444, 446, 447, 449, 451, 453, 454, 455, 457, 459, 461, 462, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 480, 481, 482, 483, 485, 486, 487, 488, 491, 492, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 527, 539, 540, 543, 544, 547, 548, 550, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 570, 573, 574, 575, 576, 578, 579, 580, 583, 586, 587, 600, 601, 602, 603, 604, 605, 607, 608, 610, 611, 612, 613, 621, 622, 632, 637, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 678, 680, 681, 682, 683, 684, 685, 686, 687, 689, 694, 695, 696, 698, 699, 700, 701, 703, 704, 705, 708, 709, 710, 711, 712, 713, 714, 716, 722, 730, 745, 746, 748, 752, 755, 756, 757, 758, 760, 762, 763, 765, 766, 769, 783, 784, 785, 787, 788, 789, 791, 792, 793], "excluded_lines": []}, "nemo/collections/tts/modules/encodec_modules.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 452, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 452, "excluded_lines": 0}, "missing_lines": [38, 40, 41, 42, 43, 44, 46, 47, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 82, 83, 84, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 117, 118, 123, 124, 125, 129, 130, 131, 133, 136, 137, 139, 140, 142, 143, 146, 147, 159, 160, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 185, 186, 188, 189, 190, 192, 193, 194, 199, 200, 201, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 224, 225, 227, 229, 231, 232, 234, 235, 238, 239, 251, 252, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 275, 277, 278, 279, 281, 282, 283, 288, 289, 290, 295, 296, 297, 298, 299, 300, 302, 303, 304, 306, 307, 308, 311, 312, 314, 315, 317, 319, 320, 321, 322, 325, 326, 327, 329, 330, 331, 333, 342, 344, 346, 356, 358, 359, 361, 362, 363, 367, 368, 369, 374, 375, 376, 379, 380, 382, 383, 384, 386, 387, 388, 390, 393, 394, 395, 396, 398, 399, 400, 405, 406, 407, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 426, 427, 428, 430, 433, 434, 437, 438, 439, 440, 443, 454, 455, 456, 459, 472, 473, 475, 476, 478, 480, 483, 495, 497, 499, 501, 503, 506, 507, 509, 510, 513, 514, 515, 516, 518, 521, 531, 532, 533, 534, 537, 538, 553, 561, 562, 564, 565, 567, 569, 571, 572, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 592, 593, 595, 596, 597, 599, 600, 601, 602, 604, 606, 607, 608, 610, 611, 613, 614, 616, 617, 618, 619, 621, 623, 625, 626, 628, 630, 631, 633, 634, 635, 640, 641, 642, 647, 648, 649, 650, 652, 654, 656, 658, 660, 661, 663, 664, 665, 667, 674, 675, 677, 679, 680, 681, 683, 687, 689, 690, 691, 694, 710, 719, 720, 721, 723, 737, 738, 739, 745, 746, 747, 748, 750, 751, 752, 753, 755, 756, 758, 763, 765, 766, 768, 770, 771, 774, 775, 776, 778, 785, 786, 787, 788, 790, 792, 793, 794, 796, 797, 799, 806, 808, 809, 810, 811, 812, 813, 816, 829, 830, 832, 833, 834, 837, 846, 847, 848, 849, 850, 851, 853, 854, 857, 858, 862, 864, 865, 868, 869, 871, 874, 875, 876, 882, 883, 886, 888, 889, 891, 892, 893, 894, 895, 898, 901, 903, 905, 912, 915, 916, 918, 919, 920, 923, 925, 927, 934, 937, 938, 940, 941, 942, 945, 947], "excluded_lines": []}, "nemo/collections/tts/modules/fastpitch.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 214, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 214, "excluded_lines": 0}, "missing_lines": [45, 47, 48, 49, 50, 62, 65, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 79, 80, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 104, 107, 110, 111, 112, 113, 114, 115, 125, 128, 130, 131, 132, 138, 139, 140, 144, 145, 146, 147, 149, 150, 152, 153, 154, 157, 158, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 193, 194, 196, 198, 199, 201, 208, 209, 217, 218, 220, 222, 223, 224, 239, 240, 241, 256, 258, 259, 260, 261, 262, 263, 265, 267, 269, 270, 287, 288, 289, 292, 300, 303, 304, 308, 309, 310, 311, 314, 315, 318, 319, 320, 322, 323, 325, 326, 328, 330, 333, 334, 336, 338, 339, 341, 342, 343, 344, 345, 347, 348, 350, 352, 353, 355, 356, 357, 358, 360, 361, 363, 368, 369, 370, 385, 398, 406, 409, 410, 413, 414, 415, 417, 418, 419, 420, 422, 423, 424, 427, 428, 429, 430, 431, 434, 435, 436, 446, 447, 459, 461, 462, 463, 464, 466, 467, 469, 470, 478, 479, 481, 483, 484, 485, 493, 494, 495, 504, 505, 507, 508, 509, 510, 518, 519, 520, 521, 522, 525, 527, 529, 531, 533, 534, 537, 538, 541, 542, 543], "excluded_lines": []}, "nemo/collections/tts/modules/hifigan_modules.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 214, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 214, "excluded_lines": 0}, "missing_lines": [41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 55, 56, 57, 58, 61, 62, 65, 66, 68, 69, 70, 71, 105, 107, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 141, 142, 143, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 179, 182, 183, 185, 196, 197, 198, 199, 200, 201, 203, 204, 205, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 233, 237, 238, 239, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 274, 275, 276, 285, 287, 288, 289, 293, 294, 295, 300, 301, 302, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 323, 324, 325, 326, 336, 337, 338, 343, 344, 345, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 369, 370, 371, 372, 373, 374, 385, 387, 388, 389, 393, 394, 395, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 414, 415, 416, 417, 424, 426, 427, 428, 433, 434, 435, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459], "excluded_lines": []}, "nemo/collections/tts/modules/mixer_tts.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 112, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 112, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 21, 24, 25, 26, 27, 30, 31, 32, 34, 44, 45, 46, 49, 50, 51, 52, 54, 55, 56, 59, 60, 63, 64, 66, 67, 68, 69, 71, 73, 77, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 112, 113, 115, 128, 137, 138, 139, 140, 143, 144, 155, 157, 158, 160, 161, 164, 170, 172, 173, 174, 176, 177, 178, 180, 182, 185, 188, 189, 191, 192, 194, 200, 206, 212, 214, 226, 227, 229, 230, 232, 233, 235, 236, 238, 239, 240, 242, 243, 244, 246, 248, 249, 251], "excluded_lines": []}, "nemo/collections/tts/modules/monotonic_align/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [37], "excluded_lines": []}, "nemo/collections/tts/modules/monotonic_align/numba_core.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 37, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 37, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 21, 26, 27, 28, 29, 31, 32, 33, 34, 37, 38, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 61, 62, 64, 65, 66, 67, 70, 71, 79, 80, 81, 84, 85], "excluded_lines": []}, "nemo/collections/tts/modules/radtts.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 403, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 403, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 18, 19, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 70, 71, 82, 83, 84, 86, 88, 98, 99, 100, 101, 102, 104, 105, 106, 109, 138, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 204, 206, 207, 208, 210, 211, 212, 213, 214, 216, 220, 221, 227, 229, 230, 231, 233, 234, 235, 236, 238, 251, 252, 253, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 271, 272, 274, 275, 276, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 292, 293, 297, 299, 303, 306, 310, 314, 315, 317, 318, 319, 320, 322, 324, 326, 327, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 348, 349, 350, 352, 353, 354, 356, 357, 359, 361, 368, 369, 370, 372, 380, 381, 382, 383, 385, 387, 393, 394, 395, 396, 397, 398, 399, 400, 402, 408, 409, 410, 411, 413, 415, 420, 421, 422, 423, 424, 425, 426, 427, 429, 442, 443, 445, 446, 447, 449, 451, 455, 456, 457, 459, 461, 463, 467, 469, 470, 471, 472, 473, 476, 477, 481, 484, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 503, 504, 505, 506, 509, 510, 515, 516, 517, 518, 519, 520, 523, 524, 526, 528, 530, 538, 539, 540, 541, 543, 545, 546, 547, 549, 550, 551, 553, 554, 556, 557, 559, 560, 561, 565, 569, 583, 585, 604, 605, 606, 607, 609, 611, 613, 615, 616, 617, 618, 619, 620, 621, 623, 625, 626, 627, 628, 630, 631, 633, 635, 638, 639, 641, 642, 643, 645, 646, 647, 649, 651, 653, 655, 656, 658, 660, 661, 662, 664, 665, 667, 669, 670, 675, 677, 678, 685, 687, 691, 692, 693, 696, 697, 698, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 712, 713, 715, 717, 718, 721, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 739, 741, 742, 743, 745, 746, 749, 750, 752, 753, 754, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 788, 789, 790], "excluded_lines": []}, "nemo/collections/tts/modules/spectrogram_enhancer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 209, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 209, "excluded_lines": 0}, "missing_lines": [39, 40, 41, 42, 44, 45, 46, 47, 49, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 71, 73, 74, 77, 78, 79, 81, 82, 83, 85, 87, 88, 89, 92, 93, 94, 95, 96, 98, 99, 101, 107, 108, 109, 111, 112, 114, 115, 117, 120, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 146, 147, 148, 150, 151, 152, 154, 156, 157, 159, 160, 162, 163, 166, 167, 170, 171, 173, 174, 175, 177, 178, 179, 181, 182, 184, 185, 186, 188, 189, 190, 192, 193, 194, 196, 197, 198, 200, 201, 204, 205, 206, 207, 209, 216, 222, 223, 224, 225, 226, 227, 228, 231, 232, 235, 236, 237, 238, 239, 241, 243, 245, 246, 247, 248, 250, 252, 253, 255, 256, 257, 259, 262, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 277, 278, 280, 281, 282, 284, 287, 290, 291, 293, 295, 296, 297, 299, 300, 302, 304, 305, 307, 308, 310, 311, 313, 316, 317, 320, 321, 322, 324, 325, 327, 328, 329, 331, 333, 334, 336, 337, 339, 341, 342, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 357, 359, 360, 362, 363, 364, 365], "excluded_lines": []}, "nemo/collections/tts/modules/ssl_tts.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 12, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 12, "excluded_lines": 0}, "missing_lines": [14, 17, 18, 19, 20, 21, 23, 31, 32, 33, 34, 35], "excluded_lines": []}, "nemo/collections/tts/modules/submodules.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 384, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 384, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 29, 32, 33, 34, 35, 38, 45, 46, 47, 48, 49, 51, 54, 66, 74, 76, 77, 80, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 112, 113, 114, 115, 117, 119, 120, 121, 122, 124, 126, 129, 130, 131, 132, 134, 136, 137, 140, 141, 142, 144, 158, 159, 160, 161, 162, 163, 164, 165, 166, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 198, 201, 202, 203, 204, 205, 214, 216, 217, 218, 219, 220, 223, 224, 232, 233, 234, 235, 236, 239, 241, 253, 254, 255, 257, 258, 260, 272, 274, 275, 277, 278, 279, 281, 284, 285, 286, 287, 288, 289, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 322, 323, 324, 327, 330, 331, 332, 333, 334, 336, 337, 338, 342, 345, 346, 347, 348, 349, 353, 354, 355, 356, 357, 363, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 385, 386, 387, 388, 390, 391, 393, 394, 395, 396, 397, 398, 401, 402, 404, 405, 406, 407, 409, 410, 411, 412, 414, 416, 417, 418, 424, 425, 426, 427, 429, 431, 434, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 456, 457, 460, 461, 462, 467, 468, 470, 473, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 493, 499, 500, 501, 506, 507, 508, 509, 511, 512, 513, 514, 516, 519, 520, 521, 523, 524, 525, 534, 536, 537, 538, 543, 544, 545, 549, 550, 551, 552, 554, 555, 556, 559, 560, 561, 562, 565, 566, 568, 569, 570, 573, 574, 576, 577, 578, 579, 582, 587, 588, 589, 590, 604, 605, 609, 610, 611, 616, 617, 618, 622, 624, 625, 626, 628, 629, 630, 631, 634, 636, 637, 638, 639, 640, 641, 643, 644, 646, 647, 648, 650, 651, 654, 657, 660, 665, 668, 669, 670, 674, 675, 676, 681, 682, 683, 687, 688, 689, 690, 693, 698, 699, 700, 702, 703, 706, 712, 718, 721, 724, 726, 727, 729, 731, 732, 733, 740, 741, 742, 746, 747, 749, 750, 753, 754, 757, 758, 761, 762, 763, 764, 766, 768], "excluded_lines": []}, "nemo/collections/tts/modules/tacotron2.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 181, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 181, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 22, 29, 30, 33, 34, 45, 47, 48, 49, 61, 62, 64, 68, 69, 70, 75, 76, 77, 81, 82, 83, 84, 86, 89, 91, 95, 96, 98, 100, 103, 104, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 171, 173, 177, 179, 180, 181, 185, 186, 187, 189, 190, 191, 196, 197, 198, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 215, 216, 218, 219, 221, 222, 223, 225, 226, 227, 229, 231, 232, 236, 237, 239, 241, 245, 246, 248, 250, 252, 254, 256, 257, 259, 262, 264, 267, 271, 272, 274, 277, 279, 280, 282, 283, 285, 286, 287, 288, 289, 291, 293, 294, 295, 296, 298, 299, 300, 302, 303, 305, 306, 308, 309, 311, 313, 315, 316, 318, 319, 320, 321, 322, 324, 326, 327, 329, 330, 331, 333, 334, 335, 337, 338, 339, 341, 343, 345, 348, 349, 370, 371, 373, 388, 389, 404, 418, 420, 421, 422, 426, 427, 428, 432, 433, 434, 435, 436, 437, 439], "excluded_lines": []}, "nemo/collections/tts/modules/transformer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 172, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 172, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 18, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 42, 44, 46, 47, 48, 50, 53, 54, 55, 57, 58, 59, 61, 62, 64, 71, 72, 74, 75, 77, 78, 80, 81, 82, 85, 88, 89, 90, 93, 95, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 114, 115, 117, 118, 120, 122, 124, 126, 128, 129, 130, 132, 133, 134, 136, 137, 139, 140, 141, 142, 144, 145, 146, 148, 149, 152, 153, 155, 157, 160, 162, 165, 166, 167, 169, 170, 174, 175, 176, 177, 178, 180, 181, 182, 184, 187, 188, 202, 203, 204, 205, 207, 208, 209, 210, 212, 213, 227, 228, 229, 235, 236, 237, 242, 243, 244, 246, 247, 248, 249, 250, 251, 253, 254, 257, 260, 261, 278, 292, 293, 295, 296, 297, 302, 304, 307, 308, 321, 322, 323, 324, 325, 327, 328, 329, 331, 332, 336, 338, 340, 341, 343, 344, 346, 348, 349, 351, 352], "excluded_lines": []}, "nemo/collections/tts/modules/univnet_modules.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 252, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 252, "excluded_lines": 0}, "missing_lines": [49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 64, 84, 86, 87, 88, 89, 91, 92, 94, 99, 100, 101, 102, 119, 122, 126, 131, 132, 133, 134, 135, 136, 137, 138, 141, 143, 145, 146, 147, 148, 149, 150, 151, 154, 157, 170, 172, 173, 174, 176, 188, 202, 203, 204, 220, 229, 231, 232, 234, 235, 237, 238, 240, 243, 247, 249, 260, 261, 262, 264, 265, 266, 268, 269, 270, 273, 274, 275, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 289, 292, 293, 295, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 333, 337, 341, 347, 348, 349, 353, 354, 355, 359, 360, 362, 363, 365, 366, 368, 370, 372, 373, 374, 375, 376, 377, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 398, 400, 401, 402, 406, 407, 408, 413, 414, 415, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 491, 492, 493, 498, 499, 500, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 524, 525, 526, 528, 529, 530, 532, 534, 543, 545, 546, 547, 551, 552, 553, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 573, 574, 575, 576, 577, 580, 582, 585, 586, 587, 588, 589, 594, 596, 597, 598, 603, 604, 605, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626], "excluded_lines": []}, "nemo/collections/tts/modules/vits_modules.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 771, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 771, "excluded_lines": 0}, "missing_lines": [37, 39, 40, 41, 42, 44, 45, 46, 52, 54, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 115, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 182, 183, 186, 187, 189, 191, 192, 193, 195, 196, 197, 199, 200, 202, 203, 204, 205, 206, 208, 210, 211, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 249, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 266, 267, 270, 271, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 308, 309, 311, 312, 313, 314, 315, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 345, 346, 348, 349, 350, 352, 362, 363, 364, 365, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 491, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 516, 517, 519, 520, 521, 522, 524, 525, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 555, 557, 558, 559, 560, 562, 563, 564, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 594, 595, 606, 607, 608, 609, 610, 612, 613, 614, 626, 627, 628, 629, 630, 632, 633, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 679, 680, 682, 683, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 702, 705, 706, 707, 708, 709, 719, 720, 722, 723, 725, 726, 727, 728, 729, 730, 731, 733, 736, 737, 738, 739, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 761, 766, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 825, 835, 838, 840, 841, 843, 845, 846, 848, 849, 850, 851, 853, 855, 856, 858, 860, 861, 862, 865, 868, 869, 871, 872, 874, 875, 876, 877, 879, 880, 881, 884, 887, 891, 892, 893, 903, 904, 905, 906, 908, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 924, 928, 929, 930, 931, 934, 935, 936, 937, 938, 939, 940, 941, 942, 948, 949, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 980, 981, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 1000, 1001, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053, 1055, 1056, 1058, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1097, 1098, 1100, 1106, 1107, 1109, 1111, 1112, 1113, 1114, 1115, 1119, 1120, 1121, 1123, 1128, 1130, 1133, 1134, 1137, 1138, 1140, 1145, 1147, 1148, 1150, 1151, 1152, 1154, 1161, 1162, 1163, 1166, 1167, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1182, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1196, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214], "excluded_lines": []}, "nemo/collections/tts/modules/waveglow.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 133, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 133, "excluded_lines": 0}, "missing_lines": [14, 16, 18, 19, 20, 21, 28, 31, 32, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 108, 109, 111, 112, 115, 116, 117, 118, 120, 121, 124, 126, 128, 129, 131, 133, 134, 135, 136, 142, 150, 151, 152, 153, 160, 164, 170, 171, 172, 177, 179, 181, 182, 183, 184, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 214, 216, 217, 219, 220, 221, 223, 224, 226, 227, 228, 230, 231, 232, 234, 236, 237, 238, 240, 242, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262], "excluded_lines": []}, "nemo/collections/tts/parts/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/tts/parts/mixins/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [15], "excluded_lines": []}, "nemo/collections/tts/parts/mixins/fastpitch_adapter_mixins.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 140, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 140, "excluded_lines": 0}, "missing_lines": [15, 17, 19, 20, 23, 41, 47, 50, 51, 53, 54, 56, 59, 61, 64, 66, 67, 70, 71, 73, 81, 84, 87, 88, 90, 92, 93, 95, 97, 100, 102, 105, 107, 110, 112, 115, 117, 119, 126, 129, 130, 132, 133, 135, 138, 140, 143, 145, 146, 148, 150, 164, 167, 168, 170, 173, 174, 176, 178, 181, 182, 183, 186, 187, 188, 191, 192, 193, 196, 197, 198, 201, 202, 203, 205, 211, 214, 215, 217, 218, 220, 223, 225, 228, 230, 231, 233, 235, 237, 242, 245, 246, 247, 248, 253, 254, 260, 261, 262, 263, 268, 269, 275, 276, 277, 278, 283, 286, 292, 293, 294, 295, 300, 303, 309, 310, 311, 312, 317, 318, 323, 336, 339, 340, 342, 345, 347, 348, 349, 351, 353, 357, 358, 359, 360, 362, 363, 364, 365, 368], "excluded_lines": []}, "nemo/collections/tts/parts/preprocessing/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/tts/parts/preprocessing/audio_trimming.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 121, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 121, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 22, 23, 24, 27, 31, 32, 42, 45, 46, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91, 93, 101, 104, 105, 107, 108, 110, 118, 120, 123, 124, 154, 155, 156, 157, 158, 160, 161, 162, 163, 165, 166, 167, 169, 171, 172, 174, 175, 176, 179, 182, 185, 187, 191, 192, 193, 195, 196, 198, 200, 201, 202, 203, 204, 206, 207, 208, 211, 213, 215, 217, 219, 222, 223, 225, 226, 228, 229, 232, 233, 235, 236, 238, 240, 244, 252, 254, 257, 268, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 294, 307, 308, 309, 311, 312, 314], "excluded_lines": []}, "nemo/collections/tts/parts/preprocessing/feature_processors.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 78, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 78, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 22, 25, 26, 27, 28, 37, 38, 49, 50, 51, 53, 54, 55, 56, 59, 60, 73, 75, 76, 77, 78, 80, 82, 83, 85, 86, 88, 89, 91, 92, 94, 95, 97, 100, 101, 124, 125, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 140, 143, 144, 186, 187, 188, 189, 190, 191, 193, 194, 196, 197, 199, 200, 201, 202, 203, 205, 207, 208, 210, 212, 213, 214, 216], "excluded_lines": []}, "nemo/collections/tts/parts/preprocessing/features.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 199, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 199, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 31, 32, 33, 34, 45, 46, 59, 60, 66, 75, 76, 77, 80, 83, 84, 85, 86, 89, 90, 91, 94, 104, 105, 107, 110, 111, 114, 125, 126, 128, 131, 132, 133, 134, 135, 137, 138, 139, 142, 143, 144, 146, 147, 148, 149, 150, 153, 156, 157, 159, 160, 161, 162, 164, 165, 166, 169, 170, 185, 186, 187, 188, 189, 191, 212, 223, 224, 226, 227, 230, 232, 235, 237, 238, 240, 242, 243, 249, 251, 252, 260, 261, 262, 265, 273, 275, 276, 277, 278, 281, 282, 283, 284, 286, 298, 300, 301, 303, 304, 310, 312, 313, 321, 322, 323, 328, 336, 338, 339, 340, 341, 344, 369, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 401, 402, 404, 419, 420, 422, 423, 425, 426, 436, 437, 438, 439, 441, 442, 443, 445, 447, 448, 450, 452, 453, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 480, 481, 483, 485, 486, 492, 494, 495, 502, 509, 517, 518, 519, 522, 530, 538, 546, 548, 549, 550, 551, 552, 553], "excluded_lines": []}, "nemo/collections/tts/parts/utils/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/tts/parts/utils/callbacks.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 351, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 351, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 49, 50, 53, 54, 58, 59, 60, 62, 63, 64, 66, 68, 70, 71, 72, 73, 75, 77, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 111, 112, 113, 130, 131, 146, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 200, 201, 202, 204, 205, 206, 207, 209, 211, 213, 214, 218, 219, 220, 222, 225, 226, 228, 229, 231, 232, 234, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 253, 255, 257, 260, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 276, 277, 278, 280, 282, 285, 290, 294, 295, 296, 298, 299, 301, 303, 305, 306, 307, 308, 311, 312, 314, 316, 317, 318, 320, 321, 322, 323, 326, 328, 331, 336, 338, 340, 342, 344, 345, 346, 347, 349, 368, 369, 371, 373, 375, 377, 378, 379, 380, 383, 385, 387, 388, 389, 390, 393, 395, 397, 409, 411, 412, 414, 416, 418, 419, 420, 421, 422, 429, 431, 432, 434, 436, 437, 439, 440, 441, 442, 449, 451, 453, 463, 464, 465, 467, 468, 470, 478, 482, 485, 496, 502, 503, 505, 506, 507, 508, 510, 511, 512, 518, 521, 522, 523, 525, 526, 527, 528, 529, 530, 536, 538, 539, 540, 543, 545, 547, 548, 549, 550, 552, 553, 554, 556, 559, 560, 562, 563, 564, 566, 568, 570, 571, 572, 573, 574, 577, 579, 581, 584, 585, 586, 587, 593, 595, 597, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 625, 626, 627, 628, 629, 630, 637, 639, 641, 644, 645, 646, 647, 653, 655, 657, 661, 662, 663, 665, 667, 670, 672, 673, 675, 676, 679, 680, 682, 683, 686, 687, 689], "excluded_lines": []}, "nemo/collections/tts/parts/utils/distributed.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 16, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 16, "excluded_lines": 0}, "missing_lines": [37, 39, 42, 43, 46, 47, 50, 55, 56, 58, 59, 60, 61, 62, 63, 64], "excluded_lines": []}, "nemo/collections/tts/parts/utils/helpers.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 463, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 463, "excluded_lines": 0}, "missing_lines": [45, 46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 76, 79, 82, 83, 84, 87, 88, 89, 90, 91, 92, 94, 96, 99, 100, 103, 114, 115, 116, 117, 118, 119, 120, 121, 124, 131, 132, 133, 134, 137, 146, 147, 148, 150, 151, 153, 154, 155, 156, 159, 173, 174, 175, 178, 188, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 210, 211, 212, 213, 214, 216, 217, 219, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 256, 257, 258, 259, 262, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 280, 281, 293, 294, 295, 296, 297, 298, 301, 302, 317, 318, 319, 322, 325, 331, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 353, 368, 369, 370, 371, 372, 373, 374, 375, 378, 382, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 406, 411, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 496, 497, 499, 500, 501, 502, 505, 506, 507, 510, 514, 515, 516, 518, 519, 520, 521, 524, 526, 527, 528, 531, 532, 535, 536, 537, 538, 541, 542, 547, 548, 549, 554, 555, 556, 557, 558, 559, 562, 579, 580, 581, 582, 583, 584, 585, 588, 590, 591, 592, 594, 595, 596, 597, 599, 600, 601, 603, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 626, 627, 628, 629, 630, 631, 633, 634, 635, 638, 643, 644, 645, 646, 647, 648, 650, 652, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 679, 684, 685, 687, 688, 689, 690, 691, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 708, 717, 718, 719, 720, 721, 722, 724, 727, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 748, 751, 752, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 788, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 819, 820, 821, 823, 824, 825, 827, 828, 831, 834, 839, 841, 842], "excluded_lines": []}, "nemo/collections/tts/parts/utils/splines.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 190, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 190, "excluded_lines": 0}, "missing_lines": [21, 22, 23, 26, 49, 51, 54, 55, 56, 58, 61, 64, 67, 68, 71, 77, 78, 85, 86, 89, 93, 94, 95, 96, 97, 98, 100, 102, 103, 105, 108, 130, 132, 133, 134, 136, 139, 146, 147, 152, 157, 158, 162, 163, 167, 170, 173, 177, 178, 179, 180, 181, 182, 185, 186, 188, 189, 192, 193, 194, 195, 196, 198, 199, 201, 202, 204, 210, 211, 213, 215, 216, 219, 221, 222, 223, 224, 227, 244, 245, 246, 248, 249, 250, 252, 253, 255, 257, 260, 262, 263, 264, 265, 266, 268, 269, 270, 273, 276, 277, 282, 283, 284, 285, 286, 289, 290, 293, 306, 307, 308, 310, 311, 313, 324, 327, 328, 329, 332, 344, 345, 347, 348, 350, 351, 352, 353, 354, 356, 357, 359, 361, 376, 379, 394, 395, 397, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 427, 429, 430, 432, 433, 434, 436, 437, 439, 441, 442, 445, 448, 450, 451, 453, 454, 456, 457, 460, 465, 467, 469, 470, 472, 473, 476, 478, 483, 485], "excluded_lines": []}, "nemo/collections/tts/parts/utils/tts_dataset_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 156, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 156, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 32, 43, 44, 45, 47, 48, 50, 53, 64, 65, 66, 69, 72, 73, 75, 76, 78, 79, 80, 82, 85, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 115, 127, 128, 129, 130, 131, 133, 134, 136, 137, 140, 141, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 188, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 217, 220, 235, 236, 237, 238, 241, 247, 248, 249, 252, 253, 255, 258, 266, 267, 268, 269, 270, 273, 274, 276, 279, 299, 300, 301, 303, 304, 306, 309, 311, 312, 314, 317, 333, 334, 335, 337, 338, 339, 340, 342, 344, 351, 353, 354, 356], "excluded_lines": []}, "nemo/collections/tts/torch/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/tts/torch/g2ps.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 3, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 3, "excluded_lines": 0}, "missing_lines": [18, 19, 20], "excluded_lines": []}, "nemo/collections/tts/torch/tts_data_types.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 30, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 30, "excluded_lines": 0}, "missing_lines": [16, 19, 22, 26, 27, 30, 31, 34, 35, 38, 39, 42, 43, 46, 47, 50, 51, 54, 55, 58, 59, 62, 63, 66, 67, 70, 71, 74, 75, 87], "excluded_lines": []}, "nemo/collections/tts/torch/tts_tokenizers.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [17], "excluded_lines": []}, "nemo/collections/vision/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 5, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 5, "excluded_lines": 0}, "missing_lines": [15, 16, 19, 22, 25], "excluded_lines": []}, "nemo/collections/vision/data/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/vision/data/imagenet_classnames.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [15], "excluded_lines": []}, "nemo/collections/vision/data/megatron/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/vision/data/megatron/autoaugment.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 38, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 38, "excluded_lines": 0}, "missing_lines": [16, 18, 19, 21, 24, 37, 50, 78, 80, 81, 83, 85, 88, 96, 120, 136, 140, 144, 148, 155, 156, 173, 186, 187, 188, 194, 241, 242, 243, 247, 248, 249, 251, 254, 255, 258, 259, 261], "excluded_lines": []}, "nemo/collections/vision/data/megatron/data_samplers.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 41, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 41, "excluded_lines": 0}, "missing_lines": [14, 16, 17, 19, 20, 23, 24, 37, 47, 48, 50, 51, 52, 53, 54, 56, 57, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 88, 89], "excluded_lines": []}, "nemo/collections/vision/data/megatron/image_folder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 109, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 109, "excluded_lines": 0}, "missing_lines": [17, 18, 19, 21, 22, 23, 25, 26, 28, 29, 30, 33, 41, 44, 51, 54, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 106, 108, 136, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 168, 169, 176, 180, 190, 191, 192, 193, 194, 196, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 219, 220, 225, 226, 227, 228, 231, 234, 236, 237, 238, 242, 243, 245, 246, 247, 249, 252, 253, 255, 256, 258, 261, 284, 294, 304], "excluded_lines": []}, "nemo/collections/vision/data/megatron/vit_dataset.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 142, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 142, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 22, 23, 24, 26, 27, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 42, 45, 46, 47, 48, 49, 51, 52, 54, 55, 57, 58, 59, 60, 61, 62, 65, 70, 71, 72, 73, 75, 76, 77, 78, 80, 83, 88, 89, 91, 92, 93, 95, 98, 99, 100, 101, 102, 103, 115, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 152, 161, 163, 164, 165, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 199, 200, 201, 202, 210, 211, 219, 222, 223, 232, 242, 243, 254, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 278, 284, 287, 288, 289, 291], "excluded_lines": []}, "nemo/collections/vision/losses/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/vision/metrics/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/vision/models/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/vision/models/megatron_vit_classification_models.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 365, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 365, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 36, 37, 38, 39, 40, 41, 43, 44, 46, 48, 50, 52, 53, 54, 56, 58, 60, 63, 66, 69, 71, 77, 78, 79, 80, 81, 82, 83, 93, 94, 95, 97, 99, 101, 103, 104, 106, 107, 108, 109, 112, 115, 116, 117, 120, 121, 125, 127, 130, 132, 133, 136, 137, 144, 151, 152, 154, 156, 158, 159, 160, 162, 165, 166, 167, 168, 171, 173, 176, 177, 181, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 201, 203, 211, 213, 215, 216, 217, 219, 222, 224, 226, 230, 231, 232, 233, 240, 241, 243, 244, 245, 246, 248, 249, 252, 255, 256, 257, 258, 260, 262, 265, 266, 267, 268, 269, 270, 272, 274, 275, 276, 278, 281, 282, 283, 284, 285, 286, 287, 290, 291, 292, 293, 297, 300, 311, 312, 314, 315, 316, 317, 318, 319, 322, 325, 326, 327, 329, 330, 332, 334, 335, 336, 337, 341, 346, 352, 354, 364, 365, 368, 370, 373, 374, 376, 384, 389, 390, 391, 393, 397, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 421, 423, 428, 430, 434, 436, 439, 440, 441, 442, 443, 445, 446, 448, 454, 455, 456, 457, 459, 461, 462, 463, 464, 466, 467, 468, 469, 471, 472, 473, 475, 477, 479, 480, 481, 482, 483, 486, 488, 489, 490, 492, 493, 496, 498, 499, 501, 503, 504, 505, 507, 509, 516, 519, 520, 522, 524, 527, 529, 531, 532, 534, 535, 536, 538, 542, 545, 547, 549, 550, 551, 552, 554, 556, 557, 559, 560, 562, 563, 564, 565, 567, 570, 572, 573, 574, 575, 576, 577, 578, 580, 582, 585, 587, 588, 589, 598, 599, 611, 613, 615, 623, 632, 633, 637, 640, 642, 644, 651, 652, 653, 655, 656, 657, 660, 661, 662, 663, 666, 667, 668, 669, 670, 672, 673, 674, 675, 678, 680, 681, 682, 683, 686, 687, 688, 689, 690, 694, 695, 696, 697, 700, 702, 703, 705, 711, 713, 717, 718, 722, 723, 724, 726, 730, 731, 732, 733, 734, 736, 740, 741, 742, 743, 744, 746, 747, 748, 750], "excluded_lines": []}, "nemo/collections/vision/modules/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/vision/modules/common/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/vision/modules/common/megatron/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/vision/modules/common/megatron/vision_transformer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 173, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 173, "excluded_lines": 0}, "missing_lines": [17, 19, 21, 22, 23, 24, 26, 27, 29, 31, 33, 36, 38, 39, 41, 43, 45, 47, 63, 68, 69, 70, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 91, 92, 95, 102, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 174, 176, 177, 179, 180, 182, 189, 191, 192, 194, 206, 207, 210, 212, 215, 216, 223, 224, 225, 226, 230, 231, 234, 235, 237, 241, 242, 245, 246, 247, 248, 249, 252, 253, 254, 255, 257, 259, 261, 262, 264, 270, 274, 284, 294, 296, 299, 300, 302, 304, 308, 310, 312, 313, 315, 316, 318, 319, 320, 322, 324, 325, 329, 332, 333, 334, 335, 336, 337, 340, 341, 343, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 377, 378, 379, 380, 381, 382, 383, 386, 389, 450, 451, 452, 453, 454, 455, 457, 459, 467, 468, 469, 471, 472, 514, 515, 520, 524, 533, 538, 542, 543, 544, 546, 547, 549, 551], "excluded_lines": []}, "nemo/collections/vision/modules/vit/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/collections/vision/modules/vit/vit_backbone.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 191, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 191, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 21, 22, 24, 25, 26, 31, 34, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 54, 55, 57, 58, 60, 61, 63, 64, 66, 68, 69, 71, 74, 86, 87, 88, 89, 90, 91, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 109, 120, 121, 122, 123, 124, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 140, 141, 142, 144, 145, 147, 149, 150, 151, 153, 154, 155, 156, 158, 160, 161, 162, 164, 166, 167, 169, 170, 172, 175, 178, 189, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 225, 226, 227, 228, 231, 240, 242, 243, 244, 246, 247, 250, 251, 252, 254, 256, 257, 261, 262, 269, 304, 306, 308, 311, 312, 314, 315, 317, 318, 320, 321, 323, 324, 326, 327, 328, 329, 331, 333, 334, 336, 338, 340, 341, 342, 343, 345, 346, 347, 348, 350, 351, 354, 355, 357, 360, 362, 363, 366, 367, 369, 377, 379, 381, 382, 384, 386], "excluded_lines": []}, "nemo/collections/vision/parts/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/constants.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 21], "summary": {"covered_lines": 7, "num_statements": 7, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/core/__init__.py": {"executed_lines": [15, 16], "summary": {"covered_lines": 2, "num_statements": 2, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/core/classes/__init__.py": {"executed_lines": [16, 17, 18, 20, 29, 30, 31, 32, 33, 34, 35], "summary": {"covered_lines": 11, "num_statements": 11, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/core/classes/common.py": {"executed_lines": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 57, 64, 71, 72, 73, 100, 101, 103, 104, 106, 107, 108, 110, 158, 159, 163, 164, 168, 169, 173, 258, 370, 421, 465, 466, 467, 530, 549, 550, 561, 562, 572, 573, 601, 602, 618, 634, 635, 636, 637, 638, 639, 640, 641, 643, 657, 663, 668, 672, 673, 677, 678, 679, 690, 691, 703, 704, 765, 766, 822, 823, 916, 940, 941, 977, 978, 984, 986, 992, 993, 995, 996, 998, 1000, 1001, 1003, 1005, 1007, 1008, 1072, 1073, 1083, 1084, 1085, 1095, 1096, 1106, 1107, 1108], "summary": {"covered_lines": 118, "num_statements": 421, "percent_covered": 28.028503562945367, "percent_covered_display": "28", "missing_lines": 303, "excluded_lines": 0}, "missing_lines": [61, 68, 112, 113, 114, 115, 116, 117, 120, 121, 123, 127, 128, 129, 131, 132, 133, 134, 135, 142, 143, 145, 146, 149, 150, 153, 166, 171, 195, 197, 199, 200, 203, 204, 209, 211, 212, 218, 224, 230, 231, 232, 233, 234, 237, 238, 239, 240, 242, 243, 250, 251, 256, 279, 281, 282, 283, 286, 287, 289, 298, 299, 304, 305, 316, 318, 319, 320, 321, 324, 325, 326, 327, 329, 330, 336, 347, 353, 354, 356, 357, 367, 368, 381, 382, 383, 384, 386, 389, 390, 397, 403, 410, 411, 412, 414, 415, 431, 432, 433, 434, 436, 439, 440, 447, 448, 449, 450, 453, 454, 455, 457, 458, 470, 471, 472, 473, 474, 476, 479, 481, 483, 485, 487, 488, 490, 491, 492, 493, 495, 498, 499, 500, 501, 502, 504, 505, 507, 508, 509, 512, 513, 514, 515, 516, 518, 520, 522, 523, 524, 526, 527, 528, 532, 534, 535, 536, 537, 539, 541, 543, 545, 551, 552, 553, 554, 556, 558, 570, 599, 612, 613, 614, 616, 626, 627, 628, 629, 631, 644, 645, 651, 652, 654, 655, 660, 661, 666, 669, 688, 698, 699, 700, 701, 733, 734, 738, 739, 744, 746, 750, 754, 763, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 805, 806, 807, 809, 811, 815, 817, 818, 820, 843, 846, 849, 852, 854, 856, 865, 868, 871, 873, 874, 876, 877, 878, 879, 880, 883, 886, 887, 888, 889, 890, 893, 895, 896, 897, 899, 912, 914, 925, 926, 929, 930, 932, 934, 937, 1022, 1023, 1025, 1026, 1028, 1029, 1035, 1036, 1038, 1039, 1042, 1043, 1045, 1047, 1048, 1050, 1053, 1054, 1057, 1058, 1061, 1064, 1066, 1070, 1081, 1089, 1090, 1091, 1093, 1104, 1112, 1113, 1114, 1116], "excluded_lines": []}, "nemo/core/classes/dataset.py": {"executed_lines": [14, 15, 17, 19, 21, 24, 25, 30, 37, 38, 62, 63, 68, 75, 76, 98, 99, 100, 105, 106, 107, 108, 109], "summary": {"covered_lines": 20, "num_statements": 28, "percent_covered": 71.42857142857143, "percent_covered_display": "71", "missing_lines": 8, "excluded_lines": 0}, "missing_lines": [35, 55, 56, 59, 73, 91, 92, 95], "excluded_lines": []}, "nemo/core/classes/exportable.py": {"executed_lines": [14, 15, 17, 18, 20, 21, 22, 23, 24, 35, 38, 39, 51, 52, 55, 56, 59, 134, 246, 247, 251, 252, 256, 257, 261, 269, 275, 276, 279, 280, 283, 284, 287, 288, 291, 300, 307, 313], "summary": {"covered_lines": 37, "num_statements": 125, "percent_covered": 29.6, "percent_covered_display": "30", "missing_lines": 88, "excluded_lines": 0}, "missing_lines": [53, 57, 109, 110, 111, 112, 113, 114, 127, 128, 129, 130, 131, 132, 147, 148, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 164, 165, 167, 169, 172, 175, 177, 178, 181, 182, 185, 186, 187, 189, 190, 191, 192, 194, 195, 196, 198, 199, 200, 201, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 235, 236, 238, 240, 241, 242, 243, 244, 249, 254, 259, 266, 267, 273, 277, 281, 285, 289, 295, 296, 298, 305, 311, 317, 318, 319], "excluded_lines": []}, "nemo/core/classes/loss.py": {"executed_lines": [15, 17, 19, 22, 23, 25], "summary": {"covered_lines": 5, "num_statements": 6, "percent_covered": 83.33333333333333, "percent_covered_display": "83", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [26], "excluded_lines": []}, "nemo/core/classes/mixins/__init__.py": {"executed_lines": [15, 16, 22, 28], "summary": {"covered_lines": 4, "num_statements": 4, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/core/classes/mixins/access_mixins.py": {"executed_lines": [15, 16, 18, 19, 21, 22, 23, 26, 37, 38, 42, 46, 64, 65, 77, 109, 110, 124, 125, 134, 135, 141, 142], "summary": {"covered_lines": 22, "num_statements": 71, "percent_covered": 30.985915492957748, "percent_covered_display": "31", "missing_lines": 49, "excluded_lines": 0}, "missing_lines": [27, 28, 31, 32, 34, 43, 44, 50, 51, 53, 54, 56, 57, 59, 60, 62, 71, 72, 73, 74, 75, 81, 82, 83, 85, 86, 88, 93, 94, 95, 96, 98, 99, 101, 107, 117, 118, 119, 120, 121, 122, 128, 129, 130, 132, 138, 139, 145, 146], "excluded_lines": []}, "nemo/core/classes/mixins/adapter_mixin_strategies.py": {"executed_lines": [15, 16, 17, 19, 21, 24, 25, 51, 55, 56, 61, 79, 108, 109, 110, 115, 116, 121, 136, 168, 187, 221, 252, 253, 254, 255, 257], "summary": {"covered_lines": 25, "num_statements": 68, "percent_covered": 36.76470588235294, "percent_covered_display": "37", "missing_lines": 43, "excluded_lines": 0}, "missing_lines": [49, 52, 75, 77, 99, 100, 101, 102, 104, 105, 132, 133, 134, 151, 154, 155, 156, 158, 161, 164, 166, 184, 185, 205, 206, 207, 210, 211, 212, 213, 214, 215, 217, 219, 235, 236, 237, 240, 242, 244, 246, 248, 249], "excluded_lines": []}, "nemo/core/classes/mixins/adapter_mixins.py": {"executed_lines": [15, 16, 17, 18, 20, 21, 22, 23, 25, 28, 31, 32, 33, 34, 37, 38, 40, 41, 42, 45, 47, 50, 59, 60, 63, 67, 71, 74, 77, 80, 93, 97, 98, 100, 103, 104, 106, 109, 126, 127, 158, 159, 161, 229, 241, 284, 328, 344, 366, 378, 437, 476, 516, 547, 548, 574, 616, 669, 686, 738, 753, 761, 841, 957, 973, 974], "summary": {"covered_lines": 64, "num_statements": 338, "percent_covered": 18.93491124260355, "percent_covered_display": "19", "missing_lines": 274, "excluded_lines": 0}, "missing_lines": [64, 68, 94, 110, 111, 113, 114, 115, 117, 118, 120, 121, 123, 170, 171, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 191, 192, 194, 195, 198, 199, 202, 203, 206, 209, 212, 213, 218, 219, 222, 223, 224, 226, 227, 237, 238, 239, 259, 260, 263, 264, 266, 267, 270, 272, 275, 276, 282, 292, 293, 296, 297, 298, 301, 303, 304, 306, 307, 310, 312, 313, 315, 316, 317, 318, 322, 324, 338, 340, 341, 342, 354, 355, 356, 357, 358, 360, 362, 364, 373, 374, 376, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 408, 409, 410, 412, 413, 416, 419, 422, 425, 426, 427, 430, 432, 434, 435, 452, 453, 454, 456, 457, 461, 468, 472, 493, 494, 495, 496, 497, 500, 504, 505, 506, 507, 510, 514, 543, 544, 584, 586, 589, 591, 592, 596, 599, 602, 605, 607, 608, 610, 612, 628, 629, 631, 632, 635, 638, 640, 641, 643, 648, 649, 650, 653, 654, 655, 658, 659, 662, 665, 667, 679, 681, 682, 684, 707, 710, 712, 713, 715, 716, 718, 719, 723, 726, 727, 733, 734, 736, 747, 749, 750, 751, 759, 778, 779, 781, 784, 785, 787, 788, 791, 792, 798, 799, 801, 804, 805, 807, 808, 814, 815, 820, 821, 827, 828, 829, 830, 831, 833, 836, 839, 863, 864, 865, 867, 870, 871, 874, 875, 877, 878, 881, 883, 884, 885, 888, 891, 892, 895, 896, 898, 901, 904, 905, 908, 909, 910, 911, 912, 919, 924, 925, 926, 927, 928, 929, 932, 933, 940, 945, 946, 947, 948, 949, 951, 952, 955, 969, 970, 971, 987], "excluded_lines": []}, "nemo/core/classes/mixins/hf_io_mixin.py": {"executed_lines": [15, 16, 17, 19, 20, 21, 22, 24, 27, 28, 37, 38, 59, 60, 156, 274], "summary": {"covered_lines": 15, "num_statements": 80, "percent_covered": 18.75, "percent_covered_display": "19", "missing_lines": 65, "excluded_lines": 0}, "missing_lines": [51, 54, 55, 57, 108, 109, 112, 113, 116, 117, 118, 119, 121, 122, 125, 126, 129, 132, 135, 137, 138, 139, 141, 142, 144, 145, 147, 151, 152, 154, 210, 211, 213, 215, 216, 218, 219, 222, 223, 224, 228, 229, 234, 235, 237, 238, 241, 242, 243, 244, 249, 252, 255, 256, 258, 269, 270, 272, 286, 290, 291, 295, 296, 298, 299], "excluded_lines": []}, "nemo/core/classes/modelPT.py": {"executed_lines": [14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 46, 49, 50, 54, 200, 201, 203, 208, 265, 269, 281, 285, 329, 361, 398, 399, 457, 458, 488, 489, 500, 501, 512, 523, 548, 573, 737, 801, 809, 823, 858, 862, 869, 876, 972, 1065, 1089, 1113, 1125, 1137, 1173, 1174, 1351, 1369, 1370, 1427, 1463, 1474, 1494, 1506, 1538, 1539, 1549, 1550, 1560, 1561, 1564, 1565, 1580, 1581, 1606, 1607, 1610, 1611, 1631, 1632, 1635, 1636, 1640, 1641, 1646, 1660, 1661, 1667, 1706, 1725, 1763, 1777, 1790, 1798, 1805, 1813, 1843], "summary": {"covered_lines": 107, "num_statements": 703, "percent_covered": 15.220483641536273, "percent_covered_display": "15", "missing_lines": 596, "excluded_lines": 0}, "missing_lines": [69, 70, 73, 75, 94, 97, 100, 102, 103, 107, 109, 110, 111, 113, 114, 115, 117, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 136, 137, 139, 142, 147, 149, 154, 156, 161, 164, 165, 171, 172, 177, 178, 186, 189, 192, 195, 198, 204, 205, 206, 242, 243, 245, 246, 251, 252, 254, 255, 257, 258, 263, 267, 271, 272, 278, 279, 283, 314, 315, 319, 320, 325, 327, 343, 344, 349, 352, 353, 354, 355, 356, 359, 374, 375, 376, 378, 379, 380, 381, 382, 383, 388, 389, 390, 391, 393, 394, 395, 396, 435, 436, 438, 439, 441, 443, 444, 446, 447, 449, 450, 453, 454, 455, 471, 472, 473, 475, 485, 486, 498, 510, 521, 531, 532, 533, 536, 538, 539, 540, 542, 544, 545, 546, 556, 557, 558, 561, 563, 564, 565, 567, 569, 570, 571, 594, 597, 600, 601, 602, 605, 606, 609, 610, 612, 613, 615, 617, 618, 619, 621, 622, 623, 625, 626, 627, 628, 629, 631, 635, 638, 640, 643, 644, 646, 649, 651, 653, 655, 656, 659, 663, 666, 667, 668, 670, 674, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 692, 696, 697, 698, 699, 701, 702, 704, 708, 710, 712, 713, 718, 721, 722, 724, 726, 729, 735, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 797, 799, 802, 804, 805, 807, 814, 815, 816, 817, 819, 820, 821, 830, 831, 832, 837, 838, 840, 841, 846, 847, 849, 850, 855, 856, 859, 860, 863, 865, 867, 870, 872, 874, 898, 899, 902, 903, 905, 906, 908, 909, 912, 915, 917, 918, 921, 924, 925, 926, 929, 931, 933, 935, 939, 940, 943, 947, 950, 953, 954, 957, 961, 962, 964, 966, 967, 970, 994, 995, 998, 999, 1001, 1002, 1004, 1005, 1008, 1011, 1013, 1014, 1017, 1020, 1021, 1022, 1025, 1027, 1029, 1030, 1034, 1035, 1038, 1042, 1044, 1047, 1048, 1051, 1055, 1056, 1057, 1059, 1060, 1063, 1081, 1105, 1123, 1135, 1139, 1141, 1142, 1143, 1145, 1146, 1147, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1159, 1160, 1161, 1162, 1163, 1166, 1168, 1169, 1218, 1223, 1225, 1227, 1229, 1230, 1235, 1236, 1237, 1238, 1240, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1252, 1256, 1257, 1259, 1263, 1265, 1267, 1268, 1271, 1272, 1275, 1276, 1277, 1281, 1285, 1287, 1292, 1293, 1295, 1296, 1297, 1298, 1299, 1301, 1305, 1306, 1308, 1315, 1317, 1319, 1320, 1321, 1323, 1324, 1327, 1328, 1332, 1333, 1334, 1335, 1336, 1338, 1340, 1341, 1343, 1347, 1349, 1358, 1364, 1365, 1367, 1417, 1418, 1420, 1421, 1423, 1424, 1425, 1442, 1443, 1444, 1447, 1454, 1455, 1456, 1457, 1460, 1461, 1470, 1471, 1472, 1483, 1485, 1486, 1487, 1488, 1490, 1491, 1492, 1504, 1518, 1519, 1521, 1522, 1523, 1525, 1526, 1528, 1529, 1531, 1534, 1536, 1543, 1544, 1545, 1546, 1547, 1558, 1562, 1573, 1574, 1577, 1578, 1589, 1590, 1593, 1596, 1601, 1602, 1604, 1608, 1618, 1619, 1622, 1625, 1626, 1627, 1629, 1633, 1637, 1638, 1642, 1643, 1644, 1647, 1648, 1652, 1653, 1654, 1656, 1658, 1662, 1663, 1665, 1680, 1681, 1683, 1684, 1685, 1686, 1687, 1689, 1690, 1692, 1696, 1697, 1699, 1701, 1702, 1704, 1714, 1715, 1720, 1721, 1723, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1742, 1743, 1744, 1746, 1750, 1751, 1752, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1783, 1784, 1787, 1788, 1796, 1803, 1810, 1837, 1838, 1839, 1840, 1841, 1847, 1849, 1850, 1852, 1853, 1855, 1856, 1858], "excluded_lines": []}, "nemo/core/classes/module.py": {"executed_lines": [15, 17, 18, 20, 22, 25, 26, 30, 31, 37, 38, 45, 54, 63, 72, 73], "summary": {"covered_lines": 15, "num_statements": 41, "percent_covered": 36.58536585365854, "percent_covered_display": "37", "missing_lines": 26, "excluded_lines": 0}, "missing_lines": [35, 39, 40, 41, 42, 43, 52, 58, 59, 61, 67, 68, 70, 77, 78, 79, 80, 82, 83, 84, 86, 88, 89, 91, 92, 94], "excluded_lines": []}, "nemo/core/config/__init__.py": {"executed_lines": [15, 16, 17, 31, 32, 33], "summary": {"covered_lines": 6, "num_statements": 6, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/core/config/base_config.py": {"executed_lines": [15, 16, 18, 21, 22, 23, 30], "summary": {"covered_lines": 6, "num_statements": 6, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/core/config/hydra_runner.py": {"executed_lines": [15, 16, 17, 18, 19, 21, 22, 23, 24, 27, 45, 48, 51, 54], "summary": {"covered_lines": 14, "num_statements": 54, "percent_covered": 25.925925925925927, "percent_covered_display": "26", "missing_lines": 40, "excluded_lines": 0}, "missing_lines": [28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 70, 71, 72, 74, 75, 77, 80, 83, 87, 90, 93, 96, 98, 101, 102, 104, 105, 110, 112, 115, 119, 120, 122, 127, 129, 137, 139], "excluded_lines": []}, "nemo/core/config/modelPT.py": {"executed_lines": [15, 16, 18, 20, 21, 22, 25, 26, 27, 28, 29, 32, 33, 34, 35, 38, 39, 40, 45, 46, 47, 48, 51, 52, 53, 54, 57, 58, 59, 60, 61, 66, 67, 70, 71, 144, 147, 150, 153, 176, 179], "summary": {"covered_lines": 40, "num_statements": 64, "percent_covered": 62.5, "percent_covered_display": "62", "missing_lines": 24, "excluded_lines": 0}, "missing_lines": [138, 139, 140, 141, 142, 145, 148, 151, 154, 155, 156, 159, 160, 162, 164, 165, 166, 169, 170, 172, 174, 177, 181, 183], "excluded_lines": []}, "nemo/core/config/optimizers.py": {"executed_lines": [15, 16, 17, 19, 21, 35, 36, 37, 42, 45, 46, 47, 56, 57, 58, 59, 62, 63, 64, 74, 75, 76, 79, 80, 81, 90, 91, 92, 93, 96, 97, 98, 107, 108, 109, 112, 113, 114, 123, 124, 125, 128, 129, 130, 139, 140, 141, 142, 145, 146, 147, 156, 157, 158, 159, 160, 163, 164, 165, 174, 175, 178, 179, 180, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 227, 228, 229, 230, 231, 232, 233, 234, 237, 253, 283], "summary": {"covered_lines": 75, "num_statements": 88, "percent_covered": 85.22727272727273, "percent_covered_display": "85", "missing_lines": 13, "excluded_lines": 0}, "missing_lines": [247, 248, 250, 264, 265, 267, 268, 273, 275, 276, 277, 279, 280], "excluded_lines": []}, "nemo/core/config/pytorch.py": {"executed_lines": [15, 16, 18, 20, 23, 24, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "summary": {"covered_lines": 17, "num_statements": 17, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/core/config/pytorch_lightning.py": {"executed_lines": [15, 16, 18, 20, 23, 26, 27, 28, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80], "summary": {"covered_lines": 47, "num_statements": 47, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/core/config/schedulers.py": {"executed_lines": [15, 16, 17, 20, 21, 22, 27, 30, 31, 32, 37, 38, 41, 42, 43, 48, 49, 50, 53, 54, 55, 60, 61, 62, 65, 66, 67, 72, 73, 74, 77, 78, 79, 84, 87, 88, 89, 94, 97, 98, 99, 104, 107, 108, 109, 114, 117, 118, 119, 124, 127, 128, 129, 134, 137, 138, 139, 145, 146, 147, 152, 153, 156, 157, 158, 163, 164, 167, 172, 173, 174, 179, 180, 183, 184, 185, 190, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 234, 250, 272], "summary": {"covered_lines": 87, "num_statements": 95, "percent_covered": 91.57894736842105, "percent_covered_display": "92", "missing_lines": 8, "excluded_lines": 0}, "missing_lines": [244, 245, 247, 261, 262, 267, 268, 269], "excluded_lines": []}, "nemo/core/config/templates/__init__.py": {"executed_lines": [1], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/core/config/templates/model_card.py": {"executed_lines": [16], "summary": {"covered_lines": 1, "num_statements": 1, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/core/connectors/__init__.py": {"executed_lines": [1], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/core/connectors/save_restore_connector.py": {"executed_lines": [15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 43, 86, 189, 208, 220, 266, 340, 423, 514, 515, 533, 544, 549, 550, 556, 557, 579, 580, 583, 584, 587, 588, 591, 592, 595, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616], "summary": {"covered_lines": 58, "num_statements": 283, "percent_covered": 20.49469964664311, "percent_covered_display": "20", "missing_lines": 225, "excluded_lines": 0}, "missing_lines": [61, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 76, 79, 81, 82, 84, 120, 122, 123, 124, 126, 128, 129, 130, 132, 134, 139, 143, 148, 149, 150, 153, 154, 155, 157, 158, 160, 161, 163, 164, 166, 167, 168, 170, 171, 173, 174, 175, 177, 178, 179, 181, 182, 183, 185, 187, 200, 201, 202, 203, 204, 205, 206, 217, 218, 255, 258, 259, 260, 261, 262, 263, 264, 307, 309, 310, 311, 313, 314, 315, 316, 317, 318, 320, 321, 322, 325, 326, 327, 328, 331, 332, 334, 336, 338, 374, 376, 380, 381, 382, 384, 387, 388, 389, 393, 394, 395, 398, 399, 400, 402, 403, 408, 411, 413, 415, 416, 418, 419, 420, 421, 424, 425, 428, 429, 430, 431, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 450, 451, 453, 455, 456, 457, 460, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 478, 482, 485, 486, 489, 490, 491, 493, 494, 495, 497, 498, 500, 502, 503, 506, 507, 508, 509, 512, 520, 522, 523, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 540, 541, 542, 545, 546, 547, 551, 552, 553, 554, 558, 559, 563, 564, 565, 566, 567, 569, 570, 571, 572, 574, 575, 576, 577, 581, 585, 589, 593, 597, 601, 605, 609, 613, 617], "excluded_lines": []}, "nemo/core/neural_types/__init__.py": {"executed_lines": [16, 17, 18, 19], "summary": {"covered_lines": 4, "num_statements": 4, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/core/neural_types/axes.py": {"executed_lines": [15, 16, 18, 21, 22, 27, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 54, 58, 59, 61, 62, 63, 64, 65, 66, 67, 84, 85, 93, 94, 96, 97, 98, 100], "summary": {"covered_lines": 35, "num_statements": 58, "percent_covered": 60.3448275862069, "percent_covered_display": "60", "missing_lines": 23, "excluded_lines": 0}, "missing_lines": [49, 52, 56, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 95, 101, 102, 104, 105, 106, 107], "excluded_lines": []}, "nemo/core/neural_types/comparison.py": {"executed_lines": [15, 17, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32], "summary": {"covered_lines": 12, "num_statements": 12, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/core/neural_types/elements.py": {"executed_lines": [15, 16, 18, 20, 22, 68, 69, 72, 77, 82, 83, 90, 91, 98, 137, 138, 143, 145, 148, 150, 155, 156, 159, 161, 163, 166, 167, 170, 177, 178, 180, 187, 188, 190, 197, 198, 200, 207, 208, 211, 218, 219, 222, 229, 230, 232, 234, 236, 239, 240, 242, 249, 250, 252, 259, 260, 262, 269, 270, 276, 280, 281, 285, 286, 291, 295, 296, 300, 301, 303, 305, 307, 310, 311, 313, 320, 321, 323, 330, 331, 333, 340, 341, 343, 350, 351, 353, 360, 361, 363, 370, 371, 373, 380, 381, 385, 392, 393, 397, 404, 405, 410, 417, 418, 423, 430, 431, 433, 440, 441, 443, 450, 451, 455, 462, 463, 465, 472, 473, 475, 482, 483, 485, 492, 493, 495, 502, 503, 505, 512, 513, 516, 523, 524, 527, 534, 535, 538, 545, 546, 548, 555, 556, 558, 565, 566, 568, 575, 576, 578, 585, 586, 588], "summary": {"covered_lines": 110, "num_statements": 221, "percent_covered": 49.7737556561086, "percent_covered_display": "50", "missing_lines": 111, "excluded_lines": 0}, "missing_lines": [73, 74, 75, 78, 79, 80, 88, 96, 99, 102, 104, 105, 107, 108, 109, 110, 111, 112, 114, 116, 117, 120, 121, 122, 124, 125, 127, 128, 129, 131, 132, 134, 151, 172, 174, 182, 184, 192, 194, 202, 204, 213, 215, 224, 226, 244, 246, 254, 256, 264, 266, 277, 278, 282, 292, 293, 297, 315, 317, 325, 327, 335, 337, 345, 347, 355, 357, 365, 367, 375, 377, 387, 389, 399, 401, 412, 414, 425, 427, 435, 437, 445, 447, 457, 459, 467, 469, 477, 479, 487, 489, 497, 499, 507, 509, 518, 520, 529, 531, 540, 542, 550, 552, 560, 562, 570, 572, 580, 582, 590, 592], "excluded_lines": []}, "nemo/core/neural_types/neural_type.py": {"executed_lines": [15, 17, 19, 20, 21, 23, 31, 32, 46, 54, 61, 62, 64, 65, 69, 70, 71, 76, 77, 78, 79, 80, 81, 82, 87, 90, 92, 133, 147, 153, 154, 156, 157, 158, 160, 162, 163, 177, 178, 227, 250, 251, 254, 255, 258, 263, 264, 267], "summary": {"covered_lines": 44, "num_statements": 141, "percent_covered": 31.20567375886525, "percent_covered_display": "31", "missing_lines": 97, "excluded_lines": 0}, "missing_lines": [47, 48, 49, 50, 52, 72, 83, 84, 86, 89, 95, 97, 99, 100, 103, 104, 106, 107, 108, 110, 112, 113, 116, 117, 119, 120, 121, 123, 125, 126, 127, 129, 131, 135, 137, 138, 139, 143, 148, 149, 151, 159, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 216, 219, 220, 221, 222, 223, 225, 228, 229, 231, 232, 234, 236, 237, 239, 241, 243, 244, 246, 247, 259, 260, 268, 269, 270, 271], "excluded_lines": []}, "nemo/core/optim/__init__.py": {"executed_lines": [15, 16, 17, 31, 32, 33], "summary": {"covered_lines": 6, "num_statements": 6, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/core/optim/adafactor.py": {"executed_lines": [23, 25, 26, 28, 31, 32, 62, 96, 97, 100, 101, 104, 114, 119, 122, 127], "summary": {"covered_lines": 15, "num_statements": 99, "percent_covered": 15.151515151515152, "percent_covered_display": "15", "missing_lines": 84, "excluded_lines": 0}, "missing_lines": [76, 77, 78, 79, 80, 82, 94, 98, 102, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 120, 123, 124, 125, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 150, 152, 153, 155, 157, 158, 159, 160, 162, 164, 166, 167, 168, 169, 170, 172, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 192, 193, 195, 197, 198, 200, 201, 203, 204, 205, 206, 208, 209, 211, 213, 214, 216], "excluded_lines": []}, "nemo/core/optim/adan.py": {"executed_lines": [29, 30, 32, 33, 34, 37, 38, 39, 41, 49, 53, 54, 80, 116, 121, 122, 137, 138, 244, 299, 358, 402], "summary": {"covered_lines": 21, "num_statements": 179, "percent_covered": 11.731843575418994, "percent_covered_display": "12", "missing_lines": 158, "excluded_lines": 0}, "missing_lines": [42, 43, 44, 45, 46, 47, 50, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 114, 117, 118, 119, 123, 124, 125, 126, 127, 131, 133, 135, 141, 142, 143, 144, 146, 147, 148, 150, 151, 153, 154, 155, 156, 158, 160, 162, 164, 165, 166, 167, 168, 169, 170, 172, 176, 177, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 205, 225, 226, 227, 228, 230, 232, 233, 234, 235, 237, 239, 241, 264, 265, 266, 267, 268, 269, 271, 275, 277, 278, 280, 281, 283, 284, 285, 287, 288, 289, 290, 292, 293, 294, 296, 319, 320, 322, 326, 328, 329, 331, 332, 334, 335, 336, 337, 339, 340, 341, 343, 344, 346, 347, 348, 349, 351, 352, 353, 354, 355, 378, 380, 381, 382, 398, 399, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 453], "excluded_lines": []}, "nemo/core/optim/distributed_adam.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 326, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 326, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 41, 63, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 104, 105, 106, 109, 110, 111, 112, 115, 117, 119, 121, 122, 123, 124, 131, 132, 133, 134, 135, 136, 137, 138, 142, 144, 157, 158, 159, 160, 163, 164, 165, 168, 169, 172, 176, 186, 187, 188, 189, 190, 193, 194, 195, 196, 197, 199, 200, 201, 202, 205, 206, 209, 210, 211, 212, 213, 215, 216, 217, 218, 221, 222, 225, 226, 227, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 284, 285, 290, 291, 294, 295, 298, 299, 301, 302, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 353, 354, 358, 359, 362, 367, 368, 369, 371, 373, 376, 377, 381, 382, 383, 384, 386, 387, 390, 391, 392, 393, 395, 398, 400, 402, 405, 408, 409, 410, 413, 416, 419, 421, 422, 431, 432, 433, 434, 437, 438, 439, 440, 441, 444, 445, 446, 447, 449, 452, 453, 454, 455, 460, 461, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 481, 486, 487, 488, 489, 490, 491, 493, 494, 503, 504, 505, 506, 509, 510, 511, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 575, 576, 582, 583, 584, 587, 590, 595, 598, 600, 601, 602, 604, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 620, 622], "excluded_lines": []}, "nemo/core/optim/lr_scheduler.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 30, 31, 32, 35, 36, 45, 64, 80, 84, 89, 90, 99, 121, 137, 142, 143, 154, 197, 219, 220, 232, 275, 297, 301, 304, 309, 316, 323, 329, 353, 365, 374, 375, 378, 391, 392, 395, 403, 404, 407, 428, 435, 439, 454, 455, 477, 494, 506, 507, 547, 570, 571, 574, 581, 582, 585, 591, 592, 595, 599, 600, 606, 621, 622, 628, 643, 663, 687, 947, 971, 990], "summary": {"covered_lines": 80, "num_statements": 406, "percent_covered": 19.704433497536947, "percent_covered_display": "20", "missing_lines": 326, "excluded_lines": 0}, "missing_lines": [46, 49, 53, 54, 55, 56, 57, 59, 61, 62, 65, 66, 70, 72, 73, 75, 76, 78, 81, 82, 86, 102, 105, 109, 110, 111, 112, 113, 115, 117, 118, 119, 122, 123, 127, 129, 130, 132, 133, 135, 139, 166, 167, 169, 170, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 186, 188, 198, 199, 203, 206, 207, 210, 211, 213, 214, 216, 244, 247, 250, 254, 256, 257, 258, 259, 261, 263, 264, 265, 266, 268, 270, 272, 273, 276, 277, 281, 284, 285, 288, 289, 292, 293, 295, 298, 299, 302, 306, 310, 311, 312, 313, 317, 318, 319, 320, 324, 325, 326, 331, 333, 334, 337, 338, 341, 342, 343, 344, 345, 346, 348, 350, 354, 355, 356, 358, 359, 360, 361, 362, 367, 368, 369, 370, 371, 376, 379, 388, 393, 396, 400, 405, 408, 409, 410, 414, 415, 425, 426, 429, 430, 433, 437, 441, 451, 458, 459, 462, 466, 467, 468, 469, 470, 472, 474, 475, 478, 479, 483, 485, 486, 487, 491, 492, 495, 496, 498, 500, 501, 502, 503, 544, 545, 548, 549, 551, 552, 554, 556, 567, 572, 575, 576, 577, 578, 583, 586, 587, 588, 593, 596, 601, 602, 604, 607, 618, 623, 624, 626, 629, 640, 654, 655, 657, 659, 660, 674, 675, 679, 681, 682, 683, 684, 737, 738, 741, 742, 744, 746, 747, 750, 751, 752, 753, 755, 759, 760, 761, 762, 763, 764, 765, 767, 768, 772, 773, 776, 777, 778, 779, 782, 784, 785, 791, 792, 794, 799, 802, 805, 806, 808, 811, 815, 816, 819, 820, 821, 825, 828, 829, 832, 835, 836, 837, 838, 839, 840, 841, 843, 845, 846, 851, 854, 855, 861, 864, 865, 866, 867, 870, 873, 874, 875, 876, 877, 879, 880, 881, 885, 887, 889, 890, 892, 903, 908, 911, 914, 917, 918, 921, 923, 932, 933, 935, 937, 944, 950, 952, 954, 955, 961, 962, 963, 964, 966, 968], "excluded_lines": []}, "nemo/core/optim/megatron_fused_adam.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 101, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 101, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 20, 21, 22, 24, 26, 28, 30, 31, 32, 34, 36, 37, 40, 46, 47, 49, 52, 53, 55, 57, 58, 60, 61, 62, 64, 65, 66, 67, 68, 69, 72, 73, 75, 78, 83, 86, 87, 88, 89, 91, 92, 93, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 111, 113, 114, 122, 124, 125, 133, 136, 139, 142, 145, 146, 147, 150, 151, 152, 153, 155, 156, 157, 158, 159, 163, 165, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 202, 203, 218], "excluded_lines": []}, "nemo/core/optim/novograd.py": {"executed_lines": [15, 16, 18, 21, 30, 31, 48, 70, 75], "summary": {"covered_lines": 8, "num_statements": 68, "percent_covered": 11.764705882352942, "percent_covered_display": "12", "missing_lines": 60, "excluded_lines": 0}, "missing_lines": [22, 23, 24, 25, 26, 27, 61, 62, 65, 66, 67, 68, 71, 72, 73, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 101, 102, 104, 106, 107, 108, 109, 111, 113, 115, 116, 118, 120, 122, 124, 126, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 143, 145], "excluded_lines": []}, "nemo/core/optim/optimizer_with_main_params.py": {"executed_lines": [15, 17, 19, 21, 22, 27, 29, 31, 32, 41, 43, 46, 61, 75, 83, 84, 88, 117, 121, 126, 149, 153, 169, 170, 184, 340, 383, 400, 412, 424, 431, 437, 443, 446, 447, 464, 470, 486, 490, 491, 501, 502, 505, 506, 509, 519, 525, 528, 533, 539, 542, 546, 552, 555], "summary": {"covered_lines": 52, "num_statements": 301, "percent_covered": 17.27574750830565, "percent_covered_display": "17", "missing_lines": 249, "excluded_lines": 0}, "missing_lines": [23, 25, 37, 39, 49, 50, 51, 52, 54, 55, 57, 58, 66, 68, 71, 72, 76, 77, 79, 80, 89, 90, 94, 95, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 119, 123, 124, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 164, 166, 193, 194, 198, 199, 203, 204, 205, 206, 207, 208, 212, 216, 217, 221, 225, 227, 228, 229, 231, 232, 233, 236, 241, 242, 243, 245, 246, 247, 252, 253, 260, 261, 262, 265, 266, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 283, 286, 287, 288, 289, 290, 293, 294, 295, 299, 302, 303, 305, 306, 308, 309, 310, 313, 322, 324, 326, 327, 330, 332, 333, 334, 338, 343, 345, 346, 347, 349, 351, 353, 354, 355, 362, 363, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 381, 389, 390, 391, 392, 393, 395, 396, 397, 398, 402, 403, 404, 405, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 429, 433, 434, 435, 439, 440, 441, 444, 451, 452, 455, 458, 459, 462, 465, 466, 467, 468, 472, 473, 474, 475, 476, 479, 480, 481, 482, 483, 484, 487, 488, 494, 495, 496, 497, 499, 503, 507, 510, 511, 512, 513, 514, 515, 520, 521, 523, 526, 534, 535, 537, 540, 547, 548, 550, 553], "excluded_lines": []}, "nemo/core/optim/optimizers.py": {"executed_lines": [15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 33, 47, 48, 54, 55, 57, 58, 77, 80, 161, 181, 205], "summary": {"covered_lines": 27, "num_statements": 98, "percent_covered": 27.551020408163264, "percent_covered_display": "28", "missing_lines": 71, "excluded_lines": 0}, "missing_lines": [50, 52, 53, 59, 61, 63, 65, 66, 67, 69, 71, 73, 74, 75, 100, 102, 103, 105, 106, 108, 109, 112, 114, 115, 116, 117, 118, 121, 124, 125, 126, 128, 131, 133, 136, 138, 139, 141, 144, 145, 146, 151, 152, 153, 156, 158, 172, 173, 175, 177, 178, 192, 193, 196, 197, 198, 200, 201, 202, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "excluded_lines": []}, "nemo/core/optim/radam.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 53, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 53, "excluded_lines": 0}, "missing_lines": [14, 31, 33, 34, 37, 40, 50, 51, 52, 54, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 69, 71, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 99, 100, 114, 115, 117, 118, 121, 122, 123, 125, 127, 129], "excluded_lines": []}, "nemo/core/utils/__init__.py": {"executed_lines": [15], "summary": {"covered_lines": 1, "num_statements": 1, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/core/utils/cuda_python_utils.py": {"executed_lines": [15, 17, 18, 19, 21, 24, 52, 66, 85, 98, 99, 190], "summary": {"covered_lines": 12, "num_statements": 98, "percent_covered": 12.244897959183673, "percent_covered_display": "12", "missing_lines": 86, "excluded_lines": 0}, "missing_lines": [25, 26, 27, 28, 30, 32, 33, 35, 36, 37, 39, 40, 42, 43, 44, 45, 56, 57, 58, 59, 61, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 89, 91, 92, 93, 95, 108, 109, 111, 114, 116, 130, 133, 135, 136, 137, 138, 139, 140, 147, 148, 149, 154, 155, 157, 165, 166, 167, 177, 179, 181, 185, 187, 191, 193, 194, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 221], "excluded_lines": []}, "nemo/core/utils/k2_guard.py": {"executed_lines": [15, 22, 24, 25, 26, 28, 29, 31, 34, 35], "summary": {"covered_lines": 10, "num_statements": 17, "percent_covered": 58.8235294117647, "percent_covered_display": "59", "missing_lines": 7, "excluded_lines": 0}, "missing_lines": [37, 39, 40, 41, 42, 44, 45], "excluded_lines": []}, "nemo/core/utils/k2_utils.py": {"executed_lines": [16], "summary": {"covered_lines": 1, "num_statements": 1, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/core/utils/neural_type_utils.py": {"executed_lines": [15, 16, 18, 21, 31, 63], "summary": {"covered_lines": 6, "num_statements": 31, "percent_covered": 19.35483870967742, "percent_covered_display": "19", "missing_lines": 25, "excluded_lines": 0}, "missing_lines": [22, 23, 24, 25, 26, 27, 28, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69], "excluded_lines": []}, "nemo/core/utils/numba_utils.py": {"executed_lines": [15, 16, 17, 18, 20, 22, 25, 26, 28, 29, 31, 34, 47, 50, 56, 67, 79, 82, 83, 90, 109, 155, 188], "summary": {"covered_lines": 23, "num_statements": 72, "percent_covered": 31.944444444444443, "percent_covered_display": "32", "missing_lines": 49, "excluded_lines": 0}, "missing_lines": [51, 52, 53, 64, 84, 85, 86, 87, 100, 103, 104, 106, 120, 123, 124, 127, 128, 131, 132, 133, 134, 135, 137, 139, 140, 142, 144, 146, 149, 152, 162, 163, 164, 165, 166, 168, 169, 171, 175, 176, 178, 180, 182, 183, 185, 195, 196, 197, 199], "excluded_lines": []}, "nemo/core/utils/process_launcher/__init__.py": {"executed_lines": [15], "summary": {"covered_lines": 1, "num_statements": 1, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/core/utils/process_launcher/launcher.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 40, 45, 48, 49, 50, 51, 52, 55, 166, 339, 340, 351, 356, 361, 365], "summary": {"covered_lines": 35, "num_statements": 159, "percent_covered": 22.0125786163522, "percent_covered_display": "22", "missing_lines": 124, "excluded_lines": 0}, "missing_lines": [41, 81, 82, 85, 86, 87, 88, 89, 92, 93, 95, 96, 98, 99, 100, 102, 106, 107, 110, 111, 112, 115, 118, 119, 120, 121, 122, 123, 125, 126, 130, 146, 149, 151, 152, 153, 156, 157, 158, 159, 160, 161, 163, 177, 178, 179, 180, 182, 183, 184, 187, 189, 194, 195, 196, 199, 202, 203, 206, 207, 208, 210, 213, 214, 216, 217, 218, 220, 221, 222, 225, 226, 229, 231, 233, 234, 237, 247, 248, 251, 252, 254, 255, 258, 259, 268, 270, 272, 274, 276, 277, 279, 282, 283, 284, 285, 290, 292, 295, 297, 300, 301, 310, 311, 312, 313, 314, 318, 320, 326, 327, 329, 330, 333, 334, 336, 345, 346, 347, 349, 352, 353, 354, 358], "excluded_lines": []}, "nemo/deploy/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 3, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 3, "excluded_lines": 0}, "missing_lines": [16, 17, 18], "excluded_lines": []}, "nemo/deploy/deploy_base.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 65, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 65, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 34, 37, 38, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 109, 111, 112, 113, 114], "excluded_lines": []}, "nemo/deploy/deploy_pytriton.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 39, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 39, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 20, 21, 23, 26, 63, 90, 104, 110, 112, 113, 115, 121, 122, 131, 137, 138, 146, 147, 148, 150, 156, 157, 159, 160, 161, 162, 163, 165, 171, 172, 174, 176, 181, 182, 184], "excluded_lines": []}, "nemo/deploy/nlp/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 5, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 5, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 20], "excluded_lines": []}, "nemo/deploy/nlp/query_llm.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 84, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 84, "excluded_lines": 0}, "missing_lines": [15, 17, 19, 21, 22, 23, 24, 25, 28, 29, 30, 31, 33, 34, 49, 52, 72, 73, 77, 109, 110, 112, 113, 115, 116, 118, 119, 121, 122, 124, 125, 127, 128, 129, 130, 132, 133, 135, 136, 137, 139, 140, 141, 143, 144, 145, 147, 148, 149, 151, 153, 185, 186, 188, 189, 191, 192, 194, 195, 197, 198, 200, 201, 203, 204, 205, 207, 208, 209, 211, 212, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229], "excluded_lines": []}, "nemo/deploy/triton_deployable.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 12, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 12, "excluded_lines": 0}, "missing_lines": [16, 17, 20, 21, 22, 23, 25, 26, 27, 29, 30, 31], "excluded_lines": []}, "nemo/deploy/utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 44, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 44, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 22, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79], "excluded_lines": []}, "nemo/export/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 7, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 7, "excluded_lines": 0}, "missing_lines": [16, 18, 21, 22, 23, 24, 25], "excluded_lines": []}, "nemo/export/quantize/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [15], "excluded_lines": []}, "nemo/export/quantize/quantizer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 118, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 118, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 42, 43, 44, 47, 76, 83, 84, 85, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 110, 116, 118, 120, 127, 129, 130, 132, 135, 137, 138, 139, 140, 142, 144, 145, 147, 149, 150, 152, 153, 155, 156, 157, 159, 165, 167, 168, 169, 170, 171, 172, 173, 174, 177, 179, 181, 189, 191, 192, 194, 196, 197, 198, 199, 200, 202, 204, 207, 208, 209, 210, 211, 212, 216, 217, 219, 221, 223, 225, 226, 230, 231, 232, 234, 236, 237, 245, 246, 247, 248, 249, 250, 251], "excluded_lines": []}, "nemo/export/tarutils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 132, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 132, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 23, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 58, 59, 61, 62, 63, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 135, 136, 138, 141, 142, 143, 144, 147, 148, 150, 151, 153, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 169, 170, 173, 179, 180, 181, 182, 184, 185, 186, 188, 189, 191, 192, 194, 195, 197, 198, 200, 201, 203, 204, 207, 208, 209], "excluded_lines": []}, "nemo/export/tensorrt_llm.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 352, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 352, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 46, 47, 48, 49, 51, 54, 55, 56, 57, 58, 59, 60, 62, 65, 84, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 105, 150, 151, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 185, 186, 188, 190, 191, 193, 194, 195, 197, 198, 199, 201, 211, 221, 238, 239, 240, 242, 244, 245, 246, 248, 250, 251, 253, 264, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 280, 284, 295, 299, 302, 305, 309, 313, 350, 351, 356, 357, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 375, 376, 380, 381, 384, 386, 387, 388, 391, 392, 393, 394, 396, 398, 417, 434, 435, 436, 441, 442, 443, 445, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 468, 470, 471, 472, 473, 475, 477, 478, 479, 492, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 605, 607, 608, 609, 610, 611, 612, 613, 619, 620, 622, 623, 624, 625, 629, 632, 633, 634, 636, 638, 640, 641, 647, 649, 652, 653, 658, 659, 660, 661, 662, 664, 666, 667, 668, 670, 671, 673, 674, 675, 676, 677, 679, 680, 684, 685, 691, 693, 694, 695, 696, 697, 698, 700, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720], "excluded_lines": []}, "nemo/export/trt_llm/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/export/trt_llm/decoder/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 19, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 19, "excluded_lines": 0}, "missing_lines": [15, 17, 19, 20, 21, 22, 23, 24, 25, 35, 44, 46, 47, 50, 60, 71, 72, 73, 74], "excluded_lines": []}, "nemo/export/trt_llm/decoder/decoder.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 139, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 139, "excluded_lines": 0}, "missing_lines": [16, 17, 19, 20, 22, 29, 30, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 47, 50, 51, 53, 55, 56, 58, 60, 61, 63, 65, 66, 68, 70, 71, 75, 77, 78, 80, 82, 83, 85, 87, 88, 90, 92, 96, 97, 98, 99, 101, 103, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 119, 121, 124, 131, 132, 134, 136, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 162, 163, 164, 166, 169, 174, 175, 177, 178, 180, 185, 186, 188, 190, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 215, 216, 217, 219, 220, 221, 222, 224, 225, 226, 227, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 248, 250, 253, 256, 257, 259, 260], "excluded_lines": []}, "nemo/export/trt_llm/decoder/falcon.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 52, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 52, "excluded_lines": 0}, "missing_lines": [16, 18, 19, 20, 21, 23, 24, 34, 37, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 71, 75, 77, 78, 79, 80, 83, 86, 90, 92, 93, 94, 97, 100, 101, 104, 127, 128, 129, 130, 131, 133], "excluded_lines": []}, "nemo/export/trt_llm/decoder/gemma.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 54, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 54, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 22, 23, 33, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 66, 70, 72, 73, 74, 75, 78, 81, 85, 87, 88, 89, 92, 95, 96, 97, 98, 99, 101, 123, 124, 125, 126, 127, 128, 129, 131], "excluded_lines": []}, "nemo/export/trt_llm/decoder/gpt.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 54, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 54, "excluded_lines": 0}, "missing_lines": [16, 18, 19, 20, 21, 23, 24, 34, 37, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 60, 64, 66, 67, 68, 69, 72, 76, 78, 79, 80, 83, 86, 87, 88, 90, 92, 94, 96, 97, 98, 100, 121, 122, 123, 124, 125, 126, 127, 129], "excluded_lines": []}, "nemo/export/trt_llm/decoder/gptj.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 39, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 39, "excluded_lines": 0}, "missing_lines": [16, 18, 19, 21, 22, 32, 35, 36, 38, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 62, 66, 68, 70, 71, 72, 73, 76, 80, 82, 83, 85, 88, 91, 92, 93, 95], "excluded_lines": []}, "nemo/export/trt_llm/decoder/llama.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 67, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 67, "excluded_lines": 0}, "missing_lines": [16, 18, 19, 20, 21, 22, 24, 25, 35, 38, 39, 40, 42, 43, 44, 46, 47, 48, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 68, 72, 74, 75, 76, 77, 80, 83, 87, 89, 90, 91, 94, 97, 98, 99, 100, 101, 103, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 137, 138, 141, 144, 145, 146, 147, 148, 150], "excluded_lines": []}, "nemo/export/trt_llm/model_config.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 271, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 271, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 44, 45, 47, 48, 51, 52, 55, 57, 59, 60, 62, 64, 65, 67, 69, 70, 72, 75, 76, 79, 80, 81, 83, 84, 86, 88, 89, 90, 92, 95, 96, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 114, 116, 117, 118, 122, 123, 124, 128, 130, 132, 133, 135, 136, 137, 138, 140, 141, 143, 145, 157, 166, 168, 169, 170, 172, 173, 174, 175, 176, 179, 181, 184, 185, 188, 189, 190, 191, 193, 194, 202, 203, 205, 209, 213, 214, 217, 221, 222, 223, 226, 227, 230, 231, 233, 235, 236, 240, 241, 242, 245, 249, 250, 251, 252, 255, 256, 259, 260, 261, 262, 264, 265, 273, 274, 275, 279, 281, 282, 283, 284, 285, 290, 291, 295, 296, 297, 298, 301, 302, 305, 306, 307, 308, 309, 310, 312, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 327, 328, 329, 331, 332, 333, 335, 336, 338, 339, 341, 343, 344, 346, 347, 349, 351, 352, 361, 380, 381, 384, 387, 391, 392, 393, 396, 400, 401, 405, 408, 412, 413, 415, 416, 418, 420, 421, 422, 423, 425, 426, 428, 430, 433, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 451, 452, 459, 460, 463, 464, 465, 466, 467, 470, 471, 472, 475, 477, 479, 481, 482, 484, 486, 487, 489, 495, 496, 498, 500, 501, 503, 505, 506, 508, 510, 511, 513, 515, 516, 518, 520, 521, 523, 525, 526, 528], "excluded_lines": []}, "nemo/export/trt_llm/model_config_trt.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 15, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 15, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 24, 58, 59, 60, 62, 63, 64, 65, 66], "excluded_lines": []}, "nemo/export/trt_llm/nemo/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 1, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 1, "excluded_lines": 0}, "missing_lines": [16], "excluded_lines": []}, "nemo/export/trt_llm/nemo/convert.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 264, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 264, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 23, 26, 27, 30, 31, 32, 33, 34, 35, 36, 38, 41, 42, 44, 45, 47, 50, 51, 52, 55, 56, 57, 58, 61, 64, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 126, 127, 128, 135, 143, 144, 145, 147, 148, 149, 156, 164, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 191, 192, 194, 195, 197, 213, 214, 215, 216, 217, 218, 219, 220, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 285, 286, 287, 291, 292, 293, 297, 298, 299, 300, 303, 307, 309, 310, 311, 312, 313, 314, 320, 321, 323, 326, 328, 329, 330, 333, 345, 346, 347, 348, 349, 350, 351, 360, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 380, 381, 383, 384, 385, 386, 387, 389, 392, 396, 397, 398, 399, 400, 402, 405, 406, 407, 408, 409, 411, 412, 415, 417, 418, 419, 420, 421, 423, 424, 426, 427, 428, 429, 431, 432, 434, 449, 450, 451, 452, 453, 454, 456, 457, 463, 464, 465, 466, 467, 468, 474, 475, 477, 479, 480, 482, 484, 485, 486, 487, 489, 490, 492, 493, 495, 496, 497, 498, 499, 501, 502, 506, 507, 511, 512, 513, 515, 521, 523, 526], "excluded_lines": []}, "nemo/export/trt_llm/nemo/nemo.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 129, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 129, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 21, 22, 23, 25, 26, 28, 31, 32, 53, 54, 55, 56, 57, 58, 59, 60, 62, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 80, 82, 84, 85, 86, 88, 90, 92, 93, 94, 96, 98, 101, 102, 103, 104, 107, 108, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 129, 130, 131, 132, 134, 136, 137, 138, 140, 142, 144, 145, 146, 147, 149, 151, 153, 154, 156, 158, 160, 161, 162, 164, 168, 170, 171, 172, 173, 179, 184, 186, 188, 196, 197, 198, 199, 203, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 236, 237, 238, 239, 240, 241, 243], "excluded_lines": []}, "nemo/export/trt_llm/nemo/nemo_ckpt_convert.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 350, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 350, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 41, 50, 51, 52, 53, 55, 58, 59, 61, 62, 63, 64, 65, 66, 67, 69, 70, 72, 75, 76, 77, 78, 79, 80, 83, 84, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 99, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 124, 125, 126, 127, 128, 129, 131, 132, 134, 136, 137, 139, 141, 143, 146, 147, 148, 149, 152, 154, 155, 158, 159, 161, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 226, 227, 229, 230, 231, 232, 233, 249, 250, 266, 268, 269, 270, 271, 274, 275, 277, 279, 280, 282, 283, 285, 286, 290, 291, 293, 294, 296, 300, 302, 303, 304, 306, 307, 308, 309, 310, 312, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 335, 336, 337, 338, 339, 340, 343, 344, 345, 347, 348, 349, 351, 353, 366, 367, 368, 369, 370, 372, 373, 374, 375, 377, 378, 379, 380, 382, 383, 385, 386, 387, 389, 390, 391, 393, 394, 397, 398, 399, 401, 402, 403, 405, 418, 419, 420, 421, 423, 424, 431, 432, 439, 441, 443, 444, 445, 447, 449, 450, 451, 452, 464, 465, 466, 470, 471, 472, 474, 475, 477, 478, 479, 481, 482, 483, 485, 486, 487, 488, 489, 490, 492, 494, 496, 503, 505, 506, 507, 508, 510, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 538, 541, 542, 548, 549, 550, 552, 554, 555, 557, 558, 559, 561, 562, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 578, 580, 581, 582, 583, 585, 587, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 603], "excluded_lines": []}, "nemo/export/trt_llm/nemo/sentencepiece_tokenizer.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 160, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 160, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 23, 34, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 79, 80, 82, 84, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 98, 99, 101, 102, 104, 105, 106, 108, 109, 111, 113, 114, 115, 117, 119, 120, 121, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 136, 138, 139, 140, 142, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 185, 186, 187, 188, 190, 191, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 206, 207, 209, 210, 211, 212, 214, 216, 217, 218, 219, 221, 223, 224, 225, 226, 228, 230, 231, 232, 234, 235, 237, 240, 242, 243, 244, 245, 249], "excluded_lines": []}, "nemo/export/trt_llm/nemo_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 140, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 140, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 44, 45, 46, 48, 51, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 78, 80, 81, 85, 86, 88, 89, 91, 95, 97, 99, 100, 101, 103, 104, 106, 109, 111, 112, 114, 115, 116, 119, 129, 131, 142, 143, 144, 146, 148, 149, 151, 153, 155, 157, 161, 164, 168, 169, 170, 181, 183, 184, 185, 187, 188, 189, 193, 196, 206, 208, 209, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 226, 230, 231, 233, 234, 236, 237, 239, 240, 242, 244, 245, 246, 248, 251, 255, 257, 259, 260, 261, 263, 264, 265, 266, 267, 269, 271, 275, 279, 283, 284, 285, 288, 294, 295, 297, 304, 305, 315, 317, 319, 320, 322], "excluded_lines": []}, "nemo/export/trt_llm/qnemo/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 2, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [15, 16], "excluded_lines": []}, "nemo/export/trt_llm/qnemo/align_config.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 18, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 18, "excluded_lines": 0}, "missing_lines": [15, 16, 19, 23, 25, 28, 29, 30, 31, 34, 37, 38, 39, 42, 43, 44, 45, 46], "excluded_lines": []}, "nemo/export/trt_llm/qnemo/qnemo_to_tensorrt_llm.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 33, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 33, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 21, 23, 24, 27, 37, 43, 44, 45, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 82, 83, 84, 86, 89, 90, 92, 93, 96, 97], "excluded_lines": []}, "nemo/export/trt_llm/qnemo/tokenizer_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 18, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 18, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 25, 28, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 46, 48], "excluded_lines": []}, "nemo/export/trt_llm/quantization_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 55, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 55, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 20, 29, 31, 32, 34, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 49, 51, 52, 53, 54, 55, 56, 58, 59, 68, 69, 70, 71, 72, 74, 75, 84, 86, 87, 89, 90, 92, 93, 95, 98, 103, 109, 111, 112, 113, 120, 121, 122, 123, 124, 125, 128], "excluded_lines": []}, "nemo/export/trt_llm/tensor_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 28, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 28, "excluded_lines": 0}, "missing_lines": [16, 18, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 33, 34, 37, 39, 40, 41, 42, 44, 47, 49, 51, 52, 53, 54, 57, 59], "excluded_lines": []}, "nemo/export/trt_llm/tensorrt_llm_build.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 185, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 185, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 40, 42, 43, 44, 47, 49, 50, 51, 52, 53, 54, 55, 58, 66, 67, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 87, 90, 94, 95, 97, 98, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 132, 134, 136, 138, 139, 141, 143, 146, 157, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 180, 220, 221, 222, 223, 224, 225, 227, 229, 230, 231, 234, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 302, 306, 310, 311, 316, 317, 319, 320, 321, 323, 324, 325, 327, 328, 329, 330, 332, 334, 335, 337, 338, 340, 341, 342, 343, 345, 346, 348, 349, 350], "excluded_lines": []}, "nemo/export/trt_llm/tensorrt_llm_model.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 126, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 126, "excluded_lines": 0}, "missing_lines": [16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 39, 40, 41, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 67, 68, 69, 70, 71, 73, 74, 82, 83, 90, 91, 92, 93, 106, 108, 109, 111, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 139, 141, 142, 144, 145, 147, 149, 165, 166, 168, 170, 171, 172, 174, 175, 177, 179, 180, 181, 184, 185, 186, 188, 189, 199, 200, 201, 203, 220, 235, 236, 238, 239, 240, 245, 246, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 262, 276, 277, 278, 279, 280, 281, 282, 284, 312, 314, 350, 371, 372, 374, 399, 400, 401], "excluded_lines": []}, "nemo/export/trt_llm/tensorrt_llm_run.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 279, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 279, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 35, 36, 39, 42, 43, 46, 47, 48, 49, 50, 51, 54, 55, 58, 59, 60, 61, 62, 66, 69, 70, 71, 73, 74, 75, 77, 79, 80, 81, 82, 84, 85, 87, 88, 90, 92, 95, 97, 99, 124, 125, 126, 128, 131, 133, 134, 136, 137, 138, 140, 142, 143, 145, 146, 147, 148, 150, 151, 152, 156, 160, 161, 162, 163, 167, 171, 172, 173, 174, 175, 177, 178, 179, 182, 204, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 224, 228, 230, 231, 233, 234, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 249, 257, 269, 271, 272, 273, 275, 277, 278, 279, 282, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 310, 320, 333, 334, 335, 336, 337, 339, 340, 342, 352, 353, 356, 357, 361, 365, 367, 368, 369, 371, 374, 375, 378, 379, 380, 381, 383, 385, 386, 387, 388, 392, 395, 396, 397, 401, 402, 403, 404, 405, 407, 408, 410, 419, 438, 439, 440, 441, 442, 443, 445, 446, 447, 465, 466, 467, 468, 485, 486, 487, 488, 489, 491, 494, 517, 519, 520, 522, 524, 525, 526, 527, 531, 532, 533, 534, 538, 539, 541, 560, 562, 563, 564, 566, 571, 572, 573, 576, 596, 598, 599, 601, 603, 605, 606, 607, 608, 609, 613, 614, 615, 616, 617, 621, 622, 624, 641, 643, 646, 647, 649, 650, 651, 652, 655, 656, 657, 660, 662, 663, 666, 669, 671, 674, 676, 677, 678, 679, 682, 683], "excluded_lines": []}, "nemo/export/trt_llm/tensorrt_llm_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 34, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 34, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 21, 22, 24, 27, 36, 37, 38, 40, 48, 49, 52, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 70, 72, 79, 80, 81, 82, 84, 85], "excluded_lines": []}, "nemo/export/trt_llm/utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 44, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 44, "excluded_lines": 0}, "missing_lines": [16, 17, 18, 19, 21, 22, 23, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 56, 58, 60, 63, 64, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78], "excluded_lines": []}, "nemo/io/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/io/pl.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 68, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 68, "excluded_lines": 0}, "missing_lines": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 17, 18, 21, 29, 30, 44, 46, 47, 52, 53, 54, 55, 56, 58, 59, 61, 62, 79, 81, 82, 85, 86, 87, 88, 89, 93, 94, 96, 98, 99, 106, 107, 108, 109, 112, 114, 115, 117, 119, 120, 121, 122, 124, 127, 132, 134, 135, 138, 141, 143, 146, 160, 162, 163, 164, 165, 167], "excluded_lines": []}, "nemo/lightning/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 13, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 13, "excluded_lines": 0}, "missing_lines": [1, 3, 4, 6, 7, 8, 9, 13, 14, 15, 18, 21, 24], "excluded_lines": []}, "nemo/lightning/_strategy_lib.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 186, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 186, "excluded_lines": 0}, "missing_lines": [1, 2, 3, 4, 5, 7, 8, 10, 13, 14, 15, 18, 19, 20, 23, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 55, 70, 72, 73, 75, 77, 81, 84, 85, 86, 94, 95, 97, 98, 99, 100, 101, 104, 105, 107, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 123, 125, 126, 128, 129, 131, 132, 134, 136, 137, 138, 141, 142, 143, 145, 147, 149, 152, 155, 162, 171, 178, 179, 180, 182, 183, 184, 186, 188, 189, 191, 192, 195, 199, 200, 201, 203, 204, 206, 213, 215, 216, 218, 220, 222, 223, 225, 228, 229, 230, 231, 235, 241, 243, 246, 250, 251, 252, 254, 257, 259, 260, 261, 264, 274, 279, 287, 290, 294, 298, 311, 315, 316, 318, 319, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 356, 357, 358, 359, 360, 362, 365, 368, 379, 385, 386, 388, 391, 395, 396, 398, 400, 401, 402, 406, 407, 409, 411, 417, 419, 420, 421, 422, 423, 425, 436, 438], "excluded_lines": []}, "nemo/lightning/base.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 35, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 35, "excluded_lines": 0}, "missing_lines": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 25, 26, 30, 33, 35, 36, 38, 39, 41, 42, 43, 44, 45, 47, 48, 51], "excluded_lines": []}, "nemo/lightning/data.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 120, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 120, "excluded_lines": 0}, "missing_lines": [1, 2, 3, 4, 5, 7, 8, 11, 14, 16, 17, 19, 22, 43, 45, 47, 49, 50, 52, 54, 55, 60, 61, 69, 70, 71, 72, 76, 79, 88, 90, 91, 102, 103, 114, 116, 127, 128, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 160, 161, 167, 168, 169, 170, 171, 172, 173, 174, 176, 181, 182, 183, 184, 185, 187, 189, 191, 192, 193, 196, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 219, 220, 223, 224, 227, 228, 239, 249, 252, 254, 255, 256, 257, 258, 261, 262, 263, 265, 266, 267, 268, 270, 272, 273, 274, 275, 276, 277, 280, 281], "excluded_lines": []}, "nemo/lightning/megatron_parallel.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 412, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 412, "excluded_lines": 0}, "missing_lines": [1, 2, 3, 4, 5, 6, 7, 25, 26, 27, 29, 32, 33, 34, 35, 37, 38, 41, 42, 44, 45, 47, 48, 50, 53, 54, 57, 101, 112, 113, 116, 117, 118, 119, 121, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 142, 143, 144, 145, 148, 151, 152, 154, 159, 161, 162, 163, 164, 165, 166, 168, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 218, 220, 221, 223, 233, 235, 237, 238, 240, 241, 243, 244, 245, 248, 249, 251, 253, 254, 256, 257, 259, 261, 279, 281, 282, 283, 284, 286, 288, 290, 291, 293, 295, 296, 298, 300, 301, 303, 305, 306, 308, 311, 315, 316, 318, 320, 322, 341, 342, 343, 345, 348, 350, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 405, 407, 408, 409, 410, 411, 413, 414, 416, 418, 419, 420, 421, 422, 423, 425, 433, 434, 435, 437, 439, 440, 441, 442, 443, 445, 446, 448, 449, 450, 452, 454, 455, 457, 463, 464, 465, 467, 468, 469, 471, 472, 475, 476, 478, 480, 481, 482, 483, 484, 485, 487, 489, 490, 491, 492, 494, 496, 497, 498, 500, 503, 504, 505, 506, 507, 509, 510, 512, 513, 514, 516, 518, 520, 521, 523, 525, 528, 555, 556, 557, 558, 560, 574, 575, 576, 578, 579, 580, 582, 584, 585, 587, 588, 590, 591, 592, 594, 596, 609, 610, 611, 613, 614, 617, 618, 620, 622, 623, 625, 626, 627, 629, 634, 637, 642, 643, 645, 664, 665, 666, 667, 668, 670, 689, 690, 691, 692, 693, 695, 709, 716, 719, 720, 723, 724, 725, 727, 730, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 756, 759, 760, 761, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 776, 779, 780, 781, 782, 785, 786, 787, 800, 803, 804, 806, 809, 810, 811, 813, 816, 828, 829, 833, 836, 842, 843, 845, 846, 848, 849, 851, 852, 853, 855, 856, 857, 859, 860, 862, 863, 864, 865, 866, 869, 870, 871, 872, 877, 878, 879, 880, 881, 883, 889, 891, 893, 894, 895, 897, 901, 902, 903, 904, 905, 907, 909, 915, 916, 918, 919, 921, 923, 924, 925, 926, 928, 931, 936, 941, 943, 946, 950, 951, 952, 954, 957, 961, 963, 964, 965, 966, 968], "excluded_lines": []}, "nemo/lightning/pytorch/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/lightning/pytorch/callbacks/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 2, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [1, 3], "excluded_lines": []}, "nemo/lightning/pytorch/callbacks/progress.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 30, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 30, "excluded_lines": 0}, "missing_lines": [1, 2, 5, 11, 15, 20, 24, 25, 26, 28, 29, 32, 34, 40, 42, 43, 44, 46, 50, 51, 52, 53, 56, 57, 59, 61, 62, 64, 65, 67], "excluded_lines": []}, "nemo/lightning/pytorch/plugins/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 2, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [1, 3], "excluded_lines": []}, "nemo/lightning/pytorch/plugins/data_sampler.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 67, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 67, "excluded_lines": 0}, "missing_lines": [1, 3, 4, 7, 8, 9, 11, 12, 14, 15, 18, 19, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 42, 43, 45, 54, 55, 56, 58, 59, 61, 63, 64, 66, 67, 69, 74, 77, 79, 84, 86, 87, 89, 90, 92, 95, 97, 99, 103, 106, 107, 110, 112, 113, 114, 120, 121, 122, 124, 126, 127, 128, 130, 133, 135], "excluded_lines": []}, "nemo/lightning/pytorch/strategies.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 299, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 299, "excluded_lines": 0}, "missing_lines": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 38, 41, 49, 51, 66, 73, 74, 75, 76, 77, 78, 79, 80, 83, 85, 86, 87, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 114, 116, 117, 118, 120, 121, 122, 123, 125, 126, 128, 129, 130, 132, 134, 136, 137, 139, 144, 146, 149, 150, 151, 152, 153, 155, 157, 159, 160, 163, 164, 166, 167, 168, 169, 171, 172, 175, 176, 178, 179, 181, 182, 183, 185, 186, 187, 188, 190, 192, 193, 195, 201, 202, 204, 205, 206, 208, 209, 211, 212, 213, 215, 216, 217, 218, 219, 221, 222, 224, 225, 227, 228, 229, 231, 232, 237, 238, 240, 242, 243, 244, 246, 248, 249, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 263, 264, 266, 267, 268, 269, 270, 272, 273, 275, 276, 277, 278, 279, 281, 282, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 335, 337, 339, 340, 343, 344, 345, 346, 348, 350, 351, 357, 360, 361, 367, 369, 371, 372, 373, 375, 376, 377, 379, 380, 381, 383, 385, 388, 390, 391, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 405, 407, 408, 410, 411, 412, 414, 416, 417, 418, 420, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 437, 438, 440, 441, 445, 448, 451, 453, 454, 459, 461, 462, 463, 465, 472, 477, 479, 480, 482, 485, 486, 487, 488, 489, 491, 494, 500, 501, 502], "excluded_lines": []}, "nemo/llm/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 3, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 3, "excluded_lines": 0}, "missing_lines": [1, 2, 4], "excluded_lines": []}, "nemo/llm/gpt/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/llm/gpt/data/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 2, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [1, 3], "excluded_lines": []}, "nemo/llm/gpt/data/mock.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 61, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 61, "excluded_lines": 0}, "missing_lines": [1, 3, 4, 5, 6, 7, 8, 10, 12, 13, 16, 17, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 50, 51, 52, 53, 55, 56, 58, 59, 61, 62, 64, 65, 75, 76, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 94, 95, 96, 98, 100, 101, 102, 104, 112, 117, 119, 137], "excluded_lines": []}, "nemo/llm/gpt/model/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 2, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [1, 3], "excluded_lines": []}, "nemo/llm/gpt/model/base.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 109, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 109, "excluded_lines": 0}, "missing_lines": [1, 2, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 19, 20, 22, 23, 24, 25, 26, 27, 28, 31, 33, 35, 36, 37, 38, 39, 43, 44, 45, 47, 63, 64, 70, 71, 72, 74, 75, 77, 78, 79, 81, 83, 92, 101, 103, 104, 106, 107, 109, 112, 114, 117, 119, 120, 122, 123, 125, 126, 129, 130, 135, 138, 139, 141, 143, 144, 145, 146, 147, 148, 152, 154, 156, 159, 160, 167, 168, 170, 173, 174, 176, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 197, 200, 201, 202, 203, 204, 207, 208, 210, 212, 214, 216, 219, 222, 231], "excluded_lines": []}, "nemo/package_info.py": {"executed_lines": [16, 17, 18, 19, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35], "summary": {"covered_lines": 16, "num_statements": 16, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/utils/__init__.py": {"executed_lines": [16, 17, 25, 26, 27, 29, 30, 31, 33], "summary": {"covered_lines": 9, "num_statements": 11, "percent_covered": 81.81818181818181, "percent_covered_display": "82", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [34, 35], "excluded_lines": []}, "nemo/utils/app_state.py": {"executed_lines": [15, 16, 17, 19, 22, 23, 24, 25, 26, 29, 30, 83, 84, 91, 92, 99, 100, 107, 108, 115, 116, 123, 124, 131, 132, 139, 140, 147, 148, 155, 156, 163, 164, 171, 172, 179, 180, 187, 188, 195, 196, 199, 200, 203, 204, 211, 212, 219, 220, 227, 228, 235, 236, 243, 244, 251, 252, 259, 260, 267, 268, 275, 276, 283, 284, 291, 292, 299, 300, 307, 308, 315, 316, 323, 324, 331, 332, 339, 340, 347, 348, 355, 356, 363, 364, 371, 372, 379, 380, 387, 388, 395, 396, 403, 404, 411, 412, 419, 420, 427, 428, 435, 436, 443, 444, 451, 452, 459, 460, 465, 466, 474, 475, 480, 481, 489, 490, 495, 496, 504, 505, 510, 511, 519, 520, 525, 526, 534, 535, 540, 541, 549, 550, 555, 556, 564, 565, 569, 570, 575, 584, 589, 594, 595, 598, 599, 602, 603, 606, 607], "summary": {"covered_lines": 150, "num_statements": 270, "percent_covered": 55.55555555555556, "percent_covered_display": "56", "missing_lines": 120, "excluded_lines": 0}, "missing_lines": [32, 35, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 89, 97, 105, 113, 121, 129, 137, 145, 153, 161, 169, 177, 185, 193, 197, 201, 209, 217, 225, 233, 241, 249, 257, 265, 273, 281, 289, 297, 305, 313, 321, 329, 337, 345, 353, 361, 369, 377, 385, 393, 401, 409, 417, 425, 433, 441, 449, 457, 463, 472, 478, 487, 493, 502, 508, 517, 523, 532, 538, 547, 553, 562, 566, 567, 571, 572, 573, 577, 578, 579, 581, 582, 586, 587, 591, 592, 596, 600, 604, 608], "excluded_lines": []}, "nemo/utils/arguments.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 34, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 34, "excluded_lines": 0}, "missing_lines": [15, 16, 19, 40, 41, 43, 45, 46, 47, 56, 59, 68, 69, 70, 77, 78, 85, 86, 89, 92, 101, 102, 103, 104, 105, 108, 117, 118, 121, 124, 127, 130, 131, 132], "excluded_lines": []}, "nemo/utils/callbacks/__init__.py": {"executed_lines": [15, 16, 17], "summary": {"covered_lines": 3, "num_statements": 3, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/utils/callbacks/cuda_graph.py": {"executed_lines": [34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 54, 67, 88, 89, 91, 96, 107, 111, 120, 128, 142, 152, 161, 215, 229, 240, 249, 250, 251, 252, 253, 254, 255, 258, 259, 264, 277, 294, 305, 323, 328, 380, 411, 415, 425, 431, 442], "summary": {"covered_lines": 51, "num_statements": 252, "percent_covered": 20.238095238095237, "percent_covered_display": "20", "missing_lines": 201, "excluded_lines": 0}, "missing_lines": [55, 56, 57, 58, 59, 60, 61, 62, 64, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 85, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 105, 108, 112, 113, 114, 115, 116, 117, 122, 123, 125, 132, 133, 134, 138, 139, 146, 147, 148, 149, 155, 156, 157, 158, 162, 164, 165, 168, 169, 171, 173, 174, 175, 176, 177, 180, 182, 183, 185, 186, 187, 195, 196, 199, 202, 203, 204, 207, 208, 210, 212, 216, 217, 218, 219, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 237, 241, 242, 243, 244, 246, 265, 269, 270, 271, 272, 273, 275, 279, 280, 285, 286, 291, 292, 296, 297, 299, 300, 302, 303, 307, 308, 310, 311, 320, 321, 325, 326, 330, 331, 334, 335, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 350, 355, 356, 359, 360, 363, 364, 365, 366, 367, 368, 371, 372, 373, 376, 377, 378, 382, 383, 385, 386, 387, 388, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 402, 403, 405, 406, 408, 409, 413, 423, 429, 440, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466], "excluded_lines": []}, "nemo/utils/callbacks/nemo_model_checkpoint.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 34, 35, 41, 43, 81, 144, 169, 173, 182, 226, 261, 293, 300, 301, 320, 321, 333, 334, 350, 351, 370, 391, 405, 408, 411, 414, 415, 425, 426, 461], "summary": {"covered_lines": 44, "num_statements": 285, "percent_covered": 15.43859649122807, "percent_covered_display": "15", "missing_lines": 241, "excluded_lines": 0}, "missing_lines": [54, 55, 56, 57, 58, 64, 65, 66, 69, 70, 72, 75, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 117, 119, 120, 122, 124, 126, 127, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 147, 148, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 170, 171, 174, 175, 176, 178, 179, 180, 183, 184, 185, 187, 188, 189, 191, 194, 195, 197, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 244, 246, 247, 248, 253, 254, 255, 256, 258, 259, 263, 266, 267, 268, 269, 270, 271, 272, 273, 276, 279, 281, 284, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 314, 315, 316, 317, 318, 331, 343, 344, 345, 346, 347, 348, 360, 361, 362, 363, 364, 365, 366, 367, 368, 373, 374, 375, 376, 377, 380, 381, 382, 383, 384, 386, 389, 394, 395, 396, 397, 399, 400, 403, 406, 409, 412, 418, 419, 420, 422, 423, 431, 432, 434, 436, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 454, 455, 458, 459, 469, 470, 471, 472, 473, 474, 476, 477, 479, 481, 482, 483, 484, 485], "excluded_lines": []}, "nemo/utils/callbacks/preemption.py": {"executed_lines": [15, 16, 18, 19, 21, 24, 25, 34, 41, 42, 48, 81, 85, 99], "summary": {"covered_lines": 13, "num_statements": 52, "percent_covered": 25.0, "percent_covered_display": "25", "missing_lines": 39, "excluded_lines": 0}, "missing_lines": [35, 36, 37, 38, 39, 43, 44, 45, 46, 55, 56, 58, 60, 61, 62, 65, 66, 67, 70, 71, 73, 74, 75, 77, 79, 82, 83, 86, 92, 93, 94, 95, 96, 97, 100, 101, 103, 104, 105], "excluded_lines": []}, "nemo/utils/cast_utils.py": {"executed_lines": [15, 17, 20, 32, 50, 54, 67, 68, 72, 81, 82, 86], "summary": {"covered_lines": 12, "num_statements": 47, "percent_covered": 25.53191489361702, "percent_covered_display": "26", "missing_lines": 35, "excluded_lines": 0}, "missing_lines": [26, 27, 29, 38, 39, 40, 42, 43, 45, 47, 51, 55, 56, 58, 59, 60, 61, 62, 63, 64, 69, 70, 73, 74, 75, 77, 78, 83, 84, 87, 88, 89, 90, 91, 93], "excluded_lines": []}, "nemo/utils/cloud.py": {"executed_lines": [15, 16, 17, 19, 20, 21, 23, 26, 87, 88, 89, 95, 96, 101], "summary": {"covered_lines": 14, "num_statements": 71, "percent_covered": 19.718309859154928, "percent_covered_display": "20", "missing_lines": 57, "excluded_lines": 0}, "missing_lines": [43, 44, 46, 47, 48, 50, 52, 53, 55, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 90, 91, 92, 93, 98, 107, 111, 112, 114, 119, 121, 122, 123, 125, 127, 129, 130, 133, 135, 137, 138, 139, 140, 141], "excluded_lines": []}, "nemo/utils/config_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 94, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 94, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 20, 23, 24, 25, 26, 27, 30, 61, 62, 63, 64, 65, 67, 68, 70, 71, 74, 77, 80, 83, 88, 92, 94, 95, 96, 99, 101, 102, 103, 105, 107, 110, 131, 132, 133, 134, 137, 138, 142, 143, 144, 146, 149, 177, 178, 179, 180, 182, 183, 185, 187, 188, 191, 193, 195, 198, 232, 234, 235, 237, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269, 271, 272, 274, 275, 277, 280], "excluded_lines": []}, "nemo/utils/data_utils.py": {"executed_lines": [15, 16, 17, 18, 19, 21, 22, 23, 26, 45, 52, 58, 72, 87, 93, 111, 129, 149, 172, 228, 229, 238, 248, 249, 254, 255, 260, 274, 285, 292, 309], "summary": {"covered_lines": 30, "num_statements": 127, "percent_covered": 23.62204724409449, "percent_covered_display": "24", "missing_lines": 97, "excluded_lines": 0}, "missing_lines": [37, 38, 39, 41, 42, 49, 55, 62, 64, 65, 66, 67, 69, 75, 76, 77, 79, 81, 83, 84, 90, 102, 103, 104, 105, 106, 108, 121, 122, 124, 125, 126, 132, 134, 135, 136, 138, 141, 142, 143, 144, 146, 158, 159, 160, 161, 163, 164, 165, 167, 169, 185, 186, 187, 188, 190, 192, 195, 196, 197, 199, 202, 203, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 218, 219, 221, 225, 239, 240, 242, 243, 245, 246, 252, 258, 269, 271, 272, 283, 288, 289, 301, 302, 304, 306, 318], "excluded_lines": []}, "nemo/utils/debug_hook.py": {"executed_lines": [15, 17, 20, 77, 134, 180], "summary": {"covered_lines": 6, "num_statements": 108, "percent_covered": 5.555555555555555, "percent_covered_display": "6", "missing_lines": 102, "excluded_lines": 0}, "missing_lines": [33, 34, 35, 36, 38, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 90, 91, 92, 93, 95, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 147, 148, 149, 150, 152, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197], "excluded_lines": []}, "nemo/utils/decorators/__init__.py": {"executed_lines": [16, 17, 18], "summary": {"covered_lines": 3, "num_statements": 3, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/utils/decorators/deprecated.py": {"executed_lines": [16, 20, 21, 22, 23, 25, 28, 31], "summary": {"covered_lines": 8, "num_statements": 26, "percent_covered": 30.76923076923077, "percent_covered_display": "31", "missing_lines": 18, "excluded_lines": 0}, "missing_lines": [43, 44, 46, 47, 49, 51, 54, 55, 58, 59, 61, 62, 65, 66, 67, 68, 71, 73], "excluded_lines": []}, "nemo/utils/decorators/experimental.py": {"executed_lines": [16, 19, 21, 24, 25], "summary": {"covered_lines": 5, "num_statements": 7, "percent_covered": 71.42857142857143, "percent_covered_display": "71", "missing_lines": 2, "excluded_lines": 0}, "missing_lines": [26, 27], "excluded_lines": []}, "nemo/utils/decorators/port_docs.py": {"executed_lines": [18, 22, 23, 25, 28, 65], "summary": {"covered_lines": 6, "num_statements": 42, "percent_covered": 14.285714285714286, "percent_covered_display": "14", "missing_lines": 36, "excluded_lines": 0}, "missing_lines": [39, 40, 43, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 62, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 88, 90], "excluded_lines": []}, "nemo/utils/distributed.py": {"executed_lines": [15, 16, 17, 19, 20, 22, 23, 25, 26, 29, 30, 33, 61, 109, 110, 128], "summary": {"covered_lines": 16, "num_statements": 60, "percent_covered": 26.666666666666668, "percent_covered_display": "27", "missing_lines": 44, "excluded_lines": 0}, "missing_lines": [28, 36, 39, 40, 42, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 84, 85, 87, 88, 90, 91, 93, 94, 97, 98, 99, 102, 103, 104, 106, 117, 118, 120, 121, 122, 125, 136, 137, 138, 139, 140, 142, 143, 145], "excluded_lines": []}, "nemo/utils/dtype.py": {"executed_lines": [15, 17, 19, 42], "summary": {"covered_lines": 4, "num_statements": 14, "percent_covered": 28.571428571428573, "percent_covered_display": "29", "missing_lines": 10, "excluded_lines": 0}, "missing_lines": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "excluded_lines": []}, "nemo/utils/enum.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 8, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 8, "excluded_lines": 0}, "missing_lines": [15, 18, 34, 35, 37, 38, 39, 40], "excluded_lines": []}, "nemo/utils/env_var_parsing.py": {"executed_lines": [42, 43, 44, 46, 48, 63, 64, 66, 71, 72, 74, 79, 96, 97, 98, 99, 102, 111, 118, 122, 126, 130, 134, 138, 142, 162, 163, 164, 165, 166, 169, 171, 174, 176, 179, 184, 189, 194, 199, 205], "summary": {"covered_lines": 38, "num_statements": 63, "percent_covered": 60.317460317460316, "percent_covered_display": "60", "missing_lines": 25, "excluded_lines": 0}, "missing_lines": [67, 68, 75, 76, 100, 104, 105, 106, 107, 112, 113, 115, 119, 123, 127, 131, 135, 139, 181, 186, 191, 196, 201, 202, 207], "excluded_lines": []}, "nemo/utils/exceptions.py": {"executed_lines": [16, 17, 20, 21, 29, 30, 33, 36], "summary": {"covered_lines": 7, "num_statements": 12, "percent_covered": 58.333333333333336, "percent_covered_display": "58", "missing_lines": 5, "excluded_lines": 0}, "missing_lines": [22, 26, 31, 34, 37], "excluded_lines": []}, "nemo/utils/exp_manager.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 57, 58, 60, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 115, 117, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 164, 166, 168, 169, 171, 172, 174, 175, 177, 179, 182, 183, 187, 190, 204, 216, 219, 222, 225, 228, 231, 234, 237, 241, 532, 567, 579, 681, 712, 789, 806, 820, 913, 988, 995, 996, 998, 1002, 1005, 1008, 1021, 1030, 1031, 1037, 1043], "summary": {"covered_lines": 154, "num_statements": 493, "percent_covered": 31.23732251521298, "percent_covered_display": "31", "missing_lines": 339, "excluded_lines": 0}, "missing_lines": [61, 65, 188, 192, 193, 195, 196, 200, 202, 205, 207, 217, 220, 223, 226, 229, 232, 235, 238, 326, 327, 328, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 346, 348, 358, 368, 370, 371, 374, 375, 376, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 399, 400, 405, 408, 409, 410, 411, 412, 413, 414, 417, 421, 429, 451, 452, 453, 455, 456, 462, 464, 465, 466, 468, 469, 478, 480, 482, 483, 484, 485, 488, 491, 492, 493, 495, 496, 497, 499, 501, 502, 503, 506, 507, 510, 511, 512, 513, 514, 517, 520, 522, 525, 527, 529, 540, 541, 545, 548, 555, 556, 560, 561, 568, 569, 570, 571, 575, 576, 602, 603, 605, 606, 607, 608, 610, 614, 615, 616, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 635, 636, 637, 638, 639, 641, 643, 646, 647, 648, 649, 651, 653, 656, 657, 658, 660, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 695, 696, 702, 703, 707, 708, 709, 739, 740, 743, 744, 745, 748, 749, 750, 751, 757, 758, 759, 764, 765, 768, 769, 771, 772, 773, 776, 777, 778, 779, 781, 782, 783, 785, 786, 797, 798, 802, 803, 814, 815, 816, 817, 845, 846, 847, 848, 849, 850, 854, 855, 856, 858, 859, 860, 861, 862, 865, 866, 867, 868, 870, 871, 873, 874, 876, 877, 879, 880, 882, 883, 885, 886, 893, 894, 896, 897, 898, 899, 900, 901, 902, 905, 907, 908, 910, 924, 925, 926, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 950, 951, 953, 954, 959, 965, 966, 972, 973, 974, 975, 976, 977, 979, 982, 983, 985, 989, 990, 991, 992, 999, 1003, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1022, 1023, 1024, 1026, 1027, 1038, 1039, 1040, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066], "excluded_lines": []}, "nemo/utils/export_utils.py": {"executed_lines": [15, 16, 17, 18, 20, 21, 22, 23, 25, 27, 28, 31, 32, 35, 36, 38, 39, 42, 49, 50, 58, 68, 69, 75, 81, 89, 98, 105, 117, 127, 140, 156, 182, 205, 227, 229, 230, 332, 333, 334, 337, 357, 375, 392, 410, 435, 439, 442, 461], "summary": {"covered_lines": 48, "num_statements": 246, "percent_covered": 19.51219512195122, "percent_covered_display": "20", "missing_lines": 198, "excluded_lines": 0}, "missing_lines": [30, 54, 55, 56, 60, 61, 62, 63, 65, 70, 71, 72, 73, 76, 77, 78, 82, 83, 84, 85, 86, 90, 91, 93, 94, 95, 99, 100, 102, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 141, 142, 143, 145, 146, 147, 148, 151, 152, 153, 157, 158, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 231, 232, 233, 234, 236, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 263, 265, 267, 276, 278, 279, 281, 283, 285, 293, 294, 296, 297, 299, 300, 301, 303, 311, 312, 313, 316, 320, 322, 347, 348, 349, 350, 351, 352, 354, 366, 369, 372, 385, 386, 387, 389, 400, 401, 402, 403, 404, 405, 407, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 451, 455, 456, 458, 467, 469, 476], "excluded_lines": []}, "nemo/utils/formatters/__init__.py": {"executed_lines": [1], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/utils/formatters/base.py": {"executed_lines": [16, 18, 19, 21, 24, 25, 32, 34, 36, 44, 59, 60, 62, 63, 65, 66, 68, 70, 71, 72, 74, 78, 79, 80, 81, 98, 103, 105, 109, 111, 113, 117, 125, 128, 129, 132, 133], "summary": {"covered_lines": 36, "num_statements": 47, "percent_covered": 76.59574468085107, "percent_covered_display": "77", "missing_lines": 11, "excluded_lines": 0}, "missing_lines": [75, 76, 100, 101, 106, 107, 114, 115, 121, 122, 124], "excluded_lines": []}, "nemo/utils/formatters/colors.py": {"executed_lines": [18, 19, 20, 23, 24, 27, 31, 35, 39, 40, 44, 45, 46, 47, 50, 51, 54, 57, 60, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 118, 119, 120, 121], "summary": {"covered_lines": 65, "num_statements": 73, "percent_covered": 89.04109589041096, "percent_covered_display": "89", "missing_lines": 8, "excluded_lines": 0}, "missing_lines": [28, 32, 36, 52, 55, 58, 61, 64], "excluded_lines": []}, "nemo/utils/formatters/utils.py": {"executed_lines": [16, 18, 19, 21, 24, 26, 30, 36, 37, 38], "summary": {"covered_lines": 10, "num_statements": 16, "percent_covered": 62.5, "percent_covered_display": "62", "missing_lines": 6, "excluded_lines": 0}, "missing_lines": [27, 40, 41, 43, 45, 46], "excluded_lines": []}, "nemo/utils/get_rank.py": {"executed_lines": [15, 17, 20, 25, 26, 31, 32, 36, 37, 43, 44, 45, 48], "summary": {"covered_lines": 13, "num_statements": 19, "percent_covered": 68.42105263157895, "percent_covered_display": "68", "missing_lines": 6, "excluded_lines": 0}, "missing_lines": [27, 33, 38, 52, 53, 55], "excluded_lines": []}, "nemo/utils/lightning_logger_patch.py": {"executed_lines": [15, 16, 18, 20, 21, 24, 30, 31, 32, 33, 34, 35, 38], "summary": {"covered_lines": 13, "num_statements": 26, "percent_covered": 50.0, "percent_covered_display": "50", "missing_lines": 13, "excluded_lines": 0}, "missing_lines": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58], "excluded_lines": []}, "nemo/utils/loggers/__init__.py": {"executed_lines": [15, 16, 17], "summary": {"covered_lines": 3, "num_statements": 3, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/utils/loggers/clearml_logger.py": {"executed_lines": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 56, 57, 60, 109, 120, 131, 154, 167, 175], "summary": {"covered_lines": 39, "num_statements": 113, "percent_covered": 34.51327433628319, "percent_covered_display": "35", "missing_lines": 74, "excluded_lines": 0}, "missing_lines": [34, 54, 58, 63, 64, 70, 71, 72, 73, 76, 77, 78, 79, 80, 82, 83, 85, 86, 87, 89, 97, 98, 99, 100, 102, 104, 105, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 129, 139, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 176, 177, 178, 185, 186, 188, 190], "excluded_lines": []}, "nemo/utils/loggers/dllogger.py": {"executed_lines": [15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 28, 29, 33, 34, 36, 37, 39, 44, 45, 46, 47, 48, 51, 52, 53, 56, 57, 60, 85, 86, 96, 97, 103], "summary": {"covered_lines": 33, "num_statements": 65, "percent_covered": 50.76923076923077, "percent_covered_display": "51", "missing_lines": 32, "excluded_lines": 0}, "missing_lines": [30, 32, 40, 41, 54, 58, 61, 62, 66, 67, 71, 72, 73, 74, 75, 76, 77, 79, 80, 83, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 101, 104], "excluded_lines": []}, "nemo/utils/loggers/mlflow_logger.py": {"executed_lines": [15, 16, 19, 20, 22, 25, 26, 27, 28, 29, 31, 33], "summary": {"covered_lines": 12, "num_statements": 12, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/utils/mcore_logger.py": {"executed_lines": [15, 17, 20], "summary": {"covered_lines": 3, "num_statements": 8, "percent_covered": 37.5, "percent_covered_display": "38", "missing_lines": 5, "excluded_lines": 0}, "missing_lines": [27, 28, 29, 30, 31], "excluded_lines": []}, "nemo/utils/metaclasses.py": {"executed_lines": [16, 19, 20, 25, 27, 29, 31, 33, 35, 37, 39], "summary": {"covered_lines": 10, "num_statements": 10, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "nemo/utils/model_utils.py": {"executed_lines": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 37, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 63, 64, 65, 66, 67, 70, 80, 95, 99, 189, 229, 254, 333, 414, 415, 425, 452, 477, 516, 517, 529, 568, 621, 632, 655, 676], "summary": {"covered_lines": 53, "num_statements": 308, "percent_covered": 17.207792207792206, "percent_covered_display": "17", "missing_lines": 255, "excluded_lines": 0}, "missing_lines": [43, 44, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 96, 159, 160, 162, 163, 165, 167, 168, 170, 171, 172, 173, 174, 177, 179, 180, 183, 184, 186, 200, 201, 203, 206, 208, 209, 211, 212, 215, 216, 223, 224, 226, 237, 238, 241, 242, 243, 244, 251, 276, 277, 278, 279, 280, 283, 284, 285, 286, 288, 291, 293, 295, 296, 301, 302, 304, 306, 308, 309, 311, 313, 315, 316, 318, 319, 321, 323, 324, 325, 328, 329, 330, 355, 356, 357, 358, 359, 362, 363, 364, 365, 367, 370, 372, 374, 375, 380, 381, 383, 385, 387, 388, 390, 392, 394, 395, 397, 398, 400, 402, 404, 405, 408, 409, 411, 416, 418, 419, 420, 422, 438, 439, 440, 441, 442, 444, 445, 447, 448, 449, 454, 455, 456, 459, 460, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 492, 493, 494, 495, 496, 497, 498, 499, 501, 504, 505, 508, 511, 513, 521, 522, 523, 524, 525, 526, 542, 544, 545, 547, 549, 551, 554, 556, 557, 559, 560, 562, 564, 565, 589, 590, 591, 593, 595, 596, 597, 599, 600, 601, 603, 607, 609, 613, 614, 615, 617, 618, 622, 623, 624, 625, 626, 627, 629, 638, 640, 641, 642, 643, 644, 645, 646, 648, 649, 651, 652, 661, 664, 665, 668, 671, 673, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 694, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 710, 711, 713, 714], "excluded_lines": []}, "nemo/utils/nemo_logging.py": {"executed_lines": [16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 33, 34, 35, 38, 41, 44, 47, 50, 53, 56, 58, 67, 69, 71, 72, 73, 74, 75, 76, 78, 82, 85, 86, 87, 89, 91, 101, 102, 106, 108, 109, 110, 111, 112, 114, 115, 116, 117, 120, 121, 123, 124, 126, 128, 130, 135, 136, 138, 139, 141, 142, 144, 145, 147, 152, 156, 160, 161, 163, 164, 166, 167, 169, 170, 171, 175, 180, 197, 216, 221, 225, 227, 228, 230, 231, 233, 235, 237, 238, 269, 270, 301, 302, 323, 330, 332, 334, 335, 342, 348, 349, 351, 352, 353, 357, 359, 371, 383, 392, 393, 395, 407], "summary": {"covered_lines": 115, "num_statements": 218, "percent_covered": 52.75229357798165, "percent_covered_display": "53", "missing_lines": 103, "excluded_lines": 0}, "missing_lines": [83, 92, 94, 95, 96, 97, 99, 100, 122, 131, 137, 143, 153, 157, 172, 173, 177, 178, 184, 185, 187, 188, 189, 190, 192, 193, 194, 195, 201, 202, 204, 205, 207, 208, 209, 211, 212, 213, 214, 218, 219, 223, 240, 241, 242, 243, 244, 247, 248, 249, 250, 252, 254, 255, 256, 259, 260, 261, 262, 264, 267, 272, 273, 274, 275, 276, 279, 280, 281, 282, 284, 286, 287, 288, 291, 292, 293, 294, 296, 299, 305, 307, 309, 310, 311, 314, 317, 318, 321, 337, 339, 340, 354, 355, 356, 368, 369, 380, 381, 404, 405, 416, 421], "excluded_lines": []}, "nemo/utils/notebook_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 55, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 55, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 17, 18, 19, 20, 22, 26, 28, 29, 30, 31, 34, 35, 36, 38, 39, 43, 47, 49, 52, 53, 54, 57, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104], "excluded_lines": []}, "nemo/utils/te_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 9, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 9, "excluded_lines": 0}, "missing_lines": [15, 18, 19, 20, 22, 23, 25, 28, 30], "excluded_lines": []}, "nemo/utils/timers.py": {"executed_lines": [1, 18, 19, 21, 22, 24, 27, 28, 36, 38, 55, 58, 59, 62, 63, 71, 83, 103, 130, 136, 142, 153, 164, 165, 169, 180, 185, 198, 212], "summary": {"covered_lines": 26, "num_statements": 85, "percent_covered": 30.58823529411765, "percent_covered_display": "31", "missing_lines": 59, "excluded_lines": 0}, "missing_lines": [46, 47, 49, 50, 51, 53, 56, 60, 64, 65, 67, 69, 78, 79, 81, 90, 92, 93, 96, 97, 99, 101, 110, 111, 112, 115, 116, 119, 122, 125, 126, 128, 131, 132, 133, 134, 140, 149, 151, 157, 159, 161, 176, 177, 178, 182, 183, 192, 193, 194, 195, 196, 205, 206, 207, 208, 209, 210, 214], "excluded_lines": []}, "nemo/utils/trt_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 19, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 19, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 19, 21, 23, 26, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 60], "excluded_lines": []}, "setup.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 81, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 81, "excluded_lines": 0}, "missing_lines": [18, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 54, 57, 60, 61, 69, 70, 71, 74, 77, 79, 94, 97, 98, 99, 100, 101, 102, 107, 109, 117, 118, 119, 120, 121, 126, 127, 129, 131, 132, 134, 138, 140, 142, 143, 145, 146, 148, 149, 151, 152, 155, 156, 157, 159, 160, 161, 162, 164, 165, 167, 168, 170, 171, 176], "excluded_lines": []}, "tests/__init__.py": {"executed_lines": [1], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "tests/check_copyright_header.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 79, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 79, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 19, 20, 21, 23, 26, 28, 29, 31, 32, 34, 35, 37, 38, 40, 41, 42, 44, 47, 48, 49, 55, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 119, 120], "excluded_lines": []}, "tests/collections/asr/conftest.py": {"executed_lines": [15, 16, 18, 19, 20, 23, 24, 25, 69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 82, 83, 122, 123, 185, 186, 297, 298, 321, 322, 348, 349, 353, 354], "summary": {"covered_lines": 32, "num_statements": 105, "percent_covered": 30.476190476190474, "percent_covered_display": "30", "missing_lines": 73, "excluded_lines": 0}, "missing_lines": [26, 27, 29, 30, 32, 33, 35, 37, 38, 39, 41, 43, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 58, 59, 61, 62, 64, 66, 84, 92, 94, 95, 111, 124, 135, 137, 138, 174, 188, 235, 236, 282, 283, 284, 286, 299, 300, 301, 302, 303, 304, 306, 308, 309, 310, 311, 312, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 350, 355], "excluded_lines": []}, "tests/collections/asr/decoding/rnnt_alignments_check.py": {"executed_lines": [20, 21, 22], "summary": {"covered_lines": 3, "num_statements": 42, "percent_covered": 7.142857142857143, "percent_covered_display": "7", "missing_lines": 39, "excluded_lines": 0}, "missing_lines": [23, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 52, 53, 54, 55, 56, 57, 58, 60, 61, 64, 65, 70, 74, 75, 76, 78, 79, 83, 84, 85, 86, 87, 88], "excluded_lines": []}, "tests/conftest.py": {"executed_lines": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 31, 32, 33, 36, 43, 46, 51, 56, 62, 69, 70, 78, 79, 85, 86, 94, 95, 103, 104, 120, 121, 131, 161, 162, 172, 173, 188, 195, 198, 201, 205, 206, 209, 210, 215, 226, 227, 228, 229, 230, 244, 245, 248, 258, 268, 269, 271, 272], "summary": {"covered_lines": 61, "num_statements": 132, "percent_covered": 46.21212121212121, "percent_covered_display": "46", "missing_lines": 71, "excluded_lines": 0}, "missing_lines": [72, 73, 75, 80, 81, 82, 87, 88, 89, 96, 97, 98, 106, 107, 108, 110, 112, 113, 114, 115, 116, 117, 127, 128, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 151, 152, 155, 156, 157, 158, 163, 164, 166, 167, 168, 169, 174, 175, 177, 178, 180, 181, 182, 183, 185, 211, 213, 216, 217, 219, 231, 233, 234, 236, 241, 249, 255, 266], "excluded_lines": []}, "tests/core/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "tests/core/test_config_utils.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 96, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 96, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 22, 23, 24, 27, 28, 29, 30, 31, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135], "excluded_lines": []}, "tests/core/test_exp_manager.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 433, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 433, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 82, 83, 85, 86, 89, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 113, 114, 116, 117, 120, 121, 123, 124, 126, 127, 129, 130, 133, 134, 135, 138, 139, 140, 142, 143, 145, 146, 150, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 166, 167, 171, 173, 175, 176, 187, 197, 199, 200, 201, 203, 205, 206, 217, 227, 229, 230, 234, 235, 236, 237, 240, 242, 243, 245, 246, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 289, 291, 292, 294, 297, 298, 308, 309, 312, 321, 322, 324, 325, 333, 335, 336, 344, 345, 346, 348, 349, 358, 359, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 391, 392, 393, 394, 395, 403, 405, 406, 407, 408, 412, 413, 415, 417, 418, 420, 421, 422, 423, 426, 427, 429, 431, 432, 434, 435, 436, 437, 444, 445, 447, 449, 450, 452, 453, 454, 457, 464, 465, 467, 469, 470, 471, 472, 479, 480, 482, 484, 485, 487, 488, 497, 498, 499, 500, 502, 503, 505, 506, 507, 508, 510, 511, 512, 513, 515, 518, 525, 526, 528, 529, 530, 531, 533, 534, 535, 537, 541, 543, 551, 558, 559, 561, 562, 564, 566, 567, 568, 569, 570, 572, 573, 574, 576, 577, 579, 582, 584, 585, 587, 589, 592, 593, 595, 596, 605, 609, 611, 612, 613, 615, 619, 621, 622, 624, 628, 629, 630, 631, 633, 634, 635, 637, 638, 641, 642, 643, 644, 646, 647, 655, 656, 658, 663, 668, 675, 682, 689, 697, 698, 703, 708, 709, 717, 718, 720, 725, 730, 735, 741, 742, 747, 752, 753, 758, 759, 761, 768, 769, 771, 778, 779, 782, 783, 786, 789, 792, 795, 798, 800, 802, 807, 808, 810, 811, 812, 813, 815, 816, 822, 823, 825, 829, 830, 832, 836, 837, 840, 842, 843, 845, 847, 852, 853, 855, 856, 857, 858, 860, 881, 882, 883, 887, 888, 890, 891, 898, 899, 901, 902, 915, 916, 918, 919, 920, 921, 922, 923, 927, 928, 930, 931, 945, 946, 948, 950, 951, 952, 953, 954], "excluded_lines": []}, "tests/core/test_fileio.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 127, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 127, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 23, 25, 26, 28, 29, 30, 33, 36, 37, 38, 39, 62, 99, 103, 104, 107, 108, 109, 113, 114, 115, 116, 118, 120, 121, 123, 124, 126, 128, 129, 133, 134, 137, 138, 139, 142, 144, 145, 147, 148, 150, 152, 153, 154, 157, 158, 161, 164, 165, 166, 169, 170, 172, 175, 176, 178, 180, 182, 183, 191, 195, 197, 200, 201, 203, 205, 207, 210, 211, 212, 213, 214, 217, 219, 220, 222, 223, 225, 227, 229, 230, 231, 232, 233, 236, 237, 239, 242, 244, 245, 248, 250, 251, 253, 256, 258, 259, 261, 263, 264, 265, 266, 267, 270, 271, 272, 273, 275, 276, 277, 280, 282, 283, 286, 288, 289, 291, 294, 296, 297, 299], "excluded_lines": []}, "tests/core/test_neural_types.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 108, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 108, "excluded_lines": 0}, "missing_lines": [16, 18, 35, 36, 37, 38, 42, 43, 44, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 93, 94, 95, 105, 116, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 145, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 172, 174, 175, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 199, 200, 202, 210, 211, 212, 214, 215, 217, 224], "excluded_lines": []}, "tests/core/test_optimizers_schedulers.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 620, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 620, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 31, 32, 33, 34, 36, 37, 38, 41, 42, 43, 44, 45, 47, 48, 49, 50, 53, 54, 55, 56, 58, 59, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 107, 110, 111, 113, 114, 116, 119, 120, 123, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 158, 159, 161, 163, 165, 167, 168, 169, 170, 172, 173, 175, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 214, 215, 216, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 234, 235, 236, 238, 239, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 269, 271, 273, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 287, 288, 289, 291, 292, 293, 295, 296, 297, 298, 299, 301, 306, 307, 309, 310, 311, 313, 314, 315, 316, 317, 318, 329, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 360, 361, 362, 365, 366, 368, 370, 371, 372, 373, 375, 376, 378, 381, 382, 384, 386, 387, 388, 390, 391, 392, 394, 395, 397, 399, 400, 401, 402, 403, 406, 407, 409, 411, 412, 413, 414, 416, 417, 419, 422, 423, 425, 427, 428, 429, 431, 433, 434, 436, 437, 439, 442, 445, 447, 449, 450, 451, 453, 454, 455, 457, 458, 460, 462, 463, 464, 465, 466, 469, 470, 472, 474, 475, 476, 477, 479, 480, 482, 485, 486, 488, 490, 491, 492, 494, 496, 497, 499, 500, 502, 505, 508, 510, 512, 513, 514, 516, 517, 518, 520, 521, 523, 525, 526, 527, 528, 529, 532, 533, 535, 537, 538, 539, 540, 542, 543, 545, 548, 549, 551, 553, 554, 555, 557, 559, 560, 562, 563, 565, 567, 568, 569, 570, 571, 574, 575, 577, 579, 580, 581, 582, 584, 585, 587, 590, 593, 595, 597, 598, 599, 601, 603, 604, 606, 607, 609, 611, 612, 613, 614, 615, 618, 619, 621, 623, 624, 625, 626, 628, 629, 631, 634, 635, 637, 639, 640, 641, 643, 645, 646, 648, 649, 651, 654, 657, 659, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 675, 678, 679, 680, 681, 682, 683, 686, 689, 692, 694, 696, 697, 698, 699, 700, 701, 702, 705, 708, 711, 713, 715, 716, 717, 719, 720, 722, 723, 724, 725, 727, 728, 729, 730, 731, 734, 737, 739, 741, 742, 743, 744, 746, 747, 749, 752, 755, 757, 759, 760, 761, 763, 765, 766, 768, 769, 771, 773, 774, 775, 776, 777, 780, 783, 785, 787, 788, 789, 790, 792, 793, 795, 798, 801, 803, 805, 806, 807, 809, 811, 812, 814, 815, 817, 820, 823, 825, 827, 828, 829, 830, 831, 833, 834, 835, 837, 838, 840, 842, 843, 844, 845, 846, 849, 850, 852, 854, 855, 856, 857, 859, 860, 862, 865, 868, 870, 872, 873, 874, 876, 878, 879, 881, 882, 884, 886, 887, 888, 889, 890, 893, 894, 896, 898, 899, 900, 901, 902, 905, 906, 908, 910, 911, 913, 915, 916, 919, 920, 922, 923, 924, 925, 928, 938, 941, 942, 943, 946, 955, 964, 973, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 997, 998, 999, 1000, 1003, 1013, 1014, 1015, 1018], "excluded_lines": []}, "tests/core/test_save_restore.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 770, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 770, "excluded_lines": 0}, "missing_lines": [14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 55, 56, 57, 59, 60, 63, 64, 65, 66, 68, 69, 71, 72, 74, 79, 80, 81, 82, 83, 85, 90, 92, 93, 94, 96, 97, 99, 100, 102, 103, 105, 106, 107, 110, 115, 116, 126, 127, 128, 131, 132, 136, 140, 141, 142, 145, 146, 152, 155, 161, 162, 168, 170, 171, 176, 177, 184, 193, 194, 196, 197, 198, 202, 205, 211, 212, 214, 216, 217, 220, 221, 222, 223, 224, 227, 236, 245, 246, 247, 250, 251, 252, 253, 254, 257, 258, 264, 265, 266, 269, 270, 271, 272, 273, 276, 277, 293, 294, 295, 297, 298, 300, 301, 303, 304, 305, 307, 315, 316, 318, 319, 320, 321, 323, 325, 326, 327, 329, 330, 332, 333, 334, 336, 337, 339, 340, 341, 343, 344, 346, 347, 348, 350, 351, 353, 354, 355, 358, 359, 361, 362, 363, 365, 366, 370, 371, 372, 374, 375, 378, 379, 382, 383, 385, 388, 391, 393, 394, 396, 398, 399, 400, 402, 403, 406, 407, 410, 411, 414, 415, 417, 418, 420, 422, 424, 425, 426, 428, 429, 432, 433, 436, 437, 439, 442, 443, 446, 449, 450, 451, 454, 456, 457, 458, 460, 461, 464, 465, 468, 469, 471, 474, 475, 478, 481, 486, 487, 488, 489, 492, 494, 495, 496, 498, 499, 502, 503, 506, 507, 509, 512, 513, 514, 518, 520, 523, 524, 525, 526, 528, 529, 530, 532, 533, 534, 535, 538, 539, 540, 541, 544, 545, 546, 547, 549, 550, 553, 554, 557, 558, 560, 561, 562, 564, 565, 566, 567, 570, 571, 572, 573, 576, 577, 578, 579, 581, 582, 585, 586, 589, 590, 592, 593, 594, 596, 597, 600, 601, 604, 605, 607, 609, 611, 612, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 634, 635, 636, 637, 639, 640, 641, 643, 644, 647, 648, 651, 652, 654, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 670, 672, 673, 674, 675, 677, 678, 679, 681, 683, 684, 685, 686, 687, 688, 690, 691, 693, 695, 698, 699, 700, 701, 703, 705, 708, 709, 711, 712, 713, 714, 715, 716, 718, 719, 721, 723, 726, 727, 728, 729, 731, 733, 738, 739, 741, 742, 743, 744, 745, 746, 748, 749, 751, 753, 756, 757, 758, 759, 761, 762, 764, 766, 767, 768, 770, 771, 772, 774, 775, 776, 777, 778, 779, 781, 782, 783, 785, 786, 788, 790, 793, 794, 795, 796, 797, 799, 800, 802, 803, 804, 807, 808, 810, 811, 813, 814, 815, 818, 819, 820, 821, 824, 825, 826, 828, 829, 830, 831, 844, 845, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 863, 868, 872, 873, 874, 875, 877, 879, 880, 881, 882, 885, 886, 887, 889, 890, 891, 892, 903, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924, 925, 926, 927, 929, 930, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 945, 950, 956, 957, 958, 959, 960, 963, 965, 966, 968, 972, 973, 974, 976, 978, 979, 980, 981, 983, 985, 986, 991, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1033, 1036, 1037, 1041, 1042, 1045, 1046, 1049, 1050, 1051, 1052, 1054, 1057, 1058, 1059, 1060, 1062, 1063, 1066, 1067, 1068, 1069, 1071, 1072, 1077, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1107, 1110, 1111, 1112, 1114, 1117, 1118, 1119, 1123, 1125, 1126, 1127, 1131, 1133, 1134, 1136, 1137, 1138, 1142, 1143, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1160, 1161, 1162, 1163, 1166, 1167, 1170, 1172, 1173, 1175, 1176, 1182, 1184, 1185, 1186, 1187, 1188, 1189, 1191, 1192, 1193, 1196, 1197, 1198, 1201, 1202, 1204, 1206, 1209, 1210, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1222, 1226, 1227, 1229, 1230, 1231, 1233, 1234, 1236, 1238, 1239, 1240, 1241, 1242, 1243, 1245, 1246, 1248, 1249, 1251, 1254, 1255, 1256, 1257, 1259, 1260, 1264, 1265, 1266, 1271, 1275, 1276, 1277, 1280, 1281, 1282, 1284, 1285, 1289, 1290, 1291, 1294, 1295, 1297, 1298, 1299, 1300, 1302, 1303, 1304, 1305, 1306, 1308, 1309, 1310, 1311, 1314, 1315, 1318, 1319, 1321, 1322, 1323, 1324, 1325, 1328, 1329, 1330, 1333, 1334, 1335, 1337, 1338, 1339, 1340, 1342, 1343, 1344, 1345, 1348, 1349, 1352, 1353, 1354, 1355], "excluded_lines": []}, "tests/core/test_serialization.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 60, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 60, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 23, 24, 27, 28, 29, 30, 33, 34, 37, 38, 39, 42, 48, 49, 51, 52, 55, 56, 79, 116, 119, 120, 122, 123, 124, 130, 131, 132, 133, 134, 135, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165], "excluded_lines": []}, "tests/core/test_torch_jit_script.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 109, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 109, "excluded_lines": 0}, "missing_lines": [15, 16, 18, 19, 20, 22, 23, 24, 25, 28, 30, 31, 32, 33, 38, 39, 42, 45, 46, 47, 49, 50, 53, 56, 57, 58, 60, 61, 64, 67, 68, 69, 71, 72, 75, 78, 79, 80, 84, 85, 86, 90, 91, 92, 94, 95, 96, 99, 102, 103, 104, 108, 109, 110, 114, 115, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 135, 137, 138, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 155, 156, 159, 164, 165, 166, 167, 169, 171, 173, 174, 176, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190], "excluded_lines": []}, "tests/core/test_typecheck.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 805, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 805, "excluded_lines": 0}, "missing_lines": [15, 17, 18, 20, 21, 25, 26, 27, 28, 29, 31, 35, 36, 37, 38, 39, 41, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 74, 75, 77, 78, 81, 82, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 137, 139, 140, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 160, 161, 163, 164, 166, 167, 169, 170, 171, 172, 173, 175, 176, 177, 178, 180, 181, 182, 183, 184, 186, 187, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 211, 212, 214, 215, 217, 218, 220, 221, 222, 223, 224, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 240, 241, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 256, 257, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 305, 307, 308, 310, 311, 312, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 325, 328, 330, 331, 333, 334, 335, 336, 338, 339, 340, 344, 345, 346, 348, 350, 351, 353, 354, 355, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 370, 372, 373, 375, 376, 377, 378, 380, 381, 382, 386, 387, 388, 390, 392, 393, 395, 396, 398, 399, 400, 401, 403, 404, 405, 406, 408, 410, 411, 416, 417, 418, 419, 421, 422, 423, 424, 426, 427, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 443, 444, 446, 447, 449, 450, 452, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 487, 488, 490, 491, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 510, 511, 513, 514, 518, 521, 522, 523, 524, 526, 527, 528, 533, 534, 536, 537, 538, 542, 544, 545, 547, 548, 549, 552, 555, 556, 557, 559, 560, 561, 562, 563, 564, 566, 567, 568, 573, 574, 576, 577, 578, 581, 582, 583, 584, 586, 587, 588, 593, 594, 596, 597, 598, 599, 601, 602, 604, 605, 606, 609, 612, 613, 614, 616, 617, 618, 619, 620, 621, 623, 624, 625, 630, 631, 633, 634, 635, 638, 639, 640, 641, 643, 644, 645, 650, 651, 653, 654, 655, 656, 658, 659, 661, 662, 663, 666, 667, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 682, 683, 685, 686, 688, 690, 691, 692, 693, 695, 696, 698, 699, 701, 703, 704, 706, 708, 709, 711, 712, 714, 715, 717, 718, 719, 721, 722, 723, 725, 726, 727, 729, 730, 731, 733, 734, 735, 736, 737, 739, 741, 742, 744, 745, 747, 748, 750, 751, 753, 754, 755, 756, 758, 759, 761, 762, 765, 768, 769, 771, 773, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 787, 788, 789, 790, 792, 793, 795, 796, 799, 801, 802, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 817, 818, 819, 821, 822, 824, 825, 829, 830, 833, 835, 836, 837, 841, 842, 843, 844, 845, 848, 850, 851, 854, 856, 860, 862, 866, 867, 869, 873, 874, 876, 880, 881, 883, 885, 886, 889, 891, 892, 894, 896, 897, 898, 899, 901, 903, 904, 907, 908, 910, 912, 914, 915, 916, 917, 918, 919, 921, 922, 923, 925, 926, 927, 928, 931, 932, 935, 937, 938, 941, 943, 944, 945, 946, 947, 948, 950, 951, 952, 954, 955, 957, 959, 960, 962, 965, 966, 968, 969, 972, 973, 975, 977, 978, 981, 982, 984, 986, 987, 989, 990, 991, 992, 993, 994, 996, 997, 998, 1000, 1001, 1003, 1004, 1006, 1007, 1009, 1012, 1013, 1015, 1016, 1019, 1020, 1022, 1024, 1025, 1028, 1029, 1031, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1056, 1058, 1059, 1060, 1061, 1062, 1064, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1074, 1076, 1078, 1079, 1081, 1082, 1083, 1084, 1085, 1087, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1098, 1100, 1101, 1103, 1104, 1105, 1106, 1107, 1109, 1111, 1112, 1113, 1115, 1116, 1117, 1118, 1119, 1121, 1123, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1135, 1137, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1147, 1149, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1164, 1165, 1167, 1168, 1169, 1170, 1172, 1173, 1175, 1176, 1179, 1180, 1181, 1182, 1185, 1186, 1187, 1188, 1191, 1192], "excluded_lines": []}, "tests/export/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "tests/export/test_nemo_export.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 218, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 218, "excluded_lines": 0}, "missing_lines": [15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 33, 39, 40, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 56, 65, 67, 68, 70, 71, 73, 78, 79, 80, 82, 83, 86, 88, 89, 91, 96, 97, 98, 99, 101, 102, 104, 105, 107, 109, 118, 144, 145, 146, 151, 153, 155, 156, 157, 158, 161, 163, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 199, 214, 215, 219, 231, 232, 233, 234, 235, 236, 237, 238, 240, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 272, 275, 288, 289, 290, 292, 293, 294, 296, 298, 299, 300, 302, 303, 304, 305, 307, 309, 310, 311, 312, 314, 316, 344, 345, 350, 353, 356, 359, 362, 365, 368, 371, 374, 377, 380, 383, 386, 389, 392, 395, 398, 401, 404, 407, 410, 411, 414, 417, 420, 424, 427, 428, 429, 431, 433, 434, 435, 437, 439, 440, 441, 442, 444, 445, 458, 460, 461, 462, 463, 465, 466, 492, 494, 495, 496, 497, 498, 499, 500, 501, 509, 510, 511, 513, 514, 515, 516, 519, 520, 521], "excluded_lines": []}, "tests/fixtures/tts.py": {"executed_lines": [15, 17, 18, 19, 21, 24, 25, 29, 30, 39, 40, 44, 45, 58, 59, 71, 72], "summary": {"covered_lines": 17, "num_statements": 41, "percent_covered": 41.46341463414634, "percent_covered_display": "41", "missing_lines": 24, "excluded_lines": 0}, "missing_lines": [26, 31, 41, 46, 47, 48, 49, 53, 55, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 79, 80, 81, 83], "excluded_lines": []}, "tests/infer_data_path.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 249, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 249, "excluded_lines": 0}, "missing_lines": [15, 16, 19, 20, 22, 23, 24, 25, 26, 27, 30, 31, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 53, 54, 55, 57, 58, 59, 60, 61, 62, 65, 70, 71, 72, 74, 75, 76, 77, 78, 79, 82, 87, 88, 89, 91, 92, 93, 94, 95, 98, 101, 106, 107, 108, 110, 111, 112, 113, 114, 117, 120, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 170, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 263, 264, 265, 267, 268, 269, 270, 271, 272, 275, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 295, 296, 297, 299, 300, 301, 302, 303, 304, 307, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 383, 384, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400], "excluded_lines": []}, "tests/lightning/__init__.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 0, "percent_covered": 100.0, "percent_covered_display": "100", "missing_lines": 0, "excluded_lines": 0}, "missing_lines": [], "excluded_lines": []}, "tests/lightning/test_megatron_parallel.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 104, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 104, "excluded_lines": 0}, "missing_lines": [1, 3, 4, 6, 7, 10, 13, 14, 17, 18, 19, 20, 22, 23, 25, 33, 34, 36, 38, 39, 41, 43, 44, 46, 48, 49, 51, 53, 55, 56, 58, 60, 61, 62, 63, 64, 65, 118, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 132, 133, 135, 136, 138, 139, 141, 142, 143, 144, 145, 147, 148, 150, 152, 153, 155, 156, 157, 158, 160, 162, 164, 165, 166, 169, 171, 173, 174, 175, 178, 181, 186, 187, 188, 190, 191, 194, 195, 196, 198, 200, 202, 204, 206, 207, 209, 210, 212, 213, 215, 216, 218, 219, 221, 222], "excluded_lines": []}, "tests/lightning/test_strategy_lib.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 46, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 46, "excluded_lines": 0}, "missing_lines": [1, 3, 5, 8, 9, 10, 13, 14, 15, 18, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 39, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 206, 207, 208, 209, 210, 211], "excluded_lines": []}, "tests/manualtest_model_downloads.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 23, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 23, "excluded_lines": 0}, "missing_lines": [15, 20, 21, 22, 25, 26, 27, 28, 29, 30, 33, 35, 46, 47, 60, 72, 73, 78, 91, 92, 93, 94, 97], "excluded_lines": []}, "tests/test_data_dir.py": {"executed_lines": [], "summary": {"covered_lines": 0, "num_statements": 7, "percent_covered": 0.0, "percent_covered_display": "0", "missing_lines": 7, "excluded_lines": 0}, "missing_lines": [16, 18, 21, 22, 23, 26, 27], "excluded_lines": []}}, "totals": {"covered_lines": 8792, "num_statements": 129584, "percent_covered": 6.784788245462403, "percent_covered_display": "7", "missing_lines": 120792, "excluded_lines": 0}}